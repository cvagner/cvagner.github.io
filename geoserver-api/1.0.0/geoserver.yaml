---
swagger: '2.0'
info:
  version: 1.0.0
  title: GeoServer REST API
  description: GeoServer REST API
#host: localhost:8080
basePath: /geoserver/rest
tags:
- name: "manifests"
  description: GeoServer provides a REST service to expose a listing of all loaded JARs and resources on the running instance. This is useful for bug reports and to keep track of extensions deployed into the application.
- name: "datastores"
  description: A data store contains vector format spatial data. It can be a file (such as a shapefile), a database (such as PostGIS), or a server (such as a remote Web Feature Service).
- name: "coverages"
  description: A coverage is a raster data set which originates from a coverage store.
- name: "coveragestores"
  description: A coverage store describes how access a raster data source.
- name: "featuretypes"
  description: A feature type is a vector based spatial resource or data set that originates from a data store. In some cases, such as with a shapefile, a feature type has a one-to-one relationship with its data store. In other cases, such as PostGIS, the relationship of feature type to data store is many-to-one, feature types corresponding to a table in the database.
- name: "fonts"
  description: A font is a set of characters that can be used in a style for displaying labels.
- name: "layers"
  description: A layer is a published resource (feature type or coverage).
- name: "monitoring"
  description: Request provides details about OWS and REST requests that GeoServer has handled
- name: "namespaces"
  description: A namespace is a uniquely identifiable grouping of feature types. It is identified by a prefix and a URI.
- name: "services/wms|wfs|wcs/settings"
  description: An OWS service refers to any of the OGC services that GeoServer supports, such as WFS, WMS, and WCS. These endpoints controls the settings of these services.
- name: "reload"
  description: Reset/Reload clears internal caches and reloads configuation from disk
- name: "resource"
  description: A resource is any item in the data directory that does not represent configuration. Typical resources include styles and icons.
- name: "security"
  description: The Security area shows access rules and other configuration for the security subsystem
- name: "settings"
  description: The Settings area shows global configuration for the server
- name: "structuredcoverages"
  description: A structured coverage store allows description of its "granules" and management of them.
- name: "styles"
  description: A style describes how a resource is symbolized or rendered by the Web Map Service.
- name: "templates"
  description: Manage templates used to configure output (for example GetFeatureInfo reponse). Templates can be registered for the entire server or workspace. You can also configure a template for use with a store, featureType or coverage.
- name: "transforms"
  description: A transform contains a style sheet that can be used to generate a new textual output format of user choosing for WFS
- name: "wmslayers"
  description: A WMS store is a store whose source is another WMS. Also known as "Cascading WMS" or "External WMS". A WMS store layer is a layer from this store.
- name: "wmsstores"
  description: A WMS store is a store whose source is another WMS. Also known as "Cascading WMS" or "Exernal WMS".
- name: "wmtslayers"
  description: A WMTS store is a store whose source is a remote WMTS service. Also known as "Cascading WMTS". A WMTS store layer is a layer from this store.
- name: "wmtsstores"
  description: A WMTS store is a store whose source is a remote WMTS. Also known as "Cascading WMTS".
- name: "workspaces"
  description: A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.
- name: "usergroup"
  description: Organisation of security users and groups
- name: "roles"
  description: Organisation of security roles
schemes:
  - http
  - https
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
security:
  - basicAuth: []











# ------------------------------
# PATHS
# ------------------------------
paths:

# Path manifests
  /about/manifest:
    get:
      tags:
      - "manifests"
      operationId: getManifest
      description: |
        This endpoint retrieves details on all loaded JARs. All the GeoServer manifest JARs are marked with the property GeoServerModule and classified by type, so you can use filtering capabilities to search for a set of manifests using regular expressions (see the manifest parameter) or a type category (see the key and value parameter).

        The available types are core, extension, or community. To filter modules by a particular type, append a request with key=GeoServerModule&value={type}

        Use the "Accept:" header to specify format or append an extension to the endpoint (example "/about/manifest.xml" for XML).

        The model is very simple and is shared between the version and the resource requests to parse both requests. You can customize the results adding a properties file called manifest.properties into the root of the data directory.
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: manifest
          type: string
          in: query
          description: |
            The manifest parameter is used to filter over resulting resource (manifest) names attribute using Java regular expressions.
          required: false
        - name: key
          type: string
          in: query
          description: |
            Only return manifest entries with this key in their properties. It can be optionally combined with the value parameter.
          required: false
        - name: value
          type: string
          in: query
          description: |
            Only return manifest entries that have this value for the provided key parameter.
          required: false
      responses:
        200:
          description: Returns the manifest
          schema:
            $ref: "#/definitions/Manifest"
          examples:
            application/json: |
              { "about": {
                  "resource": [
                    {
                      "@name": "postgresql-9.4.1211",
                      "Bundle-License": "http://www.postgresql.org/about/licence/",
                      "Specification-Version": 4.2,
                      "Bnd-LastModified": 1474207285788,
                      "Bundle-Name": "PostgreSQL JDBC Driver JDBC42",
                      "Bundle-Description": "Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database",
                      "Build-Jdk": "1.8.0_60",
                      "Specification-Vendor": "Oracle Corporation",
                      "Bundle-SymbolicName": "org.postgresql.jdbc42",
                      "Bundle-Copyright": "Copyright (c) 2003-2015, PostgreSQL Global Development Group",
                      "Built-By": "vladimirsitnikov",
                      "Main-Class": "org.postgresql.util.PGJDBCMain",
                      "Bundle-Activator": "org.postgresql.osgi.PGBundleActivator",
                      "Require-Capability": "osgi.ee;filter:=\"(&(|(osgi.ee=J2SE)(osgi.ee=JavaSE))(version>=1.8))\"",
                      "Tool": "Bnd-2.4.0.201411031534",
                      "Implementation-Title": "PostgreSQL JDBC Driver - JDBC 4.2",
                      "Implementation-Version": "9.4.1211",
                      "Manifest-Version": 1,
                      "Created-By": "Apache Maven Bundle Plugin",
                      "Implementation-Vendor-Id": "org.postgresql",
                      "Bundle-DocURL": "http://jdbc.postgresql.org/",
                      "Bundle-Vendor": "PostgreSQL Global Development Group",
                      "Implementation-Vendor": "PostgreSQL Global Development Group",
                      "Bundle-ManifestVersion": 2,
                      "Bundle-Version": "9.4.1211",
                      "Specification-Title": "JDBC"
                    },
                    {
                      "@name": "wicket-core-7.6.0",
                      "Archiver-Version": "Plexus Archiver",
                      "Bundle-License": "http://www.apache.org/licenses/LICENSE-2.0.txt",
                      "Specification-Version": "7.6.0",
                      "Bnd-LastModified": 1482777231886,
                      "Bundle-Name": "Wicket Core",
                      "DynamicImport-Package": "*",
                      "Bundle-Description": "Wicket is a Java web application framework that takes simplicity, \t\tseparation of concerns and ease of development to a whole new level. \t\tWicket pages can be mocked up, previewed and later revised using \t\tstandard WYSIWYG HTML design tools. Dynamic content processing and \t\tform handling is all handled in Java code using a first-class \t\tcomponent model backed by POJO data beans that can easily be \t\tpersisted using your favorite technology.",
                      "Build-Jdk": "1.8.0_111",
                      "Specification-Vendor": "Apache Software Foundation",
                      "Bundle-SymbolicName": "org.apache.wicket.core",
                      "Built-By": "andrea",
                      "Require-Capability": "osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.7))\"",
                      "Tool": "Bnd-2.3.0.201405100607",
                      "Implementation-Title": "Wicket Core",
                      "Implementation-Version": "7.6.0",
                      "Manifest-Version": 1,
                      "Created-By": "Apache Maven Bundle Plugin",
                      "Implementation-Vendor-Id": "org.apache.wicket",
                      "Bundle-DocURL": "http://apache.org",
                      "Bundle-Vendor": "Apache Software Foundation",
                      "Implementation-Vendor": "Apache Software Foundation",
                      "Bundle-ManifestVersion": 2,
                      "Bundle-Version": "7.6.0",
                      "Specification-Title": "Wicket Core"
                    }
                  ]
                }
              }
            application/xml: |
              <about>
                  <resource name="postgresql-9.4.1208">
                      <Bundle-License>http://www.postgresql.org/about/licence/</Bundle-License>
                      <Specification-Version>4.2</Specification-Version>
                      <Bnd-LastModified>1455913825221</Bnd-LastModified>
                      <Bundle-Name>PostgreSQL JDBC Driver JDBC42</Bundle-Name>
                      <Bundle-Description>Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database</Bundle-Description>
                      <Build-Jdk>1.8.0_66</Build-Jdk>
                      <Specification-Vendor>Oracle Corporation</Specification-Vendor>
                      <Bundle-SymbolicName>org.postgresql.jdbc42</Bundle-SymbolicName>
                      <Bundle-Copyright>Copyright (c) 2003-2015, PostgreSQL Global Development Group</Bundle-Copyright>
                      <Built-By>vladimirsitnikov</Built-By>
                      <Main-Class>org.postgresql.util.PGJDBCMain</Main-Class>
                      <Bundle-Activator>org.postgresql.osgi.PGBundleActivator</Bundle-Activator>
                      <Require-Capability>osgi.ee;filter:=&quot;(&amp;(|(osgi.ee=J2SE)(osgi.ee=JavaSE))(version&gt;=1.8))&quot;</Require-Capability>
                      <Tool>Bnd-2.3.0.201405100607</Tool>
                      <Implementation-Title>PostgreSQL JDBC Driver - JDBC 4.2</Implementation-Title>
                      <Implementation-Version>9.4.1208</Implementation-Version>
                      <Manifest-Version>1.0</Manifest-Version>
                      <Created-By>Apache Maven Bundle Plugin</Created-By>
                      <Implementation-Vendor-Id>org.postgresql</Implementation-Vendor-Id>
                      <Bundle-DocURL>http://jdbc.postgresql.org/</Bundle-DocURL>
                      <Bundle-Vendor>PostgreSQL Global Development Group</Bundle-Vendor>
                      <Implementation-Vendor>PostgreSQL Global Development Group</Implementation-Vendor>
                      <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
                      <Bundle-Version>9.4.1208</Bundle-Version>
                      <Specification-Title>JDBC</Specification-Title>
                  </resource>
                  <resource name="wicket-core-7.6.0">
                      <Archiver-Version>Plexus Archiver</Archiver-Version>
                      <Bundle-License>http://www.apache.org/licenses/LICENSE-2.0.txt</Bundle-License>
                      <Specification-Version>7.6.0</Specification-Version>
                      <Bnd-LastModified>1482777231886</Bnd-LastModified>
                      <Bundle-Name>Wicket Core</Bundle-Name>
                      <DynamicImport-Package>*</DynamicImport-Package>
                      <Bundle-Description>Wicket is a Java web application framework that takes simplicity,       separation of concerns and ease of development to a whole new level.        Wicket pages can be mocked up, previewed and later revised using        standard WYSIWYG HTML design tools. Dynamic content processing and      form handling is all handled in Java code using a first-class       component model backed by POJO data beans that can easily be        persisted using your favorite technology.</Bundle-Description>
                      <Build-Jdk>1.8.0_111</Build-Jdk>
                      <Specification-Vendor>Apache Software Foundation</Specification-Vendor>
                      <Bundle-SymbolicName>org.apache.wicket.core</Bundle-SymbolicName>
                      <Built-By>andrea</Built-By>
                      <Require-Capability>osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version=1.7))&quot;</Require-Capability>
                      <Tool>Bnd-2.3.0.201405100607</Tool>
                      <Implementation-Title>Wicket Core</Implementation-Title>
                      <Implementation-Version>7.6.0</Implementation-Version>
                      <Manifest-Version>1.0</Manifest-Version>
                      <Created-By>Apache Maven Bundle Plugin</Created-By>
                      <Implementation-Vendor-Id>org.apache.wicket</Implementation-Vendor-Id>
                      <Bundle-DocURL>http://apache.org</Bundle-DocURL>
                      <Bundle-Vendor>Apache Software Foundation</Bundle-Vendor>
                      <Implementation-Vendor>Apache Software Foundation</Implementation-Vendor>
                      <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
                      <Bundle-Version>7.6.0</Bundle-Version>
                      <Specification-Title>Wicket Core</Specification-Title>
                  </resource>
              </about>
  /about/version:
    get:
      tags:
      - "manifests"
      description: |
        'This endpoint shows only the details for the high-level components: GeoServer, GeoTools, and GeoWebCache.'

        Use the "Accept:" header to specify format or append an extension to the endpoint (example "/about/manifest.xml" for XML).'
      parameters:
        - name: manifest
          type: string
          in: query
          description: |
            The manifest parameter is used to filter over resulting resource (manifest) names attribute using Java regular expressions.
          required: false
        - name: key
          type: string
          in: query
          description: |
            Only return manifest entries with this key in their properties. It can be optionally combined with the value parameter.
          required: false
        - name: value
          type: string
          in: query
          description: |
            Only return manifest entries that have this value for the provided key parameter.
          required: false
      responses:
        200:
          description: Returns the manifest
          examples:
            application/xml: |
              <about>
                  <resource name="GeoTools">
                      <Build-Timestamp>28-Mar-2017 15:44</Build-Timestamp>
                      <Version>18-SNAPSHOT</Version>
                      <Git-Revision>a96cee38ad6c8e87cb8ccdf75e1fb837bff35ef0</Git-Revision>
                  </resource>
                  <resource name="GeoWebCache">
                      <Version>1.12-SNAPSHOT</Version>
                      <Git-Revision>e9cdf1ecfcd97afc804ba43e04b2e1dedd4b5990/e9cdf1ecfcd97afc804ba43e04b2e1dedd4b5990</Git-Revision>
                  </resource>
              </about>
            application/json: |
              { "about": {
                  "resource": [
                    {
                      "@name": "GeoTools",
                      "Build-Timestamp": "28-Mar-2017 15:44",
                      "Version": "18-SNAPSHOT",
                      "Git-Revision": "a96cee38ad6c8e87cb8ccdf75e1fb837bff35ef0"
                    },
                    {
                      "@name": "GeoWebCache",
                      "Version": "1.12-SNAPSHOT",
                      "Git-Revision": "e9cdf1ecfcd97afc804ba43e04b2e1dedd4b5990/e9cdf1ecfcd97afc804ba43e04b2e1dedd4b5990"
                    }
                  ]
                }
              }
  /about/status:
    get:
      tags:
      - "manifests"
      description: |
        This endpoint shows the status details of all installed and configured modules. Status details always include human readable name, and module name. Optional details include version, availability, status message, and links to documentation.

        Use the "Accept:" header to specify format or append an extension to the endpoint (example "/about/manifest.xml" for XML).
      parameters:
        - name: manifest
          type: string
          in: query
          description: |
            The manifest parameter is used to filter over resulting resource (manifest) names attribute using Java regular expressions.
          required: false
        - name: key
          type: string
          in: query
          description: |
            Only return manifest entries with this key in their properties. It can be optionally combined with the value parameter.
          required: false
        - name: value
          type: string
          in: query
          description: |
            Only return manifest entries that have this value for the provided key parameter.
          required: false
      responses:
        200:
          description: Successfully retrieved status details.
          schema:
            $ref: "#/definitions/Status"
          examples:
            application/json: |
              {"about": {
                  "status": [
                    {
                      "module": "gs-web-core",
                      "name": "GeoServer Web UI Core",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "gs-main",
                      "name": "GeoServer Main",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "jvm",
                      "name": "Rendering Engine",
                      "component": "java2d",
                      "version": "1.8.0_121",
                      "message": "Java 2D configured with DuctusRenderingEngine.\nProvider: OracleJDK\n",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "system-properties",
                      "name": "system-properties",
                      "component": "system-properties",
                      "message": "java.runtime.name=Java(TM) SE Runtime Environment\nsun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib\n",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "system-environment",
                      "name": "system-environment",
                      "component": "system-environment",
                      "message": "PATH=/usr/bin:/bin:/usr/sbin:/sbin\nSHELL=/usr/local/bin/bash\n",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "gs-web-wms",
                      "name": "GeoServer Web UI Web Map Service",
                      "isEnabled": true,
                      "isAvailable": true
                    },
                    {
                      "module": "gs-wms",
                      "name": "GeoServer Web Map Service",
                      "isEnabled": true,
                      "isAvailable": true
                    }
                  ]
                }
              }
            application/xml: |
              <about>
                <status>
                  <module>gs-web-core</module>
                  <name>GeoServer Web UI Core</name>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>gs-main</module>
                  <name>GeoServer Main</name>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>jvm</module>
                  <name>Rendering Engine</name>
                  <component>java2d</component>
                  <version>1.8.0_121</version>
                  <message>Java 2D configured with DuctusRenderingEngine.
                  Provider: OracleJDK
                  </message>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>system-properties</module>
                  <name>system-properties</name>
                  <component>system-properties</component>
                  <message>java.runtime.name=Java(TM) SE Runtime Environment
                  sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib
                  java.vm.version=25.121-b13
                  java.util.prefs.syncInterval=5000000
                  </message>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>system-environment</module>
                  <name>system-environment</name>
                  <component>system-environment</component>
                  <message>PATH=/usr/bin:/bin:/usr/sbin:/sbin
                  SHELL=/usr/local/bin/bash
                  </message>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>gs-web-wms</module>
                  <name>GeoServer Web UI Web Map Service</name>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
                <status>
                  <module>gs-wms</module>
                  <name>GeoServer Web Map Service</name>
                  <isEnabled>true</isEnabled>
                  <isAvailable>true</isAvailable>
                </status>
              </about>



# Path datastores
  /workspaces/{workspaceName}/datastores:
    parameters:
    - name: workspaceName
      in: path
      required: true
      type: string
      description: The name of the worskpace containing the data stores.
    get:
      tags:
      - "datastores"
      operationId: getDatastores
      summary: Get a list of data stores
      description: List all data stores in workspace ws. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/datastores.xml" for XML)
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/dataStoreResponse"
          examples:
            application/xml: |
              <dataStore>
                <name>sf</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.xml" type="application/xml"/>
              </dataStore>

            application/json: |
              {"dataStores":{"dataStore":[{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.json"}]}}

    post:
      tags:
      - "datastores"
      operationId: postDatastores
      summary: Create a new data store
      description: Adds a new data store to the workspace.

      parameters:
        - $ref: "#/parameters/dataStorePost"
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created data store can be found
              type: string

    put:
      tags:
      - "datastores"
      operationId: putdatastores
      description: Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "datastores"
      operationId: deletedatastores
      description: Invalid. Use /datastores/{datastore} instead.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspaceName}/datastores/{storeName}:
    parameters:
    - name: workspaceName
      in: path
      type: string
      required: true
      description: The name of the worskpace containing the data store.
    - name: storeName
      in: path
      required: true
      description: The name of the data store to retrieve.
      type: string
    get:
      tags:
      - "datastores"
      operationId: getDataStore
      summary: Retrieve a particular data store from a workspace
      description: Controls a particular data store in a given workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/datastores/{datastore}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          required: false
          description: The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
          type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/datastore"
          examples:
            application/xml: |
              <dataStore>
                <name>sf</name>
                <enabled>true</enabled>
                <workspace>
                  <name>sf</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf.xml" type="application/xml"/>
                </workspace>
                <connectionParameters>
                  <entry key="url">file:data/sf</entry>
                  <entry key="namespace">http://www.openplans.org/spearfish</entry>
                </connectionParameters>
                <__default>false</__default>
                <featureTypes>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.xml" type="application/xml"/>
                </featureTypes>
              </dataStore>

            application/json: |
              {"dataStore":{"name":"sf","enabled":true,"workspace":{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf.json"},"connectionParameters":{"entry":[{"@key":"url","$":"file:data/sf"},{"@key":"namespace","$":"http://www.openplans.org/spearfish"}]},"_default":false,"featureTypes":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.json"}}

    post:
      tags:
      - "datastores"
      operationId: postDatastore
      description: Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "datastores"
      operationId: putDatastore
      summary: Modify a data store.
      description: Modify data store ds. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/datastores/{ds}.xml" for XML).
      parameters:
        - $ref: "#/parameters/dataStorePut"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The data store was successfully updated.

    delete:
      tags:
      - "datastores"
      operationId: deleteDatastore
      summary: Delete data store
      description: Deletes a data store from the server.
      parameters:
        - name: recurse
          in: query
          required: false
          description: The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is "false".
          type: boolean
      responses:
        200:
          description: OK

  /workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}:
    parameters:
    - name: workspaceName
      in: path
      required: true
      description: The name of the worskpace containing the data store.
      type: string
    - name: storeName
      in: path
      required: true
      description: The name of the store to be retrieved
      type: string
    - name: method
      in: path
      required: true
      description: The upload method. Can be "url", "file", "external". Unused for GET
                   "file" uploads a file from a local source. The body of the request is the file itself.
                   "url" uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server.
                   "external" uses an existing file on the server. The body of the request is the absolute path to the existing file.
      type: string
    - name: format
      in: path
      required: true
      description: The type of source data store (e.g., "shp"). Unused for GET
      type: string
    get:
      tags:
      - "datastores"
      operationId: getDataStoreUpload
      description:  Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
      responses:
        200:
          description: OK

    post:
      tags:
      - "datastores"
      operationId: postDataStoreUpload
      description: Invalid, use PUT for uploads
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "datastores"
      operationId: putDataStoreUpload
      summary:  Uploads files to the data store, creating it if necessary
      description: Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
      parameters:
        - name: configure
          in: query
          required: false
          description: The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of "none" to avoid configuring coverages.
          type: string
        - name: target
          in: query
          required: false
          description: The type of target data store (e.g., "shp"). Same as format if not provided.
          type: string
        - name: update
          in: query
          required: false
          description: The update mode. If "overwrite", will overwrite existing data. Otherwise, will append to existing data.
          type: string
        - name: charset
          in: query
          required: false
          description: The character set of the data.
          type: string
        - name: filename
          in: query
          required: false
          description: The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
          type: string
      responses:
        200:
          description: The data store was successfully updated.

    delete:
      tags:
      - "datastores"
      operationId: deleteDataStoreUpload
      description: Invalid, only used for uploads
      responses:
        405:
          description: Method Not Allowed



# Path coverages
  /workspaces/{workspace}/coveragestores/{store}/coverages:
    parameters:
    - name: workspace
      in: path
      description: The name of the workspace
      required: true
      type: string
    - name: store
      in: path
      description: The name of the coverage data store
      required: true
      type: string
    get:
      tags:
      - "coverages"
      operationId: getWorkspaceCoverageStore
      description: |
        Get the coverages available for the provided workspace and data store.
      parameters:
        - name: list
          description: |
            If the list parameter value is equal to "all" all the coverages available in the data source (even the non published ones) will be returned.
          in: query
          required: false
          type: string
          enum:
          - all
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
            description: Successful response containing the list of coverages.
            schema:
              type: object
              properties:
                coverages:
                  type: object
                  properties:
                    coverage:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The Name
                          link:
                            type: string
                            description: The URL
            examples:
              application/json: |
                {
                  "coverages": {
                    "coverage": [
                      {
                        "name": "sfdem",
                        "href": "http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.json"
                      }
                    ]
                  }
                }
              text/xml: |
                <coverages>
                  <coverage>
                    <name>sfdem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.xml" type="application/atom+xml"/>
                  </coverage>
                </coverages>
    post:
      tags:
      - "coverages"
      operationId: postWorkspaceCoverageStore
      description: |
        Create a new coverage, the underlying data store must exists.
      parameters:
        - name: coverage
          in: body
          description: The body of the coverage to POST
          required: true
          schema:
            $ref: "#/definitions/CoverageInfo"
      responses:
        201:
          description: The coverage was successfully created.
          headers:
            Location:
              description: The location of the newly created coverage.
              type: string
    put:
      tags:
      - "coverages"
      operationId: putWorkspaceCoverageStore
      description: Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "coverages"
      operationId: deleteWorkspaceCoverageStore
      description: Invalid. Can only delete an individual coverage.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspace}/coverages:
    parameters:
    - name: workspace
      in: path
      description: The name of the workspace
      required: true
      type: string
    get:
      tags:
      - "coverages"
      operationId: getCoverages
      description: |
        Get the coverages available for the provided workspace.
      parameters:
        - name: list
          description: |
            If the list parameter value is equal to "all" all the coverages available in the data source (even the non published ones) will be returned.
          in: query
          required: false
          type: string
          enum:
          - all
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: Successful response containing the list of coverages.
          schema:
            type: object
            properties:
              coverages:
                type: object
                properties:
                    coverage:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The Name
                          link:
                            type: string
                            description: The URL
          examples:
            application/json: |
                {
                  "coverages": {
                    "coverage": [
                      {
                        "name": "sfdem",
                        "href": "http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.json"
                      }
                    ]
                  }
                }
            text/xml: |
                <coverages>
                  <coverage>
                    <name>sfdem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.xml" type="application/atom+xml"/>
                  </coverage>
                </coverages>
    post:
      tags:
      - "coverages"
      operationId: postCoverage
      description: |
        Create a new coverage, the coverage definition needs to reference a store.
      parameters:
        - name: coverage
          in: body
          description: The body of the coverage to POST
          required: true
          schema:
            $ref: "#/definitions/CoverageInfo"
      responses:
        201:
          description: The coverage was successfully created.
          headers:
            Location:
              description: The location of the newly created coverage.
              type: string
    put:
      tags:
      - "coverages"
      operationId: putCoverageStore405
      description: Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "coverages"
      operationId: deleteCoverageStore405
      description: Invalid. Can only delete an individual coverage.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspace}/coverages/{coverage}:
    parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: coverage
          in: path
          description: The name of the coverage
          required: true
          type: string
    get:
      tags:
      - "coverages"
      operationId: getCoverage
      description:  Get an individual coverage.
      produces:
          - application/json
          - application/xml
          - text/html
      parameters:
          - name: quietOnNotFound
            in: query
            description: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
            type: boolean
            required: false
            default: false
      responses:
          200:
            description: Succesful response containing coverage
            schema:
              type: object
              properties:
                featureType:
                  $ref: "#/definitions/CoverageInfo"
            examples:
              application/json: |
                {
                    "coverage": {
                        "abstract": "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information",
                        "defaultInterpolationMethod": "nearest neighbor",
                        "description": "Generated from sfdem",
                        "dimensions": {
                            "coverageDimension": [
                                {
                                    "description": "GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]",
                                    "name": "GRAY_INDEX",
                                    "range": {
                                        "max": -9.999999933815813e+36,
                                        "min": -9.999999933815813e+36
                                    }
                                }
                            ]
                        },
                        "enabled": true,
                        "grid": {
                            "@dimension": "2",
                            "crs": "EPSG:26713",
                            "range": {
                                "high": "634 477",
                                "low": "0 0"
                            },
                            "transform": {
                                "scaleX": 30,
                                "scaleY": -30,
                                "shearX": 0,
                                "shearY": 0,
                                "translateX": 589995,
                                "translateY": 4927995
                            }
                        },
                        "interpolationMethods": {
                            "string": [
                                "nearest neighbor",
                                "bilinear",
                                "bicubic"
                            ]
                        },
                        "keywords": {
                            "string": [
                                "WCS",
                                "sfdem",
                                "sfdem"
                            ]
                        },
                        "latLonBoundingBox": {
                            "crs": "EPSG:4326",
                            "maxx": -103.62940739432703,
                            "maxy": 44.5016011535299,
                            "minx": -103.87108701853181,
                            "miny": 44.370187074132616
                        },
                        "metadata": {
                            "entry": {
                                "$": "sfdem_sfdem",
                                "@key": "dirName"
                            }
                        },
                        "name": "sfdem",
                        "namespace": {
                            "href": "http://localhost:/geoserver/restng/namespaces/sf.json",
                            "name": "sf"
                        },
                        "nativeBoundingBox": {
                            "crs": {
                                "$": "EPSG:26713",
                                "@class": "projected"
                            },
                            "maxx": 609000,
                            "maxy": 4928010,
                            "minx": 589980,
                            "miny": 4913700
                        },
                        "nativeCRS": {
                            "$": "PROJCS[\"NAD27 / UTM zone 13N\", \n  GEOGCS[\"NAD27\", \n    DATUM[\"North American Datum 1927\", \n      SPHEROID[\"Clarke 1866\", 6378206.4, 294.9786982138982, AUTHORITY[\"EPSG\",\"7008\"]], \n      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], \n      AUTHORITY[\"EPSG\",\"6267\"]], \n    PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n    UNIT[\"degree\", 0.017453292519943295], \n    AXIS[\"Geodetic longitude\", EAST], \n    AXIS[\"Geodetic latitude\", NORTH], \n    AUTHORITY[\"EPSG\",\"4267\"]], \n  PROJECTION[\"Transverse_Mercator\"], \n  PARAMETER[\"central_meridian\", -105.0], \n  PARAMETER[\"latitude_of_origin\", 0.0], \n  PARAMETER[\"scale_factor\", 0.9996], \n  PARAMETER[\"false_easting\", 500000.0], \n  PARAMETER[\"false_northing\", 0.0], \n  UNIT[\"m\", 1.0], \n  AXIS[\"Easting\", EAST], \n  AXIS[\"Northing\", NORTH], \n  AUTHORITY[\"EPSG\",\"26713\"]]",
                            "@class": "projected"
                        },
                        "nativeFormat": "GeoTIFF",
                        "nativeName": "sfdem",
                        "requestSRS": {
                            "string": [
                                "EPSG:26713"
                            ]
                        },
                        "responseSRS": {
                            "string": [
                                "EPSG:26713"
                            ]
                        },
                        "srs": "EPSG:26713",
                        "store": {
                            "@class": "coverageStore",
                            "href": "http://localhost:/geoserver/restng/workspaces/sf/coveragestores/sfdem.json",
                            "name": "sf:sfdem"
                        },
                        "supportedFormats": {
                            "string": [
                                "ARCGRID",
                                "IMAGEMOSAIC",
                                "GTOPO30",
                                "GEOTIFF",
                                "GIF",
                                "PNG",
                                "JPEG",
                                "TIFF"
                            ]
                        },
                        "title": "Spearfish elevation"
                    }
                }

              application/xml: |
                <coverage>
                  <name>sfdem</name>
                  <nativeName>sfdem</nativeName>
                  <namespace>
                    <name>sf</name>
                    <atom:link href="http://localhost:8080/geoserver/restng/namespaces/sf.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                  </namespace>
                  <title>Spearfish elevation</title>
                  <description>Generated from sfdem</description>
                  <abstract>Digital elevation model for the Spearfish region.

                sfdem is a Tagged Image File Format with Geographic information</abstract>
                  <keywords>
                    <string>WCS</string>
                    <string>sfdem</string>
                    <string>sfdem</string>
                    <string>type\@language=fr\;\@vocabulary=test\;</string>
                  </keywords>
                  <nativeCRS class="projected">PROJCS[&quot;NAD27 / UTM zone 13N&quot;,
                  GEOGCS[&quot;NAD27&quot;,
                    DATUM[&quot;North American Datum 1927&quot;,
                      SPHEROID[&quot;Clarke 1866&quot;, 6378206.4, 294.9786982138982, AUTHORITY[&quot;EPSG&quot;,&quot;7008&quot;]],
                      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685],
                      AUTHORITY[&quot;EPSG&quot;,&quot;6267&quot;]],
                    PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],
                    UNIT[&quot;degree&quot;, 0.017453292519943295],
                    AXIS[&quot;Geodetic longitude&quot;, EAST],
                    AXIS[&quot;Geodetic latitude&quot;, NORTH],
                    AUTHORITY[&quot;EPSG&quot;,&quot;4267&quot;]],
                  PROJECTION[&quot;Transverse_Mercator&quot;, AUTHORITY[&quot;EPSG&quot;,&quot;9807&quot;]],
                  PARAMETER[&quot;central_meridian&quot;, -105.0],
                  PARAMETER[&quot;latitude_of_origin&quot;, 0.0],
                  PARAMETER[&quot;scale_factor&quot;, 0.9996],
                  PARAMETER[&quot;false_easting&quot;, 500000.0],
                  PARAMETER[&quot;false_northing&quot;, 0.0],
                  UNIT[&quot;m&quot;, 1.0],
                  AXIS[&quot;Easting&quot;, EAST],
                  AXIS[&quot;Northing&quot;, NORTH],
                  AUTHORITY[&quot;EPSG&quot;,&quot;26713&quot;]]</nativeCRS>
                  <srs>EPSG:26713</srs>
                  <nativeBoundingBox>
                    <minx>589980.0</minx>
                    <maxx>609000.0</maxx>
                    <miny>4913700.0</miny>
                    <maxy>4928010.0</maxy>
                    <crs class="projected">EPSG:26713</crs>
                  </nativeBoundingBox>
                  <latLonBoundingBox>
                    <minx>-103.87108701853181</minx>
                    <maxx>-103.62940739432703</maxx>
                    <miny>44.370187074132616</miny>
                    <maxy>44.5016011535299</maxy>
                    <crs>EPSG:4326</crs>
                  </latLonBoundingBox>
                  <enabled>true</enabled>
                  <metadata>
                    <entry key="elevation">
                      <dimensionInfo>
                        <enabled>false</enabled>
                      </dimensionInfo>
                    </entry>
                    <entry key="cacheAgeMax">10</entry>
                    <entry key="time">
                      <dimensionInfo>
                        <enabled>false</enabled>
                        <defaultValue/>
                      </dimensionInfo>
                    </entry>
                    <entry key="cachingEnabled">true</entry>
                    <entry key="dirName">sfdem_sfdem</entry>
                  </metadata>
                  <store class="coverageStore">
                    <name>sf:sfdem</name>
                    <atom:link href="http://localhost:8080/geoserver/restng/workspaces/sf/coveragestores/sfdem.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                  </store>
                  <nativeFormat>GeoTIFF</nativeFormat>
                  <grid dimension="2">
                    <range>
                      <low>0 0</low>
                      <high>634 477</high>
                    </range>
                    <transform>
                      <scaleX>30.0</scaleX>
                      <scaleY>-30.0</scaleY>
                      <shearX>0.0</shearX>
                      <shearY>0.0</shearY>
                      <translateX>589995.0</translateX>
                      <translateY>4927995.0</translateY>
                    </transform>
                    <crs>EPSG:26713</crs>
                  </grid>
                  <supportedFormats>
                    <string>ARCGRID</string>
                    <string>IMAGEMOSAIC</string>
                    <string>GTOPO30</string>
                    <string>GEOTIFF</string>
                    <string>GIF</string>
                    <string>PNG</string>
                    <string>JPEG</string>
                    <string>TIFF</string>
                  </supportedFormats>
                  <interpolationMethods>
                    <string>nearest neighbor</string>
                    <string>bilinear</string>
                    <string>bicubic</string>
                  </interpolationMethods>
                  <defaultInterpolationMethod>nearest neighbor</defaultInterpolationMethod>
                  <dimensions>
                    <coverageDimension>
                      <name>GRAY_INDEX</name>
                      <description>GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]</description>
                      <range>
                        <min>-9.999999933815813E36</min>
                        <max>-9.999999933815813E36</max>
                      </range>
                    </coverageDimension>
                  </dimensions>
                  <requestSRS>
                    <string>EPSG:26713</string>
                  </requestSRS>
                  <responseSRS>
                    <string>EPSG:26713</string>
                  </responseSRS>
                </coverage>

    post:
      tags:
      - "coverages"
      operationId: postCoverage405
      description: Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "coverages"
      operationId: putCoverage
      description: Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.
      responses:
          405:
            description: Method not allowed.
    delete:
      tags:
      - "coverages"
      operationId: deleteCoverage
      description: Invalid. Can only delete an individual coverage.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}:
    parameters:
      - name: workspace
        in: path
        description: The name of the workspace
        required: true
        type: string
      - name: store
        in: path
        description: The name of the coverage datastore
        required: true
        type: string
      - name: coverage
        in: path
        description: The name of the coverage
        required: true
        type: string
    get:
      tags:
      - "coverages"
      operationId: getWorkspaceCoverage
      description:  Get an individual coverage.
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
          type: boolean
          required: false
          default: false
      responses:
        200:
          description: Successful response containing coverage.
          schema:
            type: object
            properties:
              featureType:
                $ref: "#/definitions/CoverageInfo"
          examples:
            application/json: {
                              "coverage": {
                                  "abstract": "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information",
                                  "defaultInterpolationMethod": "nearest neighbor",
                                  "description": "Generated from sfdem",
                                  "dimensions": {
                                      "coverageDimension": [
                                          {
                                              "description": "GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]",
                                              "name": "GRAY_INDEX",
                                              "range": {
                                                  "max": -9.999999933815813e+36,
                                                  "min": -9.999999933815813e+36
                                              }
                                          }
                                      ]
                                  },
                                  "enabled": true,
                                  "grid": {
                                      "@dimension": "2",
                                      "crs": "EPSG:26713",
                                      "range": {
                                          "high": "634 477",
                                          "low": "0 0"
                                      },
                                      "transform": {
                                          "scaleX": 30,
                                          "scaleY": -30,
                                          "shearX": 0,
                                          "shearY": 0,
                                          "translateX": 589995,
                                          "translateY": 4927995
                                      }
                                  },
                                  "interpolationMethods": {
                                      "string": [
                                          "nearest neighbor",
                                          "bilinear",
                                          "bicubic"
                                      ]
                                  },
                                  "keywords": {
                                      "string": [
                                          "WCS",
                                          "sfdem",
                                          "sfdem"
                                      ]
                                  },
                                  "latLonBoundingBox": {
                                      "crs": "EPSG:4326",
                                      "maxx": -103.62940739432703,
                                      "maxy": 44.5016011535299,
                                      "minx": -103.87108701853181,
                                      "miny": 44.370187074132616
                                  },
                                  "metadata": {
                                      "entry": {
                                          "$": "sfdem_sfdem",
                                          "@key": "dirName"
                                      }
                                  },
                                  "name": "sfdem",
                                  "namespace": {
                                      "href": "http://localhost:/geoserver/restng/namespaces/sf.json",
                                      "name": "sf"
                                  },
                                  "nativeBoundingBox": {
                                      "crs": {
                                          "$": "EPSG:26713",
                                          "@class": "projected"
                                      },
                                      "maxx": 609000,
                                      "maxy": 4928010,
                                      "minx": 589980,
                                      "miny": 4913700
                                  },
                                  "nativeCRS": {
                                      "$": "PROJCS[\"NAD27 / UTM zone 13N\", \n  GEOGCS[\"NAD27\", \n    DATUM[\"North American Datum 1927\", \n      SPHEROID[\"Clarke 1866\", 6378206.4, 294.9786982138982, AUTHORITY[\"EPSG\",\"7008\"]], \n      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], \n      AUTHORITY[\"EPSG\",\"6267\"]], \n    PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n    UNIT[\"degree\", 0.017453292519943295], \n    AXIS[\"Geodetic longitude\", EAST], \n    AXIS[\"Geodetic latitude\", NORTH], \n    AUTHORITY[\"EPSG\",\"4267\"]], \n  PROJECTION[\"Transverse_Mercator\"], \n  PARAMETER[\"central_meridian\", -105.0], \n  PARAMETER[\"latitude_of_origin\", 0.0], \n  PARAMETER[\"scale_factor\", 0.9996], \n  PARAMETER[\"false_easting\", 500000.0], \n  PARAMETER[\"false_northing\", 0.0], \n  UNIT[\"m\", 1.0], \n  AXIS[\"Easting\", EAST], \n  AXIS[\"Northing\", NORTH], \n  AUTHORITY[\"EPSG\",\"26713\"]]",
                                      "@class": "projected"
                                  },
                                  "nativeFormat": "GeoTIFF",
                                  "nativeName": "sfdem",
                                  "requestSRS": {
                                      "string": [
                                          "EPSG:26713"
                                      ]
                                  },
                                  "responseSRS": {
                                      "string": [
                                          "EPSG:26713"
                                      ]
                                  },
                                  "srs": "EPSG:26713",
                                  "store": {
                                      "@class": "coverageStore",
                                      "href": "http://localhost:/geoserver/restng/workspaces/sf/coveragestores/sfdem.json",
                                      "name": "sf:sfdem"
                                  },
                                  "supportedFormats": {
                                      "string": [
                                          "ARCGRID",
                                          "IMAGEMOSAIC",
                                          "GTOPO30",
                                          "GEOTIFF",
                                          "GIF",
                                          "PNG",
                                          "JPEG",
                                          "TIFF"
                                      ]
                                  },
                                  "title": "Spearfish elevation"
                              }
                          }

            application/xml: |
              <coverage>
                <name>sfdem</name>
                <nativeName>sfdem</nativeName>
                <namespace>
                  <name>sf</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/namespaces/sf.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </namespace>
                <title>Spearfish elevation</title>
                <description>Generated from sfdem</description>
                <abstract>Digital elevation model for the Spearfish region.

              sfdem is a Tagged Image File Format with Geographic information</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>sfdem</string>
                  <string>sfdem</string>
                  <string>type\@language=fr\;\@vocabulary=test\;</string>
                </keywords>
                <nativeCRS class="projected">PROJCS[&quot;NAD27 / UTM zone 13N&quot;,
                GEOGCS[&quot;NAD27&quot;,
                  DATUM[&quot;North American Datum 1927&quot;,
                    SPHEROID[&quot;Clarke 1866&quot;, 6378206.4, 294.9786982138982, AUTHORITY[&quot;EPSG&quot;,&quot;7008&quot;]],
                    TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685],
                    AUTHORITY[&quot;EPSG&quot;,&quot;6267&quot;]],
                  PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],
                  UNIT[&quot;degree&quot;, 0.017453292519943295],
                  AXIS[&quot;Geodetic longitude&quot;, EAST],
                  AXIS[&quot;Geodetic latitude&quot;, NORTH],
                  AUTHORITY[&quot;EPSG&quot;,&quot;4267&quot;]],
                PROJECTION[&quot;Transverse_Mercator&quot;, AUTHORITY[&quot;EPSG&quot;,&quot;9807&quot;]],
                PARAMETER[&quot;central_meridian&quot;, -105.0],
                PARAMETER[&quot;latitude_of_origin&quot;, 0.0],
                PARAMETER[&quot;scale_factor&quot;, 0.9996],
                PARAMETER[&quot;false_easting&quot;, 500000.0],
                PARAMETER[&quot;false_northing&quot;, 0.0],
                UNIT[&quot;m&quot;, 1.0],
                AXIS[&quot;Easting&quot;, EAST],
                AXIS[&quot;Northing&quot;, NORTH],
                AUTHORITY[&quot;EPSG&quot;,&quot;26713&quot;]]</nativeCRS>
                <srs>EPSG:26713</srs>
                <nativeBoundingBox>
                  <minx>589980.0</minx>
                  <maxx>609000.0</maxx>
                  <miny>4913700.0</miny>
                  <maxy>4928010.0</maxy>
                  <crs class="projected">EPSG:26713</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-103.87108701853181</minx>
                  <maxx>-103.62940739432703</maxx>
                  <miny>44.370187074132616</miny>
                  <maxy>44.5016011535299</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <enabled>true</enabled>
                <metadata>
                  <entry key="elevation">
                    <dimensionInfo>
                      <enabled>false</enabled>
                    </dimensionInfo>
                  </entry>
                  <entry key="cacheAgeMax">10</entry>
                  <entry key="time">
                    <dimensionInfo>
                      <enabled>false</enabled>
                      <defaultValue/>
                    </dimensionInfo>
                  </entry>
                  <entry key="cachingEnabled">true</entry>
                  <entry key="dirName">sfdem_sfdem</entry>
                </metadata>
                <store class="coverageStore">
                  <name>sf:sfdem</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/workspaces/sf/coveragestores/sfdem.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </store>
                <nativeFormat>GeoTIFF</nativeFormat>
                <grid dimension="2">
                  <range>
                    <low>0 0</low>
                    <high>634 477</high>
                  </range>
                  <transform>
                    <scaleX>30.0</scaleX>
                    <scaleY>-30.0</scaleY>
                    <shearX>0.0</shearX>
                    <shearY>0.0</shearY>
                    <translateX>589995.0</translateX>
                    <translateY>4927995.0</translateY>
                  </transform>
                  <crs>EPSG:26713</crs>
                </grid>
                <supportedFormats>
                  <string>ARCGRID</string>
                  <string>IMAGEMOSAIC</string>
                  <string>GTOPO30</string>
                  <string>GEOTIFF</string>
                  <string>GIF</string>
                  <string>PNG</string>
                  <string>JPEG</string>
                  <string>TIFF</string>
                </supportedFormats>
                <interpolationMethods>
                  <string>nearest neighbor</string>
                  <string>bilinear</string>
                  <string>bicubic</string>
                </interpolationMethods>
                <defaultInterpolationMethod>nearest neighbor</defaultInterpolationMethod>
                <dimensions>
                  <coverageDimension>
                    <name>GRAY_INDEX</name>
                    <description>GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]</description>
                    <range>
                      <min>-9.999999933815813E36</min>
                      <max>-9.999999933815813E36</max>
                    </range>
                  </coverageDimension>
                </dimensions>
                <requestSRS>
                  <string>EPSG:26713</string>
                </requestSRS>
                <responseSRS>
                  <string>EPSG:26713</string>
                </responseSRS>
              </coverage>

    post:
      tags:
      - "coverages"
      operationId: postWorkspaceCoverage
      description: Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "coverages"
      operationId: putWorkspaceCoverage
      description: Update an individual coverage
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
      parameters:
        - name: coverage
          in: body
          description: The body of the coverage to PUT
          required: true
          schema:
            $ref: "#/definitions/CoverageInfo"
        - name: calculate
          in: query
          description: 'Comma-seperated list of optional fields to calculate. Optional fields include: "nativebbox", "latlonbbox".'
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
      responses:
        200:
          description: The coverage was successfully updated.
    delete:
      tags:
      - "coverages"
      operationId: deleteWorkspaceCoverage
      description: Delete a coverage (optionally recursively deleting layers).
      parameters:
        - name: recurse
          type: boolean
          in: query
          required: false
          description: The recurse controls recursive deletion. When set to true all stores containing the resource are also removed.
          default: false
      responses:
        200:
          description: Successfully deleted.



# Path coveragestores
  /workspaces/{workspace}/coveragestores:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
    get:
      tags:
      - "coveragestores"
      operationId: getCoverageStores
      summary: Get a list of all coverage stores in {workspace}
      description: Displays a list of all styles on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/coveragestores.xml" for XML). Defaults to HTML representation.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CoverageStoreList"
          examples:
            application/json: |
              {
                "coverageStores": {
                  "coverageStore": [
                    {
                      "name": "arcGridSample",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample.json"
                    },
                    {
                      "name": "worldImageSample",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/worldImageSample.json"
                    }
                  ]
                }
              }

            application/xml: |
              <coverageStores>
                <coverageStore>
                  <name>arcGridSample</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample.xml" type="application/atom+xml"/>
                </coverageStore>
                <coverageStore>
                  <name>worldImageSample</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/worldImageSample.xml" type="application/atom+xml"/>
                </coverageStore>
              </coverageStores>

        401:
          description: Unauthorized

    post:
      tags:
      - "coveragestores"
      operationId: postCoverageStores
      summary: Add a new coverage store
      description: Adds a new coverage store entry to the server.
      parameters:
        - $ref: "#/parameters/CoverageStorePost"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created store can be found
              type: string
        401:
          description: Unauthorized

    put:
      tags:
      - "coveragestores"
      operationId: putCoverageStores
      description: Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "coveragestores"
      operationId: deleteCoverageStores405
      description: Invalid. Use /coverage/{style} instead.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed
  /workspaces/{workspace}/coveragestores/{store}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
    get:
      tags:
      - "coveragestores"
      operationId: getCoverageStore
      summary: Get a coverage store named {store} in the {workspace} workspace
      description: Displays a representation of the coverage store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/{store}.xml" for XML). Defaults to HTML representation.
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          required: false
          description: When set to true, avoids to log an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
          type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CoverageStoreInfo"
          examples:
            application/json: |
              {
                "coverageStore": {
                  "name": "arcGridSample",
                  "description": "Sample ASCII GRID coverage of Global rainfall.",
                  "type": "ArcGrid",
                  "enabled": true,
                  "workspace": {
                    "name": "nurc",
                    "href": "http://localhost:8080/geoserver/restng/workspaces/nurc.json"
                  },
                  "_default": false,
                  "url": "file:coverages/arc_sample/precip30min.asc",
                  "coverages": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample/coverages.json"
                }
              }

            application/xml: |
              <coverageStore>
                <name>arcGridSample</name>
                <description>Sample ASCII GRID coverage of Global rainfall.</description>
                <type>ArcGrid</type>
                <enabled>true</enabled>
                <workspace>
                  <name>nurc</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc.xml" type="application/atom+xml"/>
                </workspace>
                <__default>false</__default>
                <url>file:coverages/arc_sample/precip30min.asc</url>
                <coverages>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample/coverages.xml" type="application/atom+xml"/>
                </coverages>
              </coverageStore>

        401:
          description: Unauthorized

    post:
      tags:
      - "coveragestores"
      operationId: postCoverageStore
      description: Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "coveragestores"
      operationId: putCoverageStore
      summary: Modify a single coverage store.
      description: Modifies a single coverage store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "{store}.xml" for XML).
      parameters:
        - $ref: "#/parameters/CoverageStorePut"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The coverage store was successfully updated.
        401:
          description: Unauthorized

    delete:
      tags:
      - "coveragestores"
      operationId: deleteCoverageStore
      summary: Delete coverage store
      description: Deletes a coverage store
      parameters:
        - name: purge
          in: query
          required: false
          description: The purge parameter specifies if and how the underlying raster data source is deleted.
                       Allowable values for this parameter are "none", "metadata", "all".
                       When set to "none" data and auxiliary files are preserved.
                       When set to "metadata" delete only auxiliary files and metadata. It’s recommended when data files (such as granules) should not be deleted from disk.
                       Finally, when set to "all" both data and auxiliary files are removed.
          type: string
        - name: recurse
          in: query
          required: false
          description: The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is "false".
          type: boolean
      responses:
        200:
          description: OK
        401:
          description: Unauthorized

  /workspaces/{workspace}/coveragestores/{store}/{method}.{format}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
      - name: method
        in: path
        required: true
        description: The upload method. Can be "url", "file", "external".
                     "file" uploads a file from a local source. The body of the request is the file itself.
                     "url" uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server.
                     "external" uses an existing file on the server. The body of the request is the absolute path to the existing file.
        type: string
      - name: format
        in: path
        required: true
        description: The type of target coverage store (e.g., "imagemosaic")
        type: string
    get:
      tags:
      - "coveragestores"
      operationId: getCoverageStoreUpload
      description: Invalid, only used for uploads
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    post:
      tags:
      - "coveragestores"
      operationId: postCoverageStoreUpload
      description: Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
      parameters:
        - name: filename
          in: query
          required: false
          description: The filename parameter specifies the target file name for a file that needs to harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method="file".
          type: string
      responses:
        200:
          description: The coverage store was successfully updated.
        401:
          description: Unauthorized

    put:
      tags:
      - "coveragestores"
      operationId: putCoverageStoreUpload
      summary: Creates or overwrites the files for a coverage store
      description: Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to "application/zip"
      parameters:
        - name: configure
          in: query
          required: false
          description: The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of "none" to avoid configuring coverages.
          type: string
        - name: USE_JAI_IMAGEREAD
          in: query
          required: false
          description: Whether to use deferred loading while configuring the coverage/layer.
          type: string
        - name: coverageName
          in: query
          required: false
          description: Name of the newly created coverage/layer.
          type: string
        - name: filename
          in: query
          required: false
          description: The filename parameter specifies the target file name for a file that needs to harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method="file".
          type: string
      responses:
        200:
          description: The coverage store was successfully updated.
        401:
          description: Unauthorized

    delete:
      tags:
      - "coveragestores"
      operationId: deleteCoverageStoreUpload
      description: Invalid, only used for uploads
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed



# Path featuretypes
  /workspaces/{workspaceName}/datastores/{storeName}/featuretypes:
    parameters:
      - name: workspaceName
        in: path
        description: The name of the workspace
        required: true
        type: string
      - name: storeName
        in: path
        description: The name of the datastore
        required: true
        type: string
    get:
      tags:
      - "featuretypes"
      operationId: getFeatureTypesInStore
      description: |
        Get a list of feature types for the workspace and datastore. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/featuretypes.xml" for XML)
      parameters:
        - name: list
          description: |
            The list parameter is used to control the category of feature types that are returned. Must be one of "configured", "available", "available_with_geom", "all"
          in: query
          required: false
          type: string
          enum:
          - configured
          - available
          - available_with_geom
          - all
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
            description: Successful response containing featuretype list.
            schema:
              type: object
              properties:
                featureTypes:
                  type: object
                  properties:
                    featureType:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The Name
                          link:
                            type: string
                            description: The URL
            examples:
              application/json: |
                {"featureTypes": {
                    "featureType": [
                      {
                        "name": "PrimitiveGeoFeature",
                        "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.json"
                      },
                      {
                        "name": "archsites",
                        "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.json"
                      }
                    ]
                  }
                }
              application/xml: |
                <featureTypes>
                    <featureType>
                        <name>PrimitiveGeoFeature</name>
                        <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.xml" type="application/atom+xml"/>
                    </featureType>
                    <featureType>
                        <name>archsites</name>
                        <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.xml" type="application/atom+xml"/>
                    </featureType>
                </featureTypes>
              application/xml (list=available): |
                <?xml version="1.0" encoding="UTF-8"?>
                <list>
                  <featureTypeName>pdsa</featureTypeName>
                  <featureTypeName>pdsb</featureTypeName>
                </list>
              application/json (list=available): |
                {"list": {
                 "string": [
                      "pdsa",
                      "pdsb"
                    ]
                  }
                }

    post:
      tags:
      - "featuretypes"
      operationId: postFeatureTypesInStore
      description: |
        Create a new feature type. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.
      parameters:
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: "#/definitions/FeatureTypeInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: The feature type was successfully created.
          headers:
            Location:
              description: The location of the newly created feature type.
              type: string
    put:
      tags:
      - "featuretypes"
      operationId: putFeatureTypesInStore
      description: Invalid. Use POST for adding a new feature type, or PUT on an individual feature type to edit that type.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "featuretypes"
      operationId: deleteFeatureTypesInStore
      description: Invalid.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspaceName}/featuretypes:
    parameters:
      - name: workspaceName
        in: path
        description: The name of the workspace
        required: true
        type: string
    get:
      tags:
      - "featuretypes"
      operationId: getFeatureTypes
      description: |
        Get a list of all feature types for all datastors in the workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/featuretypes.xml" for XML)
      parameters:
        - name: list
          description: |
            The list parameter is used to control the category of feature types that are returned. Must be one of "configured", "available", "available_with_geom", "all"
          in: query
          required: false
          type: string
          enum:
          - configured
          - available
          - available_with_geom
          - all
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
            description: Successful response containing featuretype list.
            schema:
              type: object
              properties:
                featureTypes:
                  type: object
                  properties:
                    featureType:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The Name
                          link:
                            type: string
                            description: The URL
            examples:
              application/json: |
                {"featureTypes": {
                    "featureType": [
                      {
                        "name": "PrimitiveGeoFeature",
                        "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.json"
                      },
                      {
                        "name": "archsites",
                        "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.json"
                      }
                    ]
                  }
                }
              application/xml: |
                <featureTypes>
                    <featureType>
                        <name>PrimitiveGeoFeature</name>
                        <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.xml" type="application/atom+xml"/>
                    </featureType>
                    <featureType>
                        <name>archsites</name>
                        <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.xml" type="application/atom+xml"/>
                    </featureType>
                </featureTypes>
              application/xml (list=available): |
                <?xml version="1.0" encoding="UTF-8"?>
                <list>
                  <featureTypeName>pdsa</featureTypeName>
                  <featureTypeName>pdsb</featureTypeName>
                </list>
              application/json (list=available): |
                {"list": {
                 "string": [
                      "pdsa",
                      "pdsb"
                    ]
                  }
                }

    post:
      tags:
      - "featuretypes"
      operationId: postFeatureTypes
      description: |
        Create a new feature type, the feature type definition needs to reference a store. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.
      parameters:
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: "#/definitions/FeatureTypeInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: The feature type was successfully created.
          headers:
            Location:
              description: The location of the newly created feature type.
              type: string
    put:
      tags:
      - "featuretypes"
      operationId: putFeatureTypes
      description: Invalid. Use POST for adding a new feature type, or PUT on an individual feature type to edit that type.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "featuretypes"
      operationId: deleteFeatureTypes
      description: Invalid.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}:
    parameters:
      - name: workspaceName
        in: path
        description: The name of the workspace
        required: true
        type: string
      - name: storeName
        in: path
        description: The name of the datastore
        required: true
        type: string
      - name: featureTypeName
        in: path
        description: The name of the feature type
        required: true
        type: string
    get:
      tags:
      - "featuretypes"
      operationId: getFeatureTypeInStore
      description:  Get an individual feature type
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to "false".
          type: boolean
          required: false
          default: false
      responses:
        200:
          description: Successful response containing feature type.
          schema:
            type: object
            properties:
              featureType:
                $ref: "#/definitions/FeatureTypeInfo"
          examples:
            application/json: |
              {  "name": "poi",
                  "nativeName": "poi",
                  "namespace": {
                    "name": "tiger",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/tiger.json"
                  },
                  "title": "Manhattan (NY) points of interest",
                  "abstract": "Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.",
                  "keywords": {
                    "string": [
                      "poi",
                      "Manhattan",
                      "DS_poi",
                      "points_of_interest",
                      "sampleKeyword\\@language=ab\\;",
                      "area of effect\\@language=bg\\;\\@vocabulary=technical\\;",
                      "Привет\\@language=ru\\;\\@vocabulary=friendly\\;"
                    ]
                  },
                  "metadataLinks": {
                    "metadataLink": [
                      {
                        "type": "text/plain",
                        "metadataType": "FGDC",
                        "content": "www.google.com"
                      }
                    ]
                  },
                  "dataLinks": {
                    "org.geoserver.catalog.impl.DataLinkInfoImpl": [
                      {
                        "type": "text/plain",
                        "content": "http://www.google.com"
                      }
                    ]
                  },
                  "nativeCRS": "GEOGCS[\"WGS 84\", \n  DATUM[\"World Geodetic System 1984\", \n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \n    AUTHORITY[\"EPSG\",\"6326\"]], \n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Geodetic longitude\", EAST], \n  AXIS[\"Geodetic latitude\", NORTH], \n  AUTHORITY[\"EPSG\",\"4326\"]]",
                  "srs": "EPSG:4326",
                  "nativeBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00153046439813,
                    "miny": 40.70754683896324,
                    "maxy": 40.719885123828675,
                    "crs": "EPSG:4326"
                  },
                  "latLonBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00857344353275,
                    "miny": 40.70754683896324,
                    "maxy": 40.711945649065406,
                    "crs": "EPSG:4326"
                  },
                  "projectionPolicy": "REPROJECT_TO_DECLARED",
                  "enabled": true,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "kml.regionateStrategy",
                        "$": "external-sorting"
                      },
                      {
                        "@key": "kml.regionateFeatureLimit",
                        "$": "15"
                      },
                      {
                        "@key": "cacheAgeMax",
                        "$": "3000"
                      },
                      {
                        "@key": "cachingEnabled",
                        "$": "true"
                      },
                      {
                        "@key": "kml.regionateAttribute",
                        "$": "NAME"
                      },
                      {
                        "@key": "indexingEnabled",
                        "$": "false"
                      },
                      {
                        "@key": "dirName",
                        "$": "DS_poi_poi"
                      }
                    ]
                  },
                  "store": {
                    "@class": "dataStore",
                    "name": "tiger:nyc",
                    "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json"
                  },
                  "cqlFilter": "INCLUDE",
                  "maxFeatures": 100,
                  "numDecimals": 6,
                  "responseSRS": {
                    "string": [
                      4326
                    ]
                  },
                  "overridingServiceSRS": true,
                  "skipNumberMatched": true,
                  "circularArcPresent": true,
                  "linearizationTolerance": 10,
                  "attributes": {
                    "attribute": [
                      {
                        "name": "the_geom",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "com.vividsolutions.jts.geom.Point"
                      },
                      {
                        "name": "NAME",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 6
                      },
                      {
                        "name": "THUMBNAIL",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 20
                      },
                      {
                        "name": "MAINPAGE",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 19
                      }
                    ]
                  }
              }
            application/xml: |
              <featureType>
                    <name>poi</name>
                    <nativeName>poi</nativeName>
                    <namespace>
                            <name>tiger</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/tiger.xml" type="application/xml"/>
                    </namespace>
                    <title>Manhattan (NY) points of interest</title>
                    <abstract>Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.</abstract>
                    <keywords>
                            <string>poi</string>
                            <string>Manhattan</string>
                            <string>DS_poi</string>
                            <string>points_of_interest</string>
                            <string>fred\@language=ab\;</string>
                            <string>area of effect\@language=bg\;\@vocabulary=Technical\;</string>
                            <string>Привет\@language=ru\;\@vocabulary=Friendly\;</string>
                    </keywords>
                    <metadataLinks>
                            <metadataLink>
                                  <type>text/plain</type>
                                  <metadataType>FGDC</metadataType>
                                  <content>http://www.google.com</content>
                            </metadataLink>
                    </metadataLinks>
                    <dataLinks>
                            <org.geoserver.catalog.impl.DataLinkInfoImpl>
                                  <type>text/plain</type>
                                  <content>http://www.google.com</content>
                            </org.geoserver.catalog.impl.DataLinkInfoImpl>
                    </dataLinks>
                    <nativeCRS>GEOGCS["WGS 84", DATUM["World Geodetic System 1984", SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], UNIT["degree", 0.017453292519943295], AXIS["Geodetic longitude", EAST], AXIS["Geodetic latitude", NORTH], AUTHORITY["EPSG","4326"]]</nativeCRS>
                    <srs>EPSG:4326</srs>
                    <nativeBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00153046439813</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.719885123828675</maxy>
                            <crs>EPSG:4326</crs>
                    </nativeBoundingBox>
                    <latLonBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00857344353275</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.711945649065406</maxy>
                            <crs>EPSG:4326</crs>
                    </latLonBoundingBox>
                    <projectionPolicy>NONE</projectionPolicy>
                    <enabled>true</enabled>
                    <metadata>
                            <entry key="kml.regionateStrategy">external-sorting</entry>
                            <entry key="elevation">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                  </dimensionInfo>
                            </entry>
                            <entry key="kml.regionateFeatureLimit">15</entry>
                            <entry key="cacheAgeMax">3000</entry>
                            <entry key="time">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                          <defaultValue/>
                                  </dimensionInfo>
                            </entry>
                            <entry key="cachingEnabled">true</entry>
                            <entry key="kml.regionateAttribute">NAME</entry>
                            <entry key="indexingEnabled">false</entry>
                            <entry key="dirName">DS_poi_poi</entry>
                    </metadata>
                    <store class="dataStore">
                            <name>tiger:nyc</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.xml" type="application/xml"/>
                    </store>
                    <cqlFilter>INCLUDE</cqlFilter>
                    <maxFeatures>100</maxFeatures>
                    <numDecimals>6</numDecimals>
                    <responseSRS>
                            <string>4326</string>
                    </responseSRS>
                    <overridingServiceSRS>true</overridingServiceSRS>
                    <skipNumberMatched>true</skipNumberMatched>
                    <circularArcPresent>true</circularArcPresent>
                    <linearizationTolerance>10</linearizationTolerance>
                    <attributes>
                            <attribute>
                                  <name>the_geom</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>com.vividsolutions.jts.geom.Point</binding>
                            </attribute>
                            <attribute>
                                  <name>NAME</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>6</length>
                            </attribute>
                            <attribute>
                                  <name>THUMBNAIL</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>20</length>
                            </attribute>
                            <attribute>
                                  <name>MAINPAGE</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>19</length>
                            </attribute>
                    </attributes>
              </featureType>

    post:
      tags:
      - "featuretypes"
      operationId: postFeatureTypeInStore
      description: Invalid. Use POST on the /featuretypes endpoint to add a new feature type, or PUT on an individual feature type to edit that type.
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "featuretypes"
      operationId: putFeatureTypeInStore
      description: Update an individual feature type
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
      parameters:
        - name: recalculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: "#/definitions/FeatureTypeInfo"
      responses:
        200:
          description: The feature type was successfully updated.
    delete:
      tags:
      - "featuretypes"
      operationId: deleteFeatureTypeInStore
      description: Delete a feature type (optionally recursively deleting layers).
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: The feature type was successfully deleted.

  /workspaces/{workspaceName}/featuretypes/{featureTypeName}:
    parameters:
      - name: workspaceName
        in: path
        description: The name of the workspace
        required: true
        type: string
      - name: featureTypeName
        in: path
        description: The name of the feature type
        required: true
        type: string
    get:
      tags:
      - "featuretypes"
      operationId: getFeatureType
      description:  Get an individual feature type in the default data store for the workspace
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to "false".
          type: boolean
          required: false
          default: false
      responses:
        200:
          description: Successful response containing feature type.
          schema:
            type: object
            properties:
              featureType:
                $ref: "#/definitions/FeatureTypeInfo"
          examples:
            application/json: |
              {  "name": "poi",
                  "nativeName": "poi",
                  "namespace": {
                    "name": "tiger",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/tiger.json"
                  },
                  "title": "Manhattan (NY) points of interest",
                  "abstract": "Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.",
                  "keywords": {
                    "string": [
                      "poi",
                      "Manhattan",
                      "DS_poi",
                      "points_of_interest",
                      "sampleKeyword\\@language=ab\\;",
                      "area of effect\\@language=bg\\;\\@vocabulary=technical\\;",
                      "Привет\\@language=ru\\;\\@vocabulary=friendly\\;"
                    ]
                  },
                  "metadataLinks": {
                    "metadataLink": [
                      {
                        "type": "text/plain",
                        "metadataType": "FGDC",
                        "content": "www.google.com"
                      }
                    ]
                  },
                  "dataLinks": {
                    "org.geoserver.catalog.impl.DataLinkInfoImpl": [
                      {
                        "type": "text/plain",
                        "content": "http://www.google.com"
                      }
                    ]
                  },
                  "nativeCRS": "GEOGCS[\"WGS 84\", \n  DATUM[\"World Geodetic System 1984\", \n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \n    AUTHORITY[\"EPSG\",\"6326\"]], \n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Geodetic longitude\", EAST], \n  AXIS[\"Geodetic latitude\", NORTH], \n  AUTHORITY[\"EPSG\",\"4326\"]]",
                  "srs": "EPSG:4326",
                  "nativeBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00153046439813,
                    "miny": 40.70754683896324,
                    "maxy": 40.719885123828675,
                    "crs": "EPSG:4326"
                  },
                  "latLonBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00857344353275,
                    "miny": 40.70754683896324,
                    "maxy": 40.711945649065406,
                    "crs": "EPSG:4326"
                  },
                  "projectionPolicy": "REPROJECT_TO_DECLARED",
                  "enabled": true,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "kml.regionateStrategy",
                        "$": "external-sorting"
                      },
                      {
                        "@key": "kml.regionateFeatureLimit",
                        "$": "15"
                      },
                      {
                        "@key": "cacheAgeMax",
                        "$": "3000"
                      },
                      {
                        "@key": "cachingEnabled",
                        "$": "true"
                      },
                      {
                        "@key": "kml.regionateAttribute",
                        "$": "NAME"
                      },
                      {
                        "@key": "indexingEnabled",
                        "$": "false"
                      },
                      {
                        "@key": "dirName",
                        "$": "DS_poi_poi"
                      }
                    ]
                  },
                  "store": {
                    "@class": "dataStore",
                    "name": "tiger:nyc",
                    "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json"
                  },
                  "cqlFilter": "INCLUDE",
                  "maxFeatures": 100,
                  "numDecimals": 6,
                  "responseSRS": {
                    "string": [
                      4326
                    ]
                  },
                  "overridingServiceSRS": true,
                  "skipNumberMatched": true,
                  "circularArcPresent": true,
                  "linearizationTolerance": 10,
                  "attributes": {
                    "attribute": [
                      {
                        "name": "the_geom",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "com.vividsolutions.jts.geom.Point"
                      },
                      {
                        "name": "NAME",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 6
                      },
                      {
                        "name": "THUMBNAIL",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 20
                      },
                      {
                        "name": "MAINPAGE",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 19
                      }
                    ]
                  }
              }
            application/xml: |
              <featureType>
                    <name>poi</name>
                    <nativeName>poi</nativeName>
                    <namespace>
                            <name>tiger</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/tiger.xml" type="application/xml"/>
                    </namespace>
                    <title>Manhattan (NY) points of interest</title>
                    <abstract>Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.</abstract>
                    <keywords>
                            <string>poi</string>
                            <string>Manhattan</string>
                            <string>DS_poi</string>
                            <string>points_of_interest</string>
                            <string>fred\@language=ab\;</string>
                            <string>area of effect\@language=bg\;\@vocabulary=Technical\;</string>
                            <string>Привет\@language=ru\;\@vocabulary=Friendly\;</string>
                    </keywords>
                    <metadataLinks>
                            <metadataLink>
                                  <type>text/plain</type>
                                  <metadataType>FGDC</metadataType>
                                  <content>http://www.google.com</content>
                            </metadataLink>
                    </metadataLinks>
                    <dataLinks>
                            <org.geoserver.catalog.impl.DataLinkInfoImpl>
                                  <type>text/plain</type>
                                  <content>http://www.google.com</content>
                            </org.geoserver.catalog.impl.DataLinkInfoImpl>
                    </dataLinks>
                    <nativeCRS>GEOGCS["WGS 84", DATUM["World Geodetic System 1984", SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], UNIT["degree", 0.017453292519943295], AXIS["Geodetic longitude", EAST], AXIS["Geodetic latitude", NORTH], AUTHORITY["EPSG","4326"]]</nativeCRS>
                    <srs>EPSG:4326</srs>
                    <nativeBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00153046439813</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.719885123828675</maxy>
                            <crs>EPSG:4326</crs>
                    </nativeBoundingBox>
                    <latLonBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00857344353275</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.711945649065406</maxy>
                            <crs>EPSG:4326</crs>
                    </latLonBoundingBox>
                    <projectionPolicy>NONE</projectionPolicy>
                    <enabled>true</enabled>
                    <metadata>
                            <entry key="kml.regionateStrategy">external-sorting</entry>
                            <entry key="elevation">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                  </dimensionInfo>
                            </entry>
                            <entry key="kml.regionateFeatureLimit">15</entry>
                            <entry key="cacheAgeMax">3000</entry>
                            <entry key="time">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                          <defaultValue/>
                                  </dimensionInfo>
                            </entry>
                            <entry key="cachingEnabled">true</entry>
                            <entry key="kml.regionateAttribute">NAME</entry>
                            <entry key="indexingEnabled">false</entry>
                            <entry key="dirName">DS_poi_poi</entry>
                    </metadata>
                    <store class="dataStore">
                            <name>tiger:nyc</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.xml" type="application/xml"/>
                    </store>
                    <cqlFilter>INCLUDE</cqlFilter>
                    <maxFeatures>100</maxFeatures>
                    <numDecimals>6</numDecimals>
                    <responseSRS>
                            <string>4326</string>
                    </responseSRS>
                    <overridingServiceSRS>true</overridingServiceSRS>
                    <skipNumberMatched>true</skipNumberMatched>
                    <circularArcPresent>true</circularArcPresent>
                    <linearizationTolerance>10</linearizationTolerance>
                    <attributes>
                            <attribute>
                                  <name>the_geom</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>com.vividsolutions.jts.geom.Point</binding>
                            </attribute>
                            <attribute>
                                  <name>NAME</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>6</length>
                            </attribute>
                            <attribute>
                                  <name>THUMBNAIL</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>20</length>
                            </attribute>
                            <attribute>
                                  <name>MAINPAGE</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>19</length>
                            </attribute>
                    </attributes>
              </featureType>

    post:
      tags:
      - "featuretypes"
      operationId: postFeatureType
      description: Invalid. Use POST on the /featuretypes endpoint to add a new feature type, or PUT on an individual feature type to edit that type.
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "featuretypes"
      operationId: putFeatureType
      description: Update an individual feature type in the default data store for the workspace
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
      parameters:
        - name: recalculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: "#/definitions/FeatureTypeInfo"
      responses:
        200:
          description: The feature type was successfully updated.
    delete:
      tags:
      - "featuretypes"
      operationId: deleteFeatureType
      description: Delete a feature type in the default data store for the workspace (optionally recursively deleting layers).
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: The feature type was successfully deleted.


# Path fonts
  /fonts:
    get:
      tags:
      - "fonts"
      operationId: getFonts
      summary: Get a list of fonts
      description: Displays a list of all fonts on the server. You must use the "Accept:" header to specify format or append an extension to the endpoint (example "/fonts.xml" for XML)
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/FontList"
          examples:
            application/json: |
              {"fonts":["Calibri Light Italic","Microsoft PhagsPa Bold","Lucida Sans Typewriter Oblique","ChaparralPro-Regular","Californian FB Italic"]}

            application/xml: |
              <root>
                <fonts>
                  <entry>Calibri Light Italic</entry>
                  <entry>Microsoft PhagsPa Bold</entry>
                  <entry>Lucida Sans Typewriter Oblique</entry>
                  <entry>ChaparralPro-Regular</entry>
                  <entry>Californian FB Italic</entry>
                </fonts>
              </root>

        401:
          description: Unauthorized

    post:
      tags:
      - "fonts"
      operationId: postFonts
      description: Invalid. Fonts cannot be added through the REST API.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "fonts"
      operationId: putFonts
      description: Invalid. Fonts cannot be updated through the REST API.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "fonts"
      operationId: deleteFonts
      description: Invalid. Fonts cannot be deleted through the REST API.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed


# Path layers
  /layers:
    get:
      tags:
      - "layers"
      operationId: layersGet
      summary: Get a list of layers
      description: Displays a list of all layers on the server. You must use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers.xml" for XML)
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layers"
          examples:
            application/xml: |
              <layers>
                 <layer>
                   <name>tiger:giant_polygon</name>
                   <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                     href="http://localhost:8080/geoserver/rest/layers/tiger%3Agiant_polygon.xml"
                     type="application/xml"/>
                 </layer>
                 <layer>
                   <name>sf:bugsites</name>
                   <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                     href="http://localhost:8080/geoserver/rest/layers/sf%3Abugsites.xml"
                     type="application/xml"/>
                 </layer>
               </layers>

            application/json: |
               {
                 "layers": {
                   "layer": [
                     {
                       "name": "tiger:giant_polygon",
                       "href": "http:\/\/localhost:8080\/geoserver\/rest\/layers\/tiger%3Agiant_polygon.json"
                     },
                     {
                       "name": "sf:bugsites",
                       "href": "http:\/\/localhost:8080\/geoserver\/rest\/layers\/sf%3Abugsites.json"
                     },
                   ]
                 }
               }
    post:
      tags:
      - "layers"
      operationId: layersPost
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "layers"
      operationId: layersPut
      description: Invalid. To edit a layer, use PUT on an individual layer instead.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "layers"
      operationId: layersDelete
      description: Invalid.
      responses:
        405:
          description: Method not allowed.

  /layers/{layerName}:
    parameters:
      - name: layerName
        in: path
        required: true
        description: The name of the layer to retrieve.
        type: string
    get:
      tags:
      - "layers"
      operationId: layersNameGet
      summary: Retrieve a layer
      description: Retrieves a single layer definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layer"
          examples:
            application/xml: |
              <layer>
                <name>poi</name>
                <path>/</path>
                <type>VECTOR</type>
                <defaultStyle>
                  <name>poi</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/poi.xml" type="application/xml"/>
                </defaultStyle>
                <styles class="linked-hash-set">
                  <style>
                    <name>burg</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/burg.xml" type="application/xml"/>
                  </style>
                  <style>
                    <name>point</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/point.xml" type="application/xml"/>
                  </style>
                </styles>
                <resource class="featureType">
                  <name>poi</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.xml" type="application/xml"/>
                </resource>
                <attribution>
                  <logoWidth>0</logoWidth>
                  <logoHeight>0</logoHeight>
                </attribution>
              </layer>

            application/json: |
              {

                  "layer": {
                      "name": "poi",
                      "path": "/",
                      "type": "VECTOR",
                      "defaultStyle": {
                          "name": "poi",
                          "href": "http://localhost:8080/geoserver/rest/styles/poi.json"
                      },
                      "styles": {
                          "@class": "linked-hash-set",
                          "style": [
                              {
                                  "name": "burg",
                                  "href": "http://localhost:8080/geoserver/rest/styles/burg.json"
                              },
                              {
                                  "name": "point",
                                  "href": "http://localhost:8080/geoserver/rest/styles/point.json"
                              }
                          ]
                      },
                      "resource": {
                          "@class": "featureType",
                          "name": "poi",
                          "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.json"
                      },
                      "attribution": {
                          "logoWidth": 0,
                          "logoHeight": 0
                      }
                  }

              }
    post:
      tags:
      - "layers"
      operationId: layersNamePost
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "layers"
      operationId: layersNamePut
      summary: Modify a layer.
      description: Modifies an existing layer on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      parameters:
        - name: layerBody
          in: body
          description: The updated layer definition.
          required: true
          schema:
            $ref: "#/definitions/Layer"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The layer was successfully updated.

    delete:
      tags:
      - "layers"
      operationId: layersNameDelete
      summary: Delete layer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK

  /workspaces/{workspaceName}/layers:
    parameters:
      - name: workspaceName
        in: path
        required: true
        description: The name of the workspace to list layers in
        type: string
    get:
      tags:
      - "layers"
      operationId: layersWorkspaceGet
      summary: Get a list of layers in a workspace.
      description: Displays a list of all layers in the provided workspace. You must use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers.xml" for XML)
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layers"
          examples:
            application/xml: |
               <layers>
                 <layer>
                   <name>bugsites</name>
                   <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                     href="http://localhost:8080/geoserver/rest/workspaces/sf/layers/bugsites.xml"
                     type="application/xml"/>
                 </layer>
               </layers>

            application/json: |
               {
                 "layers": {
                   "layer": [
                     {
                       "name": "bugsites",
                       "href": "http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/sf\/layers\/bugsites.json"
                     },
                   ]
                 }
               }
    post:
      tags:
      - "layers"
      operationId: layersWorkspacePost
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "layers"
      operationId: layersWorkspacePut
      description: Invalid. To edit a layer, use PUT on an individual layer instead.
      responses:
        405:
          description: Method not allowed.
    delete:
      tags:
      - "layers"
      operationId: layersWorkspaceDelete
      description: Invalid.
      responses:
        405:
          description: Method not allowed.

  /workspaces/{workspaceName}/layers/{layerName}:
    parameters:
    - name: workspaceName
      in: path
      required: true
      description: The name of the workspace the layer is in.
      type: string
    - name: layerName
      in: path
      required: true
      description: The name of the layer to retrieve.
      type: string
    get:
      tags:
      - "layers"
      operationId: layersNameWorkspaceGet
      summary: Retrieve a layer
      description: Retrieves a single layer definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layer"
          examples:
            application/xml: |
              <layer>
                <name>poi</name>
                <path>/</path>
                <type>VECTOR</type>
                <defaultStyle>
                  <name>poi</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/poi.xml" type="application/xml"/>
                </defaultStyle>
                <styles class="linked-hash-set">
                  <style>
                    <name>burg</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/burg.xml" type="application/xml"/>
                  </style>
                  <style>
                    <name>point</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/point.xml" type="application/xml"/>
                  </style>
                </styles>
                <resource class="featureType">
                  <name>poi</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.xml" type="application/xml"/>
                </resource>
                <attribution>
                  <logoWidth>0</logoWidth>
                  <logoHeight>0</logoHeight>
                </attribution>
              </layer>

            application/json: |
              {

                  "layer": {
                      "name": "poi",
                      "path": "/",
                      "type": "VECTOR",
                      "defaultStyle": {
                          "name": "poi",
                          "href": "http://localhost:8080/geoserver/rest/styles/poi.json"
                      },
                      "styles": {
                          "@class": "linked-hash-set",
                          "style": [
                              {
                                  "name": "burg",
                                  "href": "http://localhost:8080/geoserver/rest/styles/burg.json"
                              },
                              {
                                  "name": "point",
                                  "href": "http://localhost:8080/geoserver/rest/styles/point.json"
                              }
                          ]
                      },
                      "resource": {
                          "@class": "featureType",
                          "name": "poi",
                          "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.json"
                      },
                      "attribution": {
                          "logoWidth": 0,
                          "logoHeight": 0
                      }
                  }

              }
    post:
      tags:
      - "layers"
      operationId: layersNameWorkspacePost
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "layers"
      operationId: layersNameWorkspacePut
      summary: Modify a layer.
      description: Modifies an existing layer on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      parameters:
        - name: layerBody
          in: body
          description: The updated layer definition.
          required: true
          schema:
            $ref: "#/definitions/Layer"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The layer was successfully updated.

    delete:
      tags:
      - "layers"
      operationId: layersNameWorkspaceDelete
      summary: Delete layer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK


# Path monitoring
  /monitor/requests:
    get:
      tags:
      - "monitoring"
      operationId: getMonitorRequests
      summary: Get a list of requests
      description: |
                   Returns a list of all requests known to the monitoring system.
                   If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields.
                   The HTML format return a summary of the requests, and links to the single request to gather details.
                   Use the "Accept:" header to specify format or append an extension to the endpoint (example "/requests.xls" for Excel).
      produces:
        - application/csv
        - application/zip
        - application/vnd.ms-excel
        - text/html
      parameters:
        - name: from
          in: query
          required: false
          description: |
                       Specifies an inclusive lower bound on the timestamp for the start of a request.
                       The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, "2010-07-23", "2010-07-23T16:16:44")
          type: string
        - name: to
          in: query
          required: false
          description: |
                       Specifies an inclusive lower bound on the timestamp for the start of a request.
                       The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, "2010-07-23", "2010-07-23T16:16:44")
          type: string
        - name: filter
          in: query
          required: false
          description: |
                       Specifies generic filter against the available fields, in the form "attributeName:OP:value" where OP can be:
                       - EQ: equals
                       - NEQ: not equals
                       - LT: less than
                       - LTE: less than or equals
                       - GT: greater than
                       - GTE: greater than or equals
                       - IN: in list ("value" must be a comma separated list of values
          type: string
        - name: order
          in: query
          required: false
          description: |
                       Specifies which request attribute to sort by, and optionally specifies the sort direction.
                       The syntax is "attribute[;ASC|DESC]", where the sorting direction is optional
          type: string
        - name: offset
          in: query
          required: false
          description: Specifies where in the result set records should be returned from
          type: integer
        - name: count
          in: query
          required: false
          description: Specifies how many records should be returned.
          type: integer
        - name: live
          in: query
          required: false
          description: |
                       Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests.
                       If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status.
          type: boolean
        - name: fields
          in: query
          required: false
          description: Comma separated list of fields to be returned
          type: string

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RequestList"
          examples:
            application/csv: |
              id,path,startTime
              2,/tiger/wms,2017-04-01T11:26:06.011
              3,/tiger/wms,2017-04-01T11:26:06.603
              4,/tiger/wms,2017-04-01T11:26:07.369
              5,/rest/monitor/requests.csv,2017-04-01T11:26:37.919
    post:
      tags:
      - "monitoring"
      operationId: postMonitorRequests
      description: Invalid. This resource cannot be modified.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "monitoring"
      operationId: putMonitorRequests
      description: Invalid. This resource cannot be modified.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "monitoring"
      operationId: deleteMonitorRequests
      description: Clears all reqests
      responses:
        200:
          description: OK

  /monitor/requests/{request}:
    parameters:
      - name: request
        in: path
        required: true
        description: The request identifier
        type: string
    get:
      tags:
      - "monitoring"
      operationId: getMonitorRequest
      summary: Get a list of requests
      description: |
                   Returns a specific request, by identifier
                   The HTML format returns all details of the request.
                   Use the "Accept:" header to specify format or append an extension to the endpoint (example "/request/1.xls" for Excel).
      produces:
        - application/csv
        - application/zip
        - application/vnd.ms-excel
        - text/html
      parameters:
        - name: fields
          in: query
          required: false
          description: Comma separated list of fields to be returned
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Request"
          examples:
            application/csv: |
              Bbox,BodyAsString,BodyContentLength,BodyContentType,Category,EndTime,ErrorMessage,Host,HttpMethod,HttpReferer,Id,InternalHost,Operation,OwsVersion,Path,QueryString,RemoteAddr,RemoteCity,RemoteCountry,RemoteHost,RemoteLat,RemoteLon,RemoteUser,RemoteUserAgent,Resources,ResourcesList,ResponseContentType,ResponseLength,ResponseStatus,Service,StartTime,Status,SubOperation,TotalTime
              "ReferencedEnvelope[-180.0 : 180.0, -90.0 : 90.0]",,0,,OWS,2017-04-01T11:26:06.439,,localhost,GET,http://localhost:8080/geoserver/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage?7,2,hydra,GetMap,1.3.0,/tiger/wms,"service=WMS&version=1.1.0&request=GetMap&layers=tiger:giant_polygon&styles=&bbox=-180.0,-90.0,180.0,90.0&width=768&height=384&srs=EPSG:4326&format=application/openlayers",127.0.0.1,,,localhost,0.0,0.0,admin,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.110 Safari/537.36",[tiger:giant_polygon],tiger:giant_polygon,"text/html; subtype=openlayers",21997,200,WMS,2017-04-01T11:26:06.011,FINISHED,,428
    post:
      tags:
      - "monitoring"
      operationId: postMonitorRequest
      description: This resource cannot be modified
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "monitoring"
      operationId: putMonitorRequest
      description: This resource cannot be modified
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "monitoring"
      operationId: deleteMonitorRequest
      description: Invalid. Cannot delete a specific request
      responses:
        405:
          description: Method Not Allowed


# Path namespaces
  /namespaces:
    get:
      tags:
      - "namespaces"
      operationId: getNamespaces
      summary: Get a list of namespaces
      description: Displays a list of all namespaces on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/namespaces.xml" for XML)
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/NamespacesResponse"
          examples:
            application/xml: |
              <namespaces>
                <namespace>
                  <name>topp</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/topp.xml" type="application/xml"/>
                </namespace>
                <namespace>
                  <name>it.geosolutions</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/it.geosolutions.xml" type="application/xml"/>
                </namespace>
              </namespaces>

            application/json: |
              {
                "namespaces": {
                  "namespace": [
                    {
                    "name": "topp",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/topp.json"
                    },
                    {
                    "name": "it.geosolutions",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/it.geosolutions.json"
                    }
                  ]
                }
              }
        401:
          description: Unauthorized

    post:
      tags:
      - "namespaces"
      operationId: postNamespaces
      summary: Add a new namespace to GeoServer
      description: Adds a new namespace to the server
      parameters:
        - name: namespaceBody
          description: The layer group body information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Namespace"
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created namespace can be found
              type: string
        401:
          description: Unable to add namespace as it already exists

    put:
      tags:
      - "namespaces"
      operationId: putNamespaces
      responses:
        405:
          description: Not permitted

    delete:
      tags:
      - "namespaces"
      operationId: deleteNamespaces
      responses:
        405:
          description: Not permitted

  /namespaces/{namespaceName}:
    parameters:
      - name: namespaceName
        description: The name of the namespace, or "default" for the default namespace.
        in: path
        required: true
        type: string
    get:
      tags:
      - "namespaces"
      operationId: getNamespace
      summary: Retrieve a namespace
      description: Retrieves a single namespace definition. Use the "Accept:" header to specify format or
        append an extension to the endpoint (example "/namespaces/{namespace}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/NamespaceResponse"
          examples:
            application/xml:
              '<namespace>
              <prefix>topp</prefix>
              <uri>http://www.openplans.org/topp</uri>
              <featureTypes>
              <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/topp/featuretypes.xml" type="application/xml"/>
              </featureTypes>
              </namespace>'

            application/json:
              '{
              "namespace": {
              "prefix": "topp",
              "uri": "http://www.openplans.org/topp",
              "featureTypes": "http://localhost:8080/geoserver/rest/workspaces/topp/featuretypes.json"
              }
              }'
        404:
          description: namespace does not exist
    put:
      tags:
      - "namespaces"
      summary: Update a namespace
      description: Takes the body of the put and modifies the namespace from it.
      operationId: putNamespace
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: Modified
        405:
          description: Forbidden to change the name of the namespace
        404:
          description: Namespace not found
    post:
      tags:
      - "namespaces"
      operationId: postNamespace
      responses:
        405:
          description: Forbidden to post to an existing namespace (use PUT)

    delete:
      tags:
      - "namespaces"
      operationId: deleteNamespace
      summary: Delete a namespace
      responses:
        200:
          description: Success. Namespace deleted
        404:
          description: Namespace doesn't exist
        405:
          description: Can't delete default namespace
        403:
          description: Namespace or related Workspace is not empty (and recurse not true)



# Path services/wms|wfs|wcs/settings
  /services/wms/settings:

    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: getWMSSettings
      description: Retrieves Web Map Service settings globally for the server.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSInfo"
          examples:
            application/xml: |
              <wms>
                <enabled>true</enabled>
                <name>My GeoServer WMS</name>
                <title>My GeoServer WMS</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>
              This is a description of your Web Map Server.
                   </abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.1.1</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.3.0</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WFS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <metadata>
                  <entry key="svgAntiAlias">true</entry>
                  <entry key="svgRenderer">Batik</entry>
                </metadata>
                <watermark>
                  <enabled>false</enabled>
                  <position>BOT_RIGHT</position>
                  <transparency>0</transparency>
                </watermark>
                <interpolation>Nearest</interpolation>
                <getFeatureInfoMimeTypeCheckingEnabled>false</getFeatureInfoMimeTypeCheckingEnabled>
                <getMapMimeTypeCheckingEnabled>false</getMapMimeTypeCheckingEnabled>
                <dynamicStylingDisabled>false</dynamicStylingDisabled>
                <maxBuffer>25</maxBuffer>
                <maxRequestMemory>0</maxRequestMemory>
                <maxRenderingTime>0</maxRenderingTime>
                <maxRenderingErrors>0</maxRenderingErrors>
              </wms>
            application/json: |
              {
                "wms": {
                  "enabled": true,
                  "name": "My GeoServer WMS",
                  "title": "My GeoServer WMS",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "\nThis is a description of your Web Map Server.\n     ",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.1.1"
                      },
                      {
                        "version": "1.3.0"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WFS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "svgAntiAlias",
                        "$": "true"
                      },
                      {
                        "@key": "svgRenderer",
                        "$": "Batik"
                      }
                    ]
                  },
                  "watermark": {
                    "enabled": false,
                    "position": "BOT_RIGHT",
                    "transparency": 0
                  },
                  "interpolation": "Nearest",
                  "getFeatureInfoMimeTypeCheckingEnabled": false,
                  "getMapMimeTypeCheckingEnabled": false,
                  "dynamicStylingDisabled": false,
                  "maxBuffer": 25,
                  "maxRequestMemory": 0,
                  "maxRenderingTime": 0,
                  "maxRenderingErrors": 0
                }
              }

    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: postWMSSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: putWMSSettings
      description: Edits a global WMS setting.
      parameters:
        - name: WMSSettingsBody
          in: body
          description: Body of the WMS settings
          required: true
          schema:
            $ref: "#/definitions/WMSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: deleteWMSSettings
      description: Invalid. Use PUT to edit settings.
      responses:
        405:
          description: Method Not Allowed


  /services/wms/workspaces/{workspace}/settings:
    parameters:
      - name: workspace
        in: path
        required: true
        type: string
        description: The workspace name
    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: getWMSWorkspaceSettings
      description: Retrieves Web Map Service settings for a given workspace.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSInfo"
          examples:
            application/xml: |
              <wms>
                <workspace>
                  <name>nurc</name>
                </workspace>
                <enabled>true</enabled>
                <name>My GeoServer WMS</name>
                <title>My GeoServer WMS</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>
              This is a description of your Web Map Server.
                   </abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.1.1</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.3.0</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WFS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <metadata>
                  <entry key="svgAntiAlias">true</entry>
                  <entry key="svgRenderer">Batik</entry>
                </metadata>
                <watermark>
                  <enabled>false</enabled>
                  <position>BOT_RIGHT</position>
                  <transparency>0</transparency>
                </watermark>
                <interpolation>Nearest</interpolation>
                <getFeatureInfoMimeTypeCheckingEnabled>false</getFeatureInfoMimeTypeCheckingEnabled>
                <getMapMimeTypeCheckingEnabled>false</getMapMimeTypeCheckingEnabled>
                <dynamicStylingDisabled>false</dynamicStylingDisabled>
                <maxBuffer>25</maxBuffer>
                <maxRequestMemory>0</maxRequestMemory>
                <maxRenderingTime>0</maxRenderingTime>
                <maxRenderingErrors>0</maxRenderingErrors>
              </wms>
            application/json: |
              {
                "wms": {
                  "workspace": {
                    "name": "nurc"
                  },
                  "enabled": true,
                  "name": "My GeoServer WMS",
                  "title": "My GeoServer WMS",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "\nThis is a description of your Web Map Server.\n     ",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.1.1"
                      },
                      {
                        "version": "1.3.0"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WFS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "svgAntiAlias",
                        "$": "true"
                      },
                      {
                        "@key": "svgRenderer",
                        "$": "Batik"
                      }
                    ]
                  },
                  "watermark": {
                    "enabled": false,
                    "position": "BOT_RIGHT",
                    "transparency": 0
                  },
                  "interpolation": "Nearest",
                  "getFeatureInfoMimeTypeCheckingEnabled": false,
                  "getMapMimeTypeCheckingEnabled": false,
                  "dynamicStylingDisabled": false,
                  "maxBuffer": 25,
                  "maxRequestMemory": 0,
                  "maxRenderingTime": 0,
                  "maxRenderingErrors": 0
                }
              }

    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: postWMSWorkspaceSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: putWMSWorkspaceSettings
      description: Edits a workspace-specific WMS setting.
      parameters:
        - name: WMSSettingsBody
          in: body
          description: Body of the WMS settings
          required: true
          schema:
            $ref: "#/definitions/WMSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: deleteWMSWorkspaceSettings
      description: Deletes a workspace-specific WMS setting.
      responses:
        200:
          description: OK


  /services/wfs/settings:

    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: getWFSSettings
      description: Retrieves Web Feature Service settings globally for the server.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WFSInfo"
          examples:
            application/xml: |
              <wfs>
                <enabled>true</enabled>
                <name>WFS</name>
                <title>GeoServer Web Feature Service</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>This is the reference implementation of WFS 1.0.0 and WFS 1.1.0, supports all WFS operations including Transaction.</abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.0.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.1.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>2.0.0</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WFS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <metadataLink/>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <gml>
                  <entry>
                    <version>V_20</version>
                    <gml>
                      <srsNameStyle>URN2</srsNameStyle>
                      <overrideGMLAttributes>false</overrideGMLAttributes>
                    </gml>
                  </entry>
                  <entry>
                    <version>V_10</version>
                    <gml>
                      <srsNameStyle>XML</srsNameStyle>
                      <overrideGMLAttributes>true</overrideGMLAttributes>
                    </gml>
                  </entry>
                  <entry>
                    <version>V_11</version>
                    <gml>
                      <srsNameStyle>URN</srsNameStyle>
                      <overrideGMLAttributes>false</overrideGMLAttributes>
                    </gml>
                  </entry>
                </gml>
                <serviceLevel>COMPLETE</serviceLevel>
                <maxFeatures>1000000</maxFeatures>
                <featureBounding>false</featureBounding>
                <canonicalSchemaLocation>false</canonicalSchemaLocation>
                <encodeFeatureMember>false</encodeFeatureMember>
                <hitsIgnoreMaxFeatures>false</hitsIgnoreMaxFeatures>
              </wfs>
            application/json: |
              {
                "wfs": {
                  "enabled": true,
                  "name": "WFS",
                  "title": "GeoServer Web Feature Service",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "This is the reference implementation of WFS 1.0.0 and WFS 1.1.0, supports all WFS operations including Transaction.",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.0.0"
                      },
                      {
                        "version": "1.1.0"
                      },
                      {
                        "version": "2.0.0"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WFS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "metadataLink": "",
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "gml": {
                    "entry": [
                      {
                        "version": "V_20",
                        "gml": {
                          "srsNameStyle": [
                            "URN2"
                          ],
                          "overrideGMLAttributes": false
                        }
                      },
                      {
                        "version": "V_10",
                        "gml": {
                          "srsNameStyle": [
                            "XML"
                          ],
                          "overrideGMLAttributes": true
                        }
                      },
                      {
                        "version": "V_11",
                        "gml": {
                          "srsNameStyle": [
                            "URN"
                          ],
                          "overrideGMLAttributes": false
                        }
                      }
                    ]
                  },
                  "serviceLevel": "COMPLETE",
                  "maxFeatures": 1000000,
                  "featureBounding": false,
                  "canonicalSchemaLocation": false,
                  "encodeFeatureMember": false,
                  "hitsIgnoreMaxFeatures": false
                }
              }

    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: postWFSSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: putWFSSettings
      description: Edits a global WFS setting.
      parameters:
        - name: WFSSettingsBody
          in: body
          description: Body of the WFS settings
          required: true
          schema:
            $ref: "#/definitions/WFSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: deleteWFSSettings
      description: Invalid. Use PUT to edit settings.
      responses:
        405:
          description: Method Not Allowed


  /services/wfs/workspaces/{workspace}/settings:
    parameters:
      - name: workspace
        in: path
        required: true
        type: string
        description: The workspace name
    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: getWFSWorkspaceSettings
      description: Retrieves Web Feature Service settings for a given workspace.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WFSInfo"
          examples:
            application/xml: |
              <wfs>
                <workspace>
                  <name>nurc</name>
                </workspace>
                <enabled>true</enabled>
                <name>WFS</name>
                <title>GeoServer Web Feature Service</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>This is the reference implementation of WFS 1.0.0 and WFS 1.1.0, supports all WFS operations including Transaction.</abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.0.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.1.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>2.0.0</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WFS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <metadataLink/>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <gml>
                  <entry>
                    <version>V_20</version>
                    <gml>
                      <srsNameStyle>URN2</srsNameStyle>
                      <overrideGMLAttributes>false</overrideGMLAttributes>
                    </gml>
                  </entry>
                  <entry>
                    <version>V_10</version>
                    <gml>
                      <srsNameStyle>XML</srsNameStyle>
                      <overrideGMLAttributes>true</overrideGMLAttributes>
                    </gml>
                  </entry>
                  <entry>
                    <version>V_11</version>
                    <gml>
                      <srsNameStyle>URN</srsNameStyle>
                      <overrideGMLAttributes>false</overrideGMLAttributes>
                    </gml>
                  </entry>
                </gml>
                <serviceLevel>COMPLETE</serviceLevel>
                <maxFeatures>1000000</maxFeatures>
                <featureBounding>false</featureBounding>
                <canonicalSchemaLocation>false</canonicalSchemaLocation>
                <encodeFeatureMember>false</encodeFeatureMember>
                <hitsIgnoreMaxFeatures>false</hitsIgnoreMaxFeatures>
              </wfs>
            application/json: |
              {
                "wfs": {
                  "workspace": {
                    "name": "nurc"
                  },
                  "enabled": true,
                  "name": "WFS",
                  "title": "GeoServer Web Feature Service",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "This is the reference implementation of WFS 1.0.0 and WFS 1.1.0, supports all WFS operations including Transaction.",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.0.0"
                      },
                      {
                        "version": "1.1.0"
                      },
                      {
                        "version": "2.0.0"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WFS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "metadataLink": "",
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "gml": {
                    "entry": [
                      {
                        "version": "V_20",
                        "gml": {
                          "srsNameStyle": [
                            "URN2"
                          ],
                          "overrideGMLAttributes": false
                        }
                      },
                      {
                        "version": "V_10",
                        "gml": {
                          "srsNameStyle": [
                            "XML"
                          ],
                          "overrideGMLAttributes": true
                        }
                      },
                      {
                        "version": "V_11",
                        "gml": {
                          "srsNameStyle": [
                            "URN"
                          ],
                          "overrideGMLAttributes": false
                        }
                      }
                    ]
                  },
                  "serviceLevel": "COMPLETE",
                  "maxFeatures": 1000000,
                  "featureBounding": false,
                  "canonicalSchemaLocation": false,
                  "encodeFeatureMember": false,
                  "hitsIgnoreMaxFeatures": false
                }
              }

    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: postWFSWorkspaceSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: putWFSWorkspaceSettings
      description: Edits a workspace-specific WFS setting.
      parameters:
        - name: WFSSettingsBody
          in: body
          description: Body of the WFS settings layer
          required: true
          schema:
            $ref: "#/definitions/WFSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: deleteWFSWorkspaceSettings
      description: Deletes a workspace-specific WFS setting.
      responses:
        200:
          description: OK


  /services/wcs/settings:

    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: getWCSSettings
      description: Retrieves Web Coverage Service settings globally for the server.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WCSInfo"
          examples:
            application/xml: |
              <wcs>
                <enabled>true</enabled>
                <name>WCS</name>
                <title>Web Coverage Service</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>This server implements the WCS specification 1.0 and 1.1.1, it's reference implementation of WCS 1.1.1. All layers published by this service are available on WMS also.
                   </abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.0.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.1.1</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>2.0.1</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WCS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <metadataLink>
                  <type>undef</type>
                  <about>http://geoserver.sourceforge.net/html/index.php</about>
                  <metadataType>other</metadataType>
                </metadataLink>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <gmlPrefixing>false</gmlPrefixing>
                <latLon>false</latLon>
                <maxInputMemory>0</maxInputMemory>
                <maxOutputMemory>0</maxOutputMemory>
              </wcs>

            application/json: |
              {
                "wcs": {
                  "enabled": true,
                  "name": "WCS",
                  "title": "Web Coverage Service",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "This server implements the WCS specification 1.0 and 1.1.1, it's reference implementation of WCS 1.1.1. All layers published by this service are available on WMS also.\n     ",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.0.0"
                      },
                      {
                        "version": "1.1.1"
                      },
                      {
                        "version": "2.0.1"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WCS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "metadataLink": {
                    "type": "undef",
                    "about": "http://geoserver.sourceforge.net/html/index.php",
                    "metadataType": "other"
                  },
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "gmlPrefixing": false,
                  "latLon": false,
                  "maxInputMemory": 0,
                  "maxOutputMemory": 0
                }
              }


    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: postWCSSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: putWCSSettings
      description: Edits a global WCS setting.
      parameters:
        - name: WCSSettingsBody
          in: body
          description: Body of the WCS settings
          required: true
          schema:
            $ref: "#/definitions/WCSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      operationId: deleteWCSSettings
      description: Invalid. Use PUT to edit settings.
      responses:
        405:
          description: Method Not Allowed


  /services/wcs/workspaces/{workspace}/settings:
    parameters:
      - name: workspace
        in: path
        required: true
        type: string
        description: The workspace name
    get:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: getWCSWorkspaceSettings
      description: Retrieves Web Coverage Service settings for a given workspace.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WCSInfo"
          examples:
            application/xml: |
              <wcs>
                <workspace>
                  <name>nurc</name>
                </workspace>
                <enabled>true</enabled>
                <name>WCS</name>
                <title>Web Coverage Service</title>
                <maintainer>http://geoserver.org/comm</maintainer>
                <abstrct>This server implements the WCS specification 1.0 and 1.1.1, it&apos;s reference implementation of WCS 1.1.1. All layers published by this service are available on WMS also.
                   </abstrct>
                <accessConstraints>NONE</accessConstraints>
                <fees>NONE</fees>
                <versions>
                  <org.geotools.util.Version>
                    <version>1.0.0</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>1.1.1</version>
                  </org.geotools.util.Version>
                  <org.geotools.util.Version>
                    <version>2.0.1</version>
                  </org.geotools.util.Version>
                </versions>
                <keywords>
                  <string>WCS</string>
                  <string>WMS</string>
                  <string>GEOSERVER</string>
                </keywords>
                <metadataLink>
                  <type>undef</type>
                  <about>http://geoserver.sourceforge.net/html/index.php</about>
                  <metadataType>other</metadataType>
                </metadataLink>
                <citeCompliant>false</citeCompliant>
                <onlineResource>http://geoserver.org</onlineResource>
                <schemaBaseURL>http://schemas.opengis.net</schemaBaseURL>
                <verbose>false</verbose>
                <gmlPrefixing>false</gmlPrefixing>
                <latLon>false</latLon>
                <maxInputMemory>0</maxInputMemory>
                <maxOutputMemory>0</maxOutputMemory>
                <subsamplingEnabled>true</subsamplingEnabled>
                <overviewPolicy>IGNORE</overviewPolicy>
              </wcs>
            application/json: |
              {
                "wcs": {
                  "workspace": {
                    "name": "nurc"
                  },
                  "enabled": true,
                  "name": "WCS",
                  "title": "Web Coverage Service",
                  "maintainer": "http://geoserver.org/comm",
                  "abstrct": "This server implements the WCS specification 1.0 and 1.1.1, it's reference implementation of WCS 1.1.1. All layers published by this service are available on WMS also.\n     ",
                  "accessConstraints": "NONE",
                  "fees": "NONE",
                  "versions": {
                    "org.geotools.util.Version": [
                      {
                        "version": "1.0.0"
                      },
                      {
                        "version": "1.1.1"
                      },
                      {
                        "version": "2.0.1"
                      }
                    ]
                  },
                  "keywords": {
                    "string": [
                      "WCS",
                      "WMS",
                      "GEOSERVER"
                    ]
                  },
                  "metadataLink": {
                    "type": "undef",
                    "about": "http://geoserver.sourceforge.net/html/index.php",
                    "metadataType": "other"
                  },
                  "citeCompliant": false,
                  "onlineResource": "http://geoserver.org",
                  "schemaBaseURL": "http://schemas.opengis.net",
                  "verbose": false,
                  "gmlPrefixing": false,
                  "latLon": false,
                  "maxInputMemory": 0,
                  "maxOutputMemory": 0,
                  "subsamplingEnabled": true,
                  "overviewPolicy": "IGNORE"
                }
              }


# Path reload
    post:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: postWCSWorkspaceSettings
      description: Invalid. Use PUT to edit a service setting.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: putWCSWorkspaceSettings
      description: Edits a workspace-specific WCS setting.
      parameters:
        - name: WCSSettingsBody
          in: body
          description: Body of the WCS settings
          required: true
          schema:
            $ref: "#/definitions/WCSInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    delete:
      tags:
      - "services/wms|wfs|wcs/settings"
      - "workspaces"
      operationId: deleteWCSWorkspaceSettings
      description: Deletes a workspace-specific WCS setting.
      responses:
        200:
          description: OK


  /reset:
    get:
      tags:
      - "reload"
      operationId: getReset
      description: Invalid. Use PUT or POST to reset the caches.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "reload"
      operationId: putReset
      summary: Reset all store, raster, and schema caches.
      description: Resets all store, raster, and schema caches. This operation is used to force GeoServer to drop all caches and store connections and reconnect to each of them the next time they are needed by a request. This is useful in case the stores themselves cache some information about the data structures they manage that may have changed in the meantime.
      responses:
        200:
          description: OK
    post:
      tags:
      - "reload"
      operationId: postReset
      summary: Reset all store, raster, and schema caches.
      description: Resets all store, raster, and schema caches. This operation is used to force GeoServer to drop all caches and store connections and reconnect to each of them the next time they are needed by a request. This is useful in case the stores themselves cache some information about the data structures they manage that may have changed in the meantime.
      responses:
        200:
          description: OK
    delete:
      tags:
      - "reload"
      operationId: deleteReset
      description: Invalid. Use PUT or POST to reset the caches.
      responses:
        405:
          description: Method Not Allowed
  /reload:
    get:
      tags:
      - "reload"
      operationId: getReload
      description: Invalid. Use PUT or POST to reload the catalog and configuation.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "reload"
      operationId: putReload
      summary: Reload the configuration from disk, and reset all caches.
      description: Reloads the GeoServer catalog and configuration from disk. This operation is used in cases where an external tool has modified the on-disk configuration. This operation will also force GeoServer to drop any internal caches and reconnect to all data stores.
      responses:
        200:
          description: OK
    post:
      tags:
      - "reload"
      operationId: postReload
      summary: Reload the configuration from disk, and reset all caches.
      description: Reloads the GeoServer catalog and configuration from disk. This operation is used in cases where an external tool has modified the on-disk configuration. This operation will also force GeoServer to drop any internal caches and reconnect to all data stores.
      responses:
        200:
          description: OK
    delete:
      tags:
      - "reload"
      operationId: deleteReload
      description: Invalid. Use PUT or POST to reload the catalog and configuation.
      responses:
        405:
          description: Method Not Allowed


# Path resource
  /resource/{pathToResource}:
    parameters:
      - name: pathToResource
        in: path
        type: string
        required: true
        description: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory.
    get:
      tags:
      - "resource"
      operationId: resourceGet
      description: |
        Download a resource, list contents of directory, or show formatted resource metadata.

        Response content depends upon parameters.

        With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.

        For example, `/resource/styles/default_point.sld?operation=default`

        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <StyledLayerDescriptor version="1.0.0"
         xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
         xmlns="http://www.opengis.net/sld"
         xmlns:ogc="http://www.opengis.net/ogc"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <!-- a Named Layer is the basic building block of an SLD document -->
          <NamedLayer>
            <Name>default_point</Name>
            <UserStyle>
            <!-- Styles can have names, titles and abstracts -->
              <Title>Default Point</Title>
              <Abstract>A sample style that draws a point</Abstract>
              <!-- FeatureTypeStyles describe how to render different features -->
              <!-- A FeatureTypeStyle for rendering points -->
              <FeatureTypeStyle>
                <Rule>
                  <Name>rule1</Name>
                  <Title>Red Square</Title>
                  <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>
                    <PointSymbolizer>
                      <Graphic>
                        <Mark>
                          <WellKnownName>square</WellKnownName>
                          <Fill>
                            <CssParameter name="fill">#FF0000</CssParameter>
                          </Fill>
                        </Mark>
                      <Size>6</Size>
                    </Graphic>
                  </PointSymbolizer>
                </Rule>
              </FeatureTypeStyle>
            </UserStyle>
          </NamedLayer>
        </StyledLayerDescriptor>
        ```

        If the request is made against a directory resource, a "ResourceDirectory" response is returned, containing information about the directory and its children.
        Examples:

        - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`
          ```
          <ResourceDirectory>
            <name>logs</name>
            <parent>
              <path>/</path>
              <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/" rel="alternate" type="application/xml"/>
            </parent>
            <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>
            <children>
              <child>
                <name>DEFAULT_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>geoserver.log</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/geoserver.log" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>geoserver.log.1</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>geoserver.log.2</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>PRODUCTION_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>QUIET_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>TEST_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
              <child>
                <name>VERBOSE_LOGGING.properties</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties" rel="alternate" type="application/octet-stream"/>
              </child>
            </children>
          </ResourceDirectory>
          ```

        - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`
          ```
          {"ResourceDirectory":{"name":"logs","parent":{"path":"\/","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/","rel":"alternate","type":"application\/json"}},"lastModified":"2017-09-15 18:50:54.0 UTC","children":{"child":[{"name":"DEFAULT_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/DEFAULT_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"geoserver.log","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/geoserver.log","rel":"alternate","type":"application\/octet-stream"}},{"name":"geoserver.log.1","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/geoserver.log.1","rel":"alternate","type":"application\/octet-stream"}},{"name":"geoserver.log.2","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/geoserver.log.2","rel":"alternate","type":"application\/octet-stream"}},{"name":"GEOSERVER_DEVELOPER_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/GEOSERVER_DEVELOPER_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"GEOTOOLS_DEVELOPER_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/GEOTOOLS_DEVELOPER_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"PRODUCTION_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/PRODUCTION_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"QUIET_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/QUIET_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"TEST_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/TEST_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}},{"name":"VERBOSE_LOGGING.properties","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/logs\/VERBOSE_LOGGING.properties","rel":"alternate","type":"application\/octet-stream"}}]}}}
          ```

        With `operation=metadata`, a "ResourceMetadata" object is returned. If the resource is a directory, this metadata object will not list the children of the directory.
        Examples:

        - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`
          ```
          <ResourceMetadata>
            <name>default_point.sld</name>
            <parent>
              <path>/styles</path>
              <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/resource/styles" rel="alternate" type="application/xml"/>
            </parent>
            <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>
            <type>resource</type>
          </ResourceMetadata>
          ```
        - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`
          ```
          {"ResourceMetadata":{"name":"default_point.sld","parent":{"path":"\/styles","link":{"href":"http:\/\/localhost:8080\/geoserver\/rest\/resource\/styles","rel":"alternate","type":"application\/json"}},"lastModified":"2017-01-18 19:02:38.0 UTC","type":"resource"}}
          ```
      produces:
        - application/json
        - application/xml
        - text/plain
        - "*/*"
      parameters:
        - name: operation
          in: query
          type: string
          description: The type of GET operation. `default` returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.`metadata` requests a metadata summary of the resource.
          required: false
          default: default
          enum:
            - default
            - metadata
        - name: format
          in: query
          type: string
          description: The format of the response. Only applicable for the `metadata` operation, or for a directory resource.
          required: false
          default: html
          enum:
            - html
            - xml
            - json
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              type: string
              description: When resource was last modified.
            Content-Type:
              type: string
              description: Will guess mime-type from extension or content.
            Resource-Type:
              type: string
              description: Resource type (custom)
              enum:
                - directory
                - resource
            Resource-Parent:
              type: string
              description: Path to parent (custom)
        404:
          description: Resource not found.
    head:
      tags:
      - "resource"
      operationId: resourceHead
      description: Show resource metadata in HTTP headers.
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              type: string
              description: When resource was last modified.
            Content-Type:
              type: string
              description: Will guess mime-type from extension or content.
            Resource-Type:
              type: string
              description: Resource type (custom)
              enum:
                - directory
                - resource
            Resource-Parent:
              type: string
              description: Path to parent (custom)
        404:
          description: Resource not found.
    post:
      tags:
      - "resource"
      operationId: resourcePost
      description: Invalid. Use PUT to create a resource.
      responses:
        405:
          description: Method not allowed.
    put:
      tags:
      - "resource"
      operationId: resourcePut
      description: Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
      parameters:
        - name: operation
          in: query
          type: string
          description: The type of PUT operation. `default` creates a new resource or alters an existing resource. `move` moves the resource to a new location. `copy` duplicates the resource to a new location
          required: false
          default: default
          enum:
            - default
            - move
            - copy
        - name: resourceBody
          in: body
          description: The content of the resource to upload. In the case of a `move` or `copy` operation, this is instead the path to the source resource to move/copy from.
          schema:
            type: string
            format: binary
      consumes:
        - "*/*"
      responses:
        200:
          description: OK (existing resource)
        201:
          description: Created (new resource)
        404:
          description: Source path that doesn't exist
        405:
          description: PUT to directory or copy where source path is directory

    delete:
      tags:
      - "resource"
      operationId: resourceDelete
      description: Delete a resource (recursively if directory)
      responses:
        200:
          description: OK
        404:
          description: Resource not found.


# Path security
  /rest/security/masterpw:

    get:
      tags:
      - "security"
      operationId: getMasterPW
      summary: Get master password
      description: |
        Displays the master password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/settings.xml" for XML).
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/MasterPW"
          examples:
            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <masterPassword>
                <oldMasterPassword>geoserver</oldMasterPassword>
              </masterPassword>

            application/json: |
              {"oldMasterPassword":"GeoServer"}

    post:
      tags:
      - "security"
      operationId: postMasterPW
      description: Invalid. Use PUT to change master password.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "security"
      operationId: putMasterPW
      summary: Update master password
      description: Changes master password. Must supply current master password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
      parameters:
        - name: MasterPWBody
          description: The old and new master password information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/UpdateMasterPW"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        422:
          description: Unprocessable Entity. This error code will show when the current master password supplied is incorrect, or if the new master password is rejected by the password policy.

    delete:
      tags:
      - "security"
      operationId: deleteMasterPW
      description: Invalid. Use PUT to change master password.
      responses:
        405:
          description: Method Not Allowed


  /rest/security/self/password:

    get:
      tags:
      - "security"
      operationId: getSelfPassword
      description: Invalid. Use PUT to change password.
      responses:
        405:
          description: Method Not Allowed

    post:
      tags:
      - "security"
      operationId: postSelfPassword
      description: Invalid. Use PUT to change password
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "security"
      operationId: putSelfPassword
      summary: Update password
      description: Updates the password for the account used to issue the request.
      parameters:
        - name: SelfPasswordBody
          description: The catalog mode information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/SelfPassword"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        422:
          description: Bad password

    delete:
      tags:
      - "security"
      operationId: deleteSelfPassword
      description: Invalid. Use PUT to change password.
      responses:
        405:
          description: Method Not Allowed


  /rest/security/acl/catalog:

    get:
      tags:
      - "security"
      operationId: getCatalogMode
      description: Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CatalogMode"
          examples:
            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <catalog>
                <mode>HIDE</mode>
              </catalog>

            application/json: |
              {"mode":"HIDE"}

    post:
      tags:
      - "security"
      operationId: postCatalogMode
      description: Invalid. Use PUT to change catalog mode.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "security"
      operationId: putCatalogMode
      summary: Update catalog mode
      description: Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
      parameters:
        - name: CatalogModeBody
          description: The catalog mode information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/CatalogMode"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        422:
          description: Unprocessable Entity. This error code will show when an invalid catalog mode is specified.

    delete:
      tags:
      - "security"
      operationId: deleteCatalogMode
      description: Invalid. Use PUT to change catalog mode.
      responses:
        405:
          description: Method Not Allowed


  /rest/security/acl/layers:

    get:
      tags:
      - "security"
      operationId: getACLLayers
      summary: Get layer rules
      description: Displays the current layer-based security rules.
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ACLLayers"
          examples:
            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <rules>
                <rule resource="*.*.w">GROUP_ADMIN,ADMIN</rule>
                <rule resource="*.*.r">*</rule>
              </rules>

            application/json: |
              {"*.*.w":"GROUP_ADMIN,ADMIN","*.*.r":"*"}


    post:
      tags:
      - "security"
      operationId: postACLLayers
      summary: Add layer rule(s)
      description: |
        Adds one or more new layer-based rules to the list of security rules.
      parameters:
        - name: ACLLayersBody
          description: The new rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLLayers"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: |
            Conflict. Adding an already-added rule. Use PUT to edit the rule in this case. All rule additions are aborted.

    put:
      tags:
      - "security"
      operationId: putACLLayers
      summary: Edit layer rule(s)
      description: Edits one or more layer-based rules in the list of security rules.
      parameters:
        - name: ACLLayersBody
          description: The altered rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLLayers"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: Conflict. Attempting to modify a non-existent rule. Use POST to create the rule in this case. All rule modifications are aborted.

    delete:
      tags:
      - "security"
      operationId: deleteACLLayers
      summary: Delete layer rule(s)
      description: |
        Deletes one or more layer-based rules in the list of security rules.
      responses:
        200:
          description: OK
        404:
          description: Not found. Attempting to delete a non-existent rule.


  /rest/security/acl/layers/{rule}:
    parameters:
      - $ref: "#/parameters/Rule"

    get:
      tags:
      - "security"
      operationId: getACLLayer
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed

    post:
      tags:
      - "security"
      operationId: postACLLayer
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed.

    put:
      tags:
      - "security"
      operationId: putACLLayer
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed.

    delete:
      tags:
      - "security"
      operationId: deleteACLLayer
      summary: Delete layer rule.
      description: |
        Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \<workspace\>.\<layer\>.[r|w|a]
      responses:
        200:
          description: OK


  /rest/security/acl/services:

    get:
      tags:
      - "security"
      operationId: getACLServices
      summary: Get service rules
      description: Displays the current service-based security rules.
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ACLServices"
          examples:
            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <rules>
                <rule resource="*.*">*</rule>
              </rules>

            application/json: |
              {"*.*":"*"}


    post:
      tags:
      - "security"
      operationId: postACLServices
      summary: Add service rule(s)
      description: Adds one or more new service-based rules to the list of security rules.
      parameters:
        - name: ACLServicesBody
          description: The new rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLServices"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: Conflict. Adding an already-added rule. Use PUT to edit the rule in this case. All rule additions are aborted.

    put:
      tags:
      - "security"
      operationId: putACLServices
      summary: Edit service rule(s)
      description: Edits one or more service-based rules in the list of security rules.
      parameters:
        - name: ACLServicesBody
          description: The altered rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLServices"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: Conflict. Attempting to modify a non-existent rule. Use POST to create the rule in this case. All rule modifications are aborted.

    delete:
      tags:
      - "security"
      operationId: deleteACLServices
      summary: Delete service rule(s)
      description: Deletes one or more service-based rules in the list of security rules.
      responses:
        200:
          description: OK
        404:
          description: Not found. Attempting to delete a non-existent rule.


  /rest/security/acl/services/{rule}:
    parameters:
      - $ref: "#/parameters/Rule"

    get:
      tags:
      - "security"
      operationId: getACLService
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed.

    post:
      tags:
      - "security"
      operationId: postACLService
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed.

    put:
      tags:
      - "security"
      operationId: putACLService
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        405:
          description: Method not allowed.

    delete:
      tags:
      - "security"
      operationId: deleteACLService
      summary: Delete service rule.
      description: |
        Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \<service\>.\<operation\>
      responses:
        200:
          description: OK


  /rest/security/acl/rest:

    get:
      tags:
      - "security"
      operationId: getACLRESTRules
      summary: Get REST rules
      description: Displays the current REST access rules.
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ACLREST"
          examples:
            application/xml: |
              <rules>
                <rule resource="/**:GET">ADMIN</rule>
                <rule resource="/**:POST,DELETE,PUT">ADMIN</rule>
              </rules>

            application/json: |
              {"/**:GET":"ADMIN","/**:POST,DELETE,PUT":"ADMIN"}

    post:
      tags:
      - "security"
      operationId: postACLRESTRules
      summary: Add REST access rule(s)
      description: Adds one or more new REST access rules.
      parameters:
        - name: ACLRESTBody
          description: The new rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLREST"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: Conflict. Adding an already-added rule. Use PUT to edit the rule in this case. All rule additions are aborted.

    put:
      tags:
      - "security"
      operationId: putACLRESTRules
      summary: Edit REST access rule(s)
      description: Edits one or more REST access rules.
      parameters:
        - name: ACLRESTBody
          description: The altered rules to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/ACLREST"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
        409:
          description: Conflict. Attempting to modify a non-existent rule. Use POST to create the rule in this case. All rule modifications are aborted.

    delete:
      tags:
      - "security"
      operationId: deleteACLRESTRules
      summary: Delete REST access rule(s)
      description: Deletes one or more service-based rules.
      responses:
        200:
          description: OK
        404:
          description: Not found. Attempting to delete a non-existent rule.

  /rest/security/acl/rest/{rule}:
    parameters:
      - name: rule
        type: string
        in: path
        required: true
        description: |
          The REST rule, specified as \<URL Ant pattern\>;\<comma separated list of HTTP methods\>. Examples are

          - /**;GET
          - /**;POST,DELETE,PUT

    get:
      tags:
      - "security"
      operationId: getACLRESTRule
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        200:
          description: OK

    post:
      tags:
      - "security"
      operationId: postACLRESTRule
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        200:
          description: OK

    put:
      tags:
      - "security"
      operationId: putACLRESTRule
      description: Has no effect. Endpoint that includes a specific rule is only used with DELETE.
      responses:
        200:
          description: OK

    delete:
      tags:
      - "security"
      operationId: deleteACLRESTRule
      summary: Delete REST access rule
      description: |
        Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \<URL Ant pattern\>:\<comma separated list of HTTP methods\>
      responses:
        200:
          description: OK


# Path settings
  /settings:
    get:
      tags:
      - "settings"
      operationId: getSettings
      summary: Get a list of all global settings
      description: Displays a list of all global settings on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/settings.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Global"
          examples:
            application/xml: |
              <global>
                <settings>
                  <id>SettingsInfoImpl-68f6c583:154ca420c47:-8000</id>
                  <contact>
                    <addressCity>Alexandria</addressCity>
                    <addressCountry>Egypt</addressCountry>
                    <addressType>Work</addressType>
                    <contactEmail>claudius.ptolomaeus@gmail.com</contactEmail>
                    <contactOrganization>The Ancient Geographers</contactOrganization>
                    <contactPerson>Claudius Ptolomaeus</contactPerson>
                    <contactPosition>Chief Geographer</contactPosition>
                  </contact>
                  <charset>UTF-8</charset>
                  <numDecimals>8</numDecimals>
                  <onlineResource>http://geoserver.org</onlineResource>
                  <verbose>false</verbose>
                  <verboseExceptions>false</verboseExceptions>
                  <localWorkspaceIncludesPrefix>false</localWorkspaceIncludesPrefix>
                </settings>
                <jai>
                  <allowInterpolation>false</allowInterpolation>
                  <recycling>false</recycling>
                  <tilePriority>5</tilePriority>
                  <tileThreads>7</tileThreads>
                  <memoryCapacity>0.5</memoryCapacity>
                  <memoryThreshold>0.75</memoryThreshold>
                  <imageIOCache>false</imageIOCache>
                  <pngAcceleration>true</pngAcceleration>
                  <jpegAcceleration>true</jpegAcceleration>
                  <allowNativeMosaic>false</allowNativeMosaic>
                  <allowNativeWarp>false</allowNativeWarp>
                </jai>
                <coverageAccess>
                  <maxPoolSize>10</maxPoolSize>
                  <corePoolSize>5</corePoolSize>
                  <keepAliveTime>30000</keepAliveTime>
                  <queueType>UNBOUNDED</queueType>
                  <imageIOCacheThreshold>10240</imageIOCacheThreshold>
                </coverageAccess>
                <updateSequence>180</updateSequence>
                <featureTypeCacheSize>0</featureTypeCacheSize>
                <globalServices>true</globalServices>
                <xmlPostRequestLogBufferSize>1024</xmlPostRequestLogBufferSize>
              </global>

            application/json: |
              {
                "global": {
                  "settings": {
                    "id": "SettingsInfoImpl-68f6c583:154ca420c47:-8000",
                    "contact": {
                      "addressCity": "Alexandria",
                      "addressCountry": "Egypt",
                      "addressType": "Work",
                      "contactEmail": "claudius.ptolomaeus@gmail.com",
                      "contactOrganization": "The Ancient Geographers",
                      "contactPerson": "Claudius Ptolomaeus",
                      "contactPosition": "Chief Geographer"
                    },
                    "charset": "UTF-8",
                    "numDecimals": 8,
                    "onlineResource": "http://geoserver.org",
                    "verbose": false,
                    "verboseExceptions": false,
                    "localWorkspaceIncludesPrefix": false
                  },
                  "jai": {
                    "allowInterpolation": false,
                    "recycling": false,
                    "tilePriority": 5,
                    "tileThreads": 7,
                    "memoryCapacity": 0.5,
                    "memoryThreshold": 0.75,
                    "imageIOCache": false,
                    "pngAcceleration": true,
                    "jpegAcceleration": true,
                    "allowNativeMosaic": false,
                    "allowNativeWarp": false
                  },
                  "coverageAccess": {
                    "maxPoolSize": 10,
                    "corePoolSize": 5,
                    "keepAliveTime": 30000,
                    "queueType": "UNBOUNDED",
                    "imageIOCacheThreshold": 10240
                  },
                  "updateSequence": 180,
                  "featureTypeCacheSize": 0,
                  "globalServices": true,
                  "xmlPostRequestLogBufferSize": 1024
                }
              }

    post:
      tags:
      - "settings"
      operationId: postSettings
      description: Invalid. Use PUT to update settings.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "settings"
      operationId: putSettings
      summary: Update settings
      description: Updates global settings on the server.

      parameters:
        - name: settingsBody
          description: The settings information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Global"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK

    delete:
      tags:
      - "settings"
      operationId: deleteSettings
      description: Invalid. Use PUT to update settings.
      responses:
        405:
          description: Method Not Allowed


  /settings/contact:
    get:
      tags:
      - "settings"
      operationId: getContactSettings
      summary: Get a list of all global contact settings
      description: Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/settings/contact.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Contact"
          examples:
            application/xml: |
              <contact>
                <addressCity>Alexandria</addressCity>
                <addressCountry>Egypt</addressCountry>
                <addressType>Work</addressType>
                <contactEmail>claudius.ptolomaeus@gmail.com</contactEmail>
                <contactOrganization>The Ancient Geographers</contactOrganization>
                <contactPerson>Claudius Ptolomaeus</contactPerson>
                <contactPosition>Chief Geographer</contactPosition>
              </contact>

            application/json: |
              {
                "contact": {
                  "addressCity": "Alexandria",
                  "addressCountry": "Egypt",
                  "addressType": "Work",
                  "contactEmail": "claudius.ptolomaeus@gmail.com",
                  "contactOrganization": "The Ancient Geographers",
                  "contactPerson": "Claudius Ptolomaeus",
                  "contactPosition": "Chief Geographer"
                }
              }

    post:
      tags:
      - "settings"
      operationId: postContactSettings
      description: Invalid. Use PUT to update contact settings.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "settings"
      operationId: putContactSettings
      summary: Update contact settings
      description: Updates global contact settings on the server.

      parameters:
        - name: settingscontactBody
          description: The contact settings information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Contact"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK

    delete:
      tags:
      - "settings"
      operationId: deleteContactSettings
      description: Invalid. Use PUT to update contact settings.
      responses:
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/settings:
    parameters:
      - name: workspace
        in: path
        required: true
        type: string
        description: The workspace name
    get:
      tags:
      - "settings"
      - "workspaces"
      operationId: getWorkspaceSettings
      summary: Get a list of all workspace-specific settings
      description: Displays a list of all workspace-specific settings. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/settings.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WorkspaceSettings"
          examples:
            application/xml: |
              <settings>
                <contact>
                  <id>contact</id>
                </contact>
                <charset>UTF-8</charset>
                <numDecimals>4</numDecimals>
                <verbose>false</verbose>
                <verboseExceptions>false</verboseExceptions>
                <localWorkspaceIncludesPrefix>false</localWorkspaceIncludesPrefix>
              </settings>

            application/json: |
              {
                "settings": {
                  "contact": {
                    "id": "contact"
                  },
                  "charset": "UTF-8",
                  "numDecimals": 4,
                  "verbose": false,
                  "verboseExceptions": false,
                  "localWorkspaceIncludesPrefix": false
                }
              }

    post:
      tags:
      - "settings"
      - "workspaces"
      operationId: postWorkspaceSettings
      summary: Create workspace-specific settings
      description: Create new workspace-specific settings on the server.
      parameters:
        - name: settingsBody
          description: The settings information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/WorkspaceSettings"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
        500:
          description: "Internal Server Error: Settings already exist for workspace"

    put:
      tags:
      - "settings"
      - "workspaces"
      operationId: putWorkspaceSettings
      summary: Update workspace-specific settings
      description: Updates workspace-specific settings on the server.

      parameters:
        - name: settingsBody
          description: The settings information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/WorkspaceSettings"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK

    delete:
      tags:
      - "settings"
      - "workspaces"
      operationId: deleteWorkspaceSettings
      description: Delete the settings for this workspace.
      responses:
        200:
          description: OK


# Path structuredcoverage
  /workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
      - name: coverage
        in: path
        required: true
        description: The name of the coverage to be retrieved
        type: string
    get:
      tags:
      - "structuredcoverages"
      operationId: getStructuredCoverageIndex
      summary: Get the information schema attached to the granules
      description: Displays a list of all the attributes associated to a particular coverage's granules. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/index.xml" for XML). Defaults to XML representation.
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Schema"
          examples:
            application/json: |
              {"Schema": {
                  "attributes": {"Attribute":   [
                        {
                      "name": "the_geom",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "com.vividsolutions.jts.geom.MultiPolygon"
                    },
                        {
                      "name": "location",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.lang.String",
                      "length": 254
                    },
                        {
                      "name": "ingestion",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.util.Date",
                      "length": 8
                    },
                        {
                      "name": "elevation",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.lang.Integer",
                      "length": 9
                    }
                  ]},
                  "href": "http://localhost:8080/geoserver/restng/workspaces/wcs/coveragestores/watertemp/coverages/watertemp/index/granules.json"
                }}
            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <Schema>
                <attributes>
                  <Attribute>
                    <name>the_geom</name>
                    <minOccurs>0</minOccurs>
                    <maxOccurs>1</maxOccurs>
                    <nillable>true</nillable>
                    <binding>com.vividsolutions.jts.geom.MultiPolygon</binding>
                  </Attribute>
                  <Attribute>
                    <name>location</name>
                    <minOccurs>0</minOccurs>
                    <maxOccurs>1</maxOccurs>
                    <nillable>true</nillable>
                    <binding>java.lang.String</binding>
                    <length>254</length>
                  </Attribute>
                  <Attribute>
                    <name>ingestion</name>
                    <minOccurs>0</minOccurs>
                    <maxOccurs>1</maxOccurs>
                    <nillable>true</nillable>
                    <binding>java.util.Date</binding>
                    <length>8</length>
                  </Attribute>
                  <Attribute>
                    <name>elevation</name>
                    <minOccurs>0</minOccurs>
                    <maxOccurs>1</maxOccurs>
                    <nillable>true</nillable>
                    <binding>java.lang.Integer</binding>
                    <length>9</length>
                  </Attribute>
                </attributes>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/workspaces/wcs/coveragestores/watertemp/coverages/watertemp/index/granules.xml" rel="alternate" type="application/xml"/>
              </Schema>
        401:
          description: Unauthorized

    post:
      tags:
      - "structuredcoverages"
      operationId: postStructuredCoverageIndex
      description: Invalid, the index cannot be created or modified
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "structuredcoverages"
      operationId: putStructuredCoverageIndex
      description: Invalid, the index cannot be created or modified
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "structuredcoverages"
      operationId: deleteCoverageStores
      description: Invalid, the index cannot be created or modified
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
      - name: coverage
        in: path
        required: true
        description: The name of the coverage to be retrieved
        type: string
    get:
      tags:
      - "structuredcoverages"
      operationId: getStructuredCoverageGranules
      summary: Get the attributes associated to the granules
      description: |
        Displays a list of all the attributes associated to a particular coverage's granules. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/index.xml" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
      produces:
        - application/json
        - application/xml
      parameters:
        - name: filter
          in: query
          required: false
          description: A CQL filter to reduce the returned granules
          type: string
        - name: offset
          in: query
          description: Used for paging, the start of the current page
          required: false
          type: integer
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: Used for paging, the number of items to be returned
          required: false
          type: integer
          minimum: 1
      responses:
        200:
          description: OK
          examples:
            application/json: |
              {
                "type": "FeatureCollection",
                "bbox":   [
                  0.23722068851276978,
                  40.562080748421806,
                  14.592757149389236,
                  44.55808294568743
                ],
                "crs":   {
                  "type": "name",
                  "properties": {"name": "EPSG:4326"}
                },
                "features":   [
                      {
                    "type": "Feature",
                    "geometry":       {
                      "type": "MultiPolygon",
                      "coordinates": [[        [
                                  [
                          0.2372,
                          40.5621
                        ],
                                  [
                          0.2372,
                          44.5581
                        ],
                                  [
                          14.5928,
                          44.5581
                        ],
                                  [
                          14.5928,
                          40.5621
                        ],
                                  [
                          0.2372,
                          40.5621
                        ]
                      ]]]
                    },
                    "properties":       {
                      "location": "NCOM_wattemp_000_20081101T0000000_12.tiff",
                      "ingestion": "2008-11-01T00:00:00.000+0000",
                      "elevation": 0
                    },
                    "id": "watertemp.1"
                  },
                      {
                    "type": "Feature",
                    "geometry":       {
                      "type": "MultiPolygon",
                      "coordinates": [[        [
                                  [
                          0.2372,
                          40.5621
                        ],
                                  [
                          0.2372,
                          44.5581
                        ],
                                  [
                          14.5928,
                          44.5581
                        ],
                                  [
                          14.5928,
                          40.5621
                        ],
                                  [
                          0.2372,
                          40.5621
                        ]
                      ]]]
                    },
                    "properties":       {
                      "location": "NCOM_wattemp_000_20081031T0000000_12.tiff",
                      "ingestion": "2008-10-31T00:00:00.000+0000",
                      "elevation": 0
                    },
                    "id": "watertemp.2"
                  }
                ]
              }

            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <wfs:FeatureCollection xmlns:wfs="http://www.opengis.net/wfs" xmlns:gf="http://www.geoserver.org/rest/granules" xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <gml:boundedBy>
                  <gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                  <gml:coord>
                      <gml:X>0.23722068851276978</gml:X>
                      <gml:Y>40.562080748421806</gml:Y>
                  </gml:coord>
                  <gml:coord>
                      <gml:X>14.592757149389236</gml:X>
                      <gml:Y>44.55808294568743</gml:Y>
                  </gml:coord>
              </gml:Box>
              </gml:boundedBy>
              <gml:featureMember>
                  <gf:watertemp fid="watertemp.1">
                      <gml:boundedBy>
                          <gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                          <gml:coordinates>0.237221,40.562081 14.592757,44.558083</gml:coordinates>
                      </gml:Box>
                  </gml:boundedBy>
                  <gf:the_geom>
                      <gml:MultiPolygon srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                      <gml:polygonMember>
                          <gml:Polygon>
                              <gml:outerBoundaryIs>
                                  <gml:LinearRing>
                                      <gml:coordinates>0.237221,40.562081 0.237221,44.558083 14.592757,44.558083 14.592757,40.562081 0.237221,40.562081</gml:coordinates>
                                  </gml:LinearRing>
                              </gml:outerBoundaryIs>
                          </gml:Polygon>
                      </gml:polygonMember>
                  </gml:MultiPolygon>
              </gf:the_geom>
              <gf:location>NCOM_wattemp_000_20081101T0000000_12.tiff</gf:location>
              <gf:ingestion>2008-11-01T00:00:00Z</gf:ingestion>
              <gf:elevation>0</gf:elevation>
              </gf:watertemp>
              </gml:featureMember>
              <gml:featureMember>
                  <gf:watertemp fid="watertemp.2">
                      <gml:boundedBy>
                          <gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                          <gml:coordinates>0.237221,40.562081 14.592757,44.558083</gml:coordinates>
                      </gml:Box>
                  </gml:boundedBy>
                  <gf:the_geom>
                      <gml:MultiPolygon srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                      <gml:polygonMember>
                          <gml:Polygon>
                              <gml:outerBoundaryIs>
                                  <gml:LinearRing>
                                      <gml:coordinates>0.237221,40.562081 0.237221,44.558083 14.592757,44.558083 14.592757,40.562081 0.237221,40.562081</gml:coordinates>
                                  </gml:LinearRing>
                              </gml:outerBoundaryIs>
                          </gml:Polygon>
                      </gml:polygonMember>
                  </gml:MultiPolygon>
              </gf:the_geom>
              <gf:location>NCOM_wattemp_000_20081031T0000000_12.tiff</gf:location>
              <gf:ingestion>2008-10-31T00:00:00Z</gf:ingestion>
              <gf:elevation>0</gf:elevation>
              </gf:watertemp>
              </gml:featureMember>
              </wfs:FeatureCollection>

        401:
          description: Unauthorized

    post:
      tags:
      - "structuredcoverages"
      operationId: postStructuredCoverageGranules
      description: Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "structuredcoverages"
      operationId: putStructuredCoverageGranules
      description: Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "structuredcoverages"
      operationId: deleteStructuredCoverageGranules
      description: Allows removing one or more granules from the index
      parameters:
        - name: filter
          in: query
          required: false
          description: A CQL filter to reduce the returned granules
          type: string
        - name: offset
          in: query
          description: Used for paging, the start of the current page
          required: false
          type: integer
          minimum: 0
        - name: limit
          in: query
          description: Used for paging, the number of items to be removed
          required: false
          type: integer
          minimum: 1
      responses:
        200:
          description: OK
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the worskpace containing the coverage stores.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
      - name: coverage
        in: path
        required: true
        description: The name of the coverage to be retrieved
        type: string
      - name: granuleId
        type: string
        in: path
        required: true
        description: The granule ID
    get:
      tags:
      - "structuredcoverages"
      operationId: getStructuredCoverageGranule
      summary: Get the attributes of a particular granule
      description: Displays a list of all the attributes associated to a particular coverage's granule. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/index.xml" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
          examples:
            application/json: |
              {
                "type": "FeatureCollection",
                "bbox":   [
                  0.23722068851276978,
                  40.562080748421806,
                  14.592757149389236,
                  44.55808294568743
                ],
                "crs":   {
                  "type": "name",
                  "properties": {"name": "EPSG:4326"}
                },
                "features":   [
                      {
                    "type": "Feature",
                    "geometry":       {
                      "type": "MultiPolygon",
                      "coordinates": [[        [
                                  [
                          0.2372,
                          40.5621
                        ],
                                  [
                          0.2372,
                          44.5581
                        ],
                                  [
                          14.5928,
                          44.5581
                        ],
                                  [
                          14.5928,
                          40.5621
                        ],
                                  [
                          0.2372,
                          40.5621
                        ]
                      ]]]
                    },
                    "properties":       {
                      "location": "NCOM_wattemp_000_20081101T0000000_12.tiff",
                      "ingestion": "2008-11-01T00:00:00.000+0000",
                      "elevation": 0
                    },
                    "id": "watertemp.1"
                  }
                ]
              }

            application/xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <wfs:FeatureCollection xmlns:wfs="http://www.opengis.net/wfs" xmlns:gf="http://www.geoserver.org/rest/granules" xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <gml:boundedBy>
                  <gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                  <gml:coord>
                      <gml:X>0.23722068851276978</gml:X>
                      <gml:Y>40.562080748421806</gml:Y>
                  </gml:coord>
                  <gml:coord>
                      <gml:X>14.592757149389236</gml:X>
                      <gml:Y>44.55808294568743</gml:Y>
                  </gml:coord>
              </gml:Box>
              </gml:boundedBy>
              <gml:featureMember>
                  <gf:watertemp fid="watertemp.1">
                      <gml:boundedBy>
                          <gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                          <gml:coordinates>0.237221,40.562081 14.592757,44.558083</gml:coordinates>
                      </gml:Box>
                  </gml:boundedBy>
                  <gf:the_geom>
                      <gml:MultiPolygon srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                      <gml:polygonMember>
                          <gml:Polygon>
                              <gml:outerBoundaryIs>
                                  <gml:LinearRing>
                                      <gml:coordinates>0.237221,40.562081 0.237221,44.558083 14.592757,44.558083 14.592757,40.562081 0.237221,40.562081</gml:coordinates>
                                  </gml:LinearRing>
                              </gml:outerBoundaryIs>
                          </gml:Polygon>
                      </gml:polygonMember>
                  </gml:MultiPolygon>
              </gf:the_geom>
              <gf:location>NCOM_wattemp_000_20081101T0000000_12.tiff</gf:location>
              <gf:ingestion>2008-11-01T00:00:00Z</gf:ingestion>
              <gf:elevation>0</gf:elevation>
              </gf:watertemp>
              </gml:featureMember>
              </wfs:FeatureCollection>

        401:
          description: Unauthorized

    post:
      tags:
      - "structuredcoverages"
      operationId: postStructuredCoverageGranule
      description: Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "structuredcoverages"
      operationId: putStructuredCoverageGranule
      description: Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "structuredcoverages"
      operationId: deleteStructuredCoverageGranule
      description: Allows removing the specified granule
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


# Path styles

  /styles:
    get:
      tags:
      - "styles"
      operationId: getStyles
      summary: Get a list of styles
      description: Displays a list of all styles on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/styles.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StyleList"
          examples:
            application/xml: |
              <styles>
                  <style>
                      <name>burg</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/burg.xml" type="application/xml"/>
                  </style>
                  <style>
                      <name>capitals</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/capitals.xml" type="application/xml"/>
                  </style>
              </styles>

            application/json: |
              {"styles":
                {"style":
                  [ {"href":"http://localhost:8080/geoserver/rest/styles/burg.json", "name":"burg"},
                    {"href":"http://localhost:8080/geoserver/rest/styles/capitals.json", "name":"capitals"}]}}


    post:
      tags:
      - "styles"
      operationId: postStyles
      summary: Add a new style
      description: |
          Adds a new style entry to the server.
          Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.

          Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry.
          You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.
      parameters:
        - $ref: "#/parameters/StyleInfoPost"
        - name: name
          in: query
          type: string
          description: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
          required: false
        - name: Content-Type
          in: header
          type: string
          description: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
          required: false
      consumes:
        - application/json
        - application/xml
        - application/zip
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
      responses:
        201:
          description: Created

    put:
      tags:
      - "styles"
      operationId: putStyles
      description: Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "styles"
      operationId: deleteStyles
      description: Invalid. Use /styles/{style} instead.
      responses:
        405:
          description: Method Not Allowed


  /styles/{style}:
    parameters:
      - name: style
        in: path
        required: true
        description: Name of the style to retrieve.
        type: string
    get:
      tags:
      - "styles"
      operationId: getStyle
      summary: Retrieve a style
      description: |
        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the "Accept:" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using "/styles/{style}.xml" or "Accept: application/xml". (Also available: "{style}.json", "Accept: application/json" "{style}.html", and "Accept: text/html").

        The style definition body can be requested by either appending the file extension of the style file (e.g., "{style}.sld" or "{style}.css") or by specifying the correct media type for the style definition in the "Accept" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.

        - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs
        - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs
        - application/vnd.geoserver.geocss+css for css styles
        - application/vnd.geoserver.ysld+yaml for ysld styles
        - application/vnd.geoserver.mbstyle+json for mb styles
      produces:
        - application/xml
        - application/json
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Style"
          examples:
            application/xml: |
              <style>
                <name>rain</name>
                <format>sld</format>
                <languageVersion>
                  <version>1.0.0</version>
                </languageVersion>
                <filename>rain.sld</filename>
              </style>
            application/json: |
              {"style":
                {"name":"rain", "format":"sld",
                "languageVersion": {"version":"1.0.0"},
                "filename":"rain.sld"}
              }
            application/vnd.ogc.sld+xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <StyledLayerDescriptor version="1.0.0" xmlns="http://www.opengis.net/sld" xmlns:ogc="http://www.opengis.net/ogc"
                xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://www.opengis.net/sld http://schemas.opengis.net/sld/1.0.0/StyledLayerDescriptor.xsd">
                <NamedLayer>
                  <Name>rain</Name>
                  <UserStyle>
                    <Name>rain</Name>
                    <Title>Rain distribution</Title>
                    <FeatureTypeStyle>
                      <Rule>
                        <RasterSymbolizer>
                          <Opacity>1.0</Opacity>
                          <ColorMap>
                            <ColorMapEntry color="#FF0000" quantity="0" />
                            <ColorMapEntry color="#FFFFFF" quantity="100"/>
                            <ColorMapEntry color="#00FF00" quantity="2000"/>
                            <ColorMapEntry color="#0000FF" quantity="5000"/>
                          </ColorMap>
                        </RasterSymbolizer>
                      </Rule>
                    </FeatureTypeStyle>
                  </UserStyle>
                </NamedLayer>
              </StyledLayerDescriptor>


    post:
      tags:
      - "styles"
      operationId: postStyle
      description: Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "styles"
      operationId: putStyle
      summary: Modify a single style
      description: |
        Modifies a single style.
        Use the "Accept:" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).

        Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content.
        Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files

      parameters:
        - $ref: "#/parameters/StyleInfoPut"
        - name: raw
          in: query
          description: When set to "true", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are "true" or "false" (default). Only used when uploading a style file.
          type: boolean
          required: false
          default: false
      consumes:
        - application/json
        - application/xml
        - application/zip
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
      responses:
        200:
          description: OK
        401:
          description: Unauthorized

    delete:
      tags:
      - "styles"
      operationId: deleteStyle
      summary: Delete style
      description: Deletes a style.
      parameters:
        - name: purge
          in: query
          required: false
          default: false
          description: Specifies whether the underlying file containing the style should be deleted on disk.
          type: boolean
        - name: recurse
          in: query
          required: false
          default: false
          description: Removes references to the specified style in existing layers.
          type: boolean
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


  /workspaces/{workspace}/styles:
    parameters:
      - name: workspace
        in: path
        required: true
        description: Name of workspace
        type: string
    get:
      tags:
      - "styles"
      operationId: getWorkspaceStyles
      summary: Get a list of styles in a given workspace
      description: Displays a list of all styles in a given workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/styles.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StyleList"
          examples:
            application/xml: |
              <styles>
                <style>
                  <name>burg</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/styles/burg.xml" type="application/xml"/>
                </style>
                <style>
                  <name>dem</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/styles/dem.xml" type="application/xml"/>
                </style>
              </styles>

            application/json: |
              {
                "styles": {
                  "style": [
                    {
                      "name": "burg",
                      "href": "http://localhost:8080/geoserver/rest/workspaces/sf/styles/burg.json"
                    },
                    {
                      "name": "dem",
                      "href": "http://localhost:8080/geoserver/rest/workspaces/sf/styles/dem.json"
                    }
                  ]
                }
              }

    post:
      tags:
      - "styles"
      operationId: postWorkspaceStyles
      summary: Add a new style to a given workspace
      description:  |
          Adds a new style entry to the server.
          Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.

          Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry.
          You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.
      parameters:
        - $ref: "#/parameters/StyleInfoPost"
        - name: name
          in: query
          type: string
          description: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
          required: false
        - name: Content-Type
          in: header
          type: string
          description: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
          required: false
      consumes:
        - application/json
        - application/xml
        - application/zip
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
      responses:
        201:
          description: Created

    put:
      tags:
      - "styles"
      operationId: putWorkspaceStyles
      description: Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "styles"
      operationId: deleteWorkspaceStyles
      description: Invalid. Use /workspaces/{workspace}/styles/{style} instead.
      responses:
        405:
          description: Method Not Allowed


  /rest/workspaces/{workspace}/styles/{style}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: Name of the workspace for style definitions
        type: string
      - name: style
        in: path
        required: true
        description: Name of the style to retrieve.
        type: string
    get:
      tags:
      - "styles"
      operationId: getWorkspaceStyle
      summary: Retrieve a style from a given workspace
      description: |
        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the "Accept:" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using "/styles/{style}.xml" or "Accept: application/xml". (Also available: "{style}.json", "Accept: application/json" "{style}.html", and "Accept: text/html").

        The style definition body can be requested by either appending the file extension of the style file (e.g., "{style}.sld" or "{style}.css") or by specifying the correct media type for the style definition in the "Accept" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.

        - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs
        - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs
        - application/vnd.geoserver.geocss+css for css styles
        - application/vnd.geoserver.ysld+yaml for ysld styles
        - application/vnd.geoserver.mbstyle+json for mb styles
      produces:
        - application/json
        - application/xml
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StyleWorkspace"
          examples:
            application/xml: |
              <style>
                <name>burg</name>
                <workspace>
                  <name>sf</name>
                </workspace>
                <format>sld</format>
                <languageVersion>
                  <version>1.0.0</version>
                </languageVersion>
                <filename>burg.sld</filename>
              </style>
            application/json: |
              {"style":
                {"name":"burg",
                 "workspace": {"name":"sf"},
                 "format":"sld",
                 "languageVersion":{"version":"1.0.0"},
                 "filename":"burg.sld"}}
            application/vnd.ogc.sld+xml: |
              <StyledLayerDescriptor version="1.0.0" xmlns="http://www.opengis.net/sld" xmlns:ogc="http://www.opengis.net/ogc"
                xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://www.opengis.net/sld http://schemas.opengis.net/sld/1.0.0/StyledLayerDescriptor.xsd">
                <NamedLayer>
                  <Name>redflag</Name>
                  <UserStyle>
                    <Name>burg</Name>
                    <Title>A small red flag</Title>
                    <Abstract>A sample of how to use an SVG based symbolizer</Abstract>

                    <FeatureTypeStyle>
                      <Rule>
                        <Title>Red flag</Title>
                        <PointSymbolizer>
                          <Graphic>
                            <ExternalGraphic>
                              <OnlineResource xlink:type="simple" xlink:href="burg02.svg" />
                              <Format>image/svg+xml</Format>
                            </ExternalGraphic>
                            <Size>
                              <ogc:Literal>20</ogc:Literal>
                            </Size>
                          </Graphic>
                        </PointSymbolizer>
                      </Rule>

                    </FeatureTypeStyle>
                  </UserStyle>
                </NamedLayer>
              </StyledLayerDescriptor>
    post:
      tags:
      - "styles"
      operationId: postWorkspaceStyle
      description: Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "styles"
      operationId: putWorkspaceStyle
      summary: Modify a single style in a given workspace
      description: |
        Modifies a single style in a given workspace.
        Use the "Accept:" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).

        Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content.
        Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files

      parameters:
        - $ref: "#/parameters/StyleInfoPut"
        - name: raw
          in: query
          description: When set to "true", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are "true" or "false" (default). Only used when uploading a style file.
          type: boolean
          required: false
      consumes:
        - application/json
        - application/xml
        - application/zip
        - application/vnd.ogc.sld+xml
        - application/vnd.ogc.se+xml
      responses:
        200:
          description: OK
        401:
          description: Unauthorized

    delete:
      tags:
      - "styles"
      operationId: deleteWorkspaceStyle
      summary: Delete style in a given workspace
      description: Deletes a style in a given workspace.
      parameters:
        - name: purge
          in: query
          required: false
          default: false
          description: Specifies whether the underlying file containing the style should be deleted on disk.
          type: boolean
        - name: recurse
          in: query
          required: false
          default: false
          description: Removes references to the specified style in existing layers.
          type: boolean
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


  /rest/layers/{layer}/styles:
    parameters:
      - name: layer
        in: path
        required: true
        description: Name of the layer to manage styles for
        type: string
    get:
      tags:
      - "styles"
      operationId: getLayerStyles
      summary: Get a list of layer alternate styles
      description: Displays a list of all alternate styles for a given layer. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}/styles.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StyleList"
          examples:
            application/xml: |
              <styles>
                <style>
                  <name>pophatch</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/topp:states/styles/pophatch.xml" type="application/xml"/>
                </style>
                <style>
                  <name>polygon</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/topp:states/styles/polygon.xml" type="application/xml"/>
                </style>
              </styles>

            application/json: |
              {
                "styles": {
                  "style": [
                    {
                      "name": "pophatch",
                      "href": "http://localhost:8080/geoserver/rest/layers/topp:states/styles/pophatch.json"
                    },
                    {
                      "name": "polygon",
                      "href": "http://localhost:8080/geoserver/rest/layers/topp:states/styles/polygon.json"
                    }
                  ]
                }
              }

    post:
      tags:
      - "styles"
      operationId: postLayerStyles
      summary: Add a new style
      description: Adds a new style entry to the layer. The style named in styleBody must alread exist, and will not be altered by this request.
      parameters:
        - name: styleBody
          description: Style body information naming an existing style to add to the layer
          in: body
          required: true
          schema:
            $ref: "#/definitions/StyleInfoPost"
        - name: default
          type: boolean
          in: query
          description: Whether to make this the default style for the layer.
          default: false
          required: false
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created

    put:
      tags:
      - "styles"
      operationId: putLayerStyles
      description: Invalid. Use POST to modify the styles for a layer.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "styles"
      operationId: deleteLayerStyles
      description: Invalid.
      responses:
        405:
          description: Method Not Allowed


# Path templates
  /templates:
    get:
      tags:
      - "templates"
      operationId: templatesGet
      summary: List of templates for the server
      description: Displays a list of templates registered for use on the server.
      produces:
        - tapplication/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesPost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesPut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/templates:
    parameters:
      - $ref: "#/parameters/Workspace"
    get:
      tags:
      - "templates"
      operationId: templatesWorkspaceGet
      summary: List of templates for workspace
      description: Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesWorkspacePost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesWorkspacePut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesWorkspaceDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/datastores/{store}/templates:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
    get:
      tags:
      - "templates"
      operationId: templatesDataStoreGet
      summary: List of templates for a data store
      description: Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesDataStorePost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesDataStorePut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesDataStoreDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - name: type
        in: path
        required: true
        type: string
        description: The feature type name
    get:
      tags:
      - "templates"
      operationId: templatesDataStoreFTGet
      summary: List of templates for a feature type.
      description: Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesDataStoreFTPost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesDataStoreFTPut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesDataStoreFTDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/coveragestore/{store}/templates:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
    get:
      tags:
      - "templates"
      operationId: templatesDataStoreCSGet
      summary: List of templates for a coverage store
      description: Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesDataStoreCSPost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesDataStoreCSPut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesDataStoreCSDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - name: coverage
        in: path
        required: true
        type: string
        description: The coverage name
    get:
      tags:
      - "templates"
      operationId: templatesCoverageGet
      summary: List of templates for a coverage
      description: Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatesCoveragePost
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatesCoveragePut
      description: Invalid. PUT to `/{template}` to edit a template.
      responses:
        405:
          description: Method Not Allowed
    delete:
      tags:
      - "templates"
      operationId: templatesCoverageDelete
      description: Invalid. Delete from `/{template}` to remove a template.
      responses:
        405:
          description: Method Not Allowed

  /templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateGet
      summary: Return a template
      description: Displays a single template registered for use on the server.
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templatePost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templatePut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateDelete
      summary: Delete a template.
      description: Deletes a single template registered for use on the server.
      responses:
        200:
          description: OK
        404:
          description: Template not found

  /workspaces/{workspace}/templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateWorkspaceGet
      summary: Return a template for workspace
      description: Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templateWorkspacePost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templateWorkspacePut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateWorkspaceDelete
      summary: Delete a template.
      description: Deletes a single template registered for use in a workspace.
      responses:
        200:
          description: OK
        404:
          description: Template not found

  /workspaces/{workspace}/datastores/{store}/templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateDataStoreGet
      summary: Return a template for a data store
      description: Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templateDataStorePost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templateDataStorePut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateDataStoreDelete
      summary: Delete a template.
      description: Deletes a single template registered for use by all layers generated by a data store.
      responses:
        200:
          description: OK
        404:
          description: Template not found

  /workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - name: type
        in: path
        required: true
        type: string
        description: The feature type name
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateDataStoreFTGet
      summary: Return a template for a feature type.
      description: Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templateDataStoreFTPost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templateDataStoreFTPut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateDataStoreFTDelete
      summary: Delete a template.
      description: Deletes a single template registered for use by a feature type.
      responses:
        200:
          description: OK
        404:
          description: Template not found

  /workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateDataStoreCSGet
      summary: Return a template for a coverage store
      description: Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templateDataStoreCSPost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templateDataStoreCSPut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateDataStoreCSDelete
      summary: Delete a template.
      description: Deletes a single template registered for use by all layers generated by a coverage store.
      responses:
        200:
          description: OK
        404:
          description: Template not found

  /workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl:
    parameters:
      - $ref: "#/parameters/Workspace"
      - $ref: "#/parameters/Store"
      - name: coverage
        in: path
        required: true
        type: string
        description: The coverage name
      - $ref: "#/parameters/Template"
    get:
      tags:
      - "templates"
      operationId: templateCoverageGet
      summary: Return a template for a coverage
      description: Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
      produces:
        - text/plain
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Templates"
    post:
      tags:
      - "templates"
      operationId: templateCoveragePost
      description: Invalid. Use PUT to insert a template.
      responses:
        405:
          description: Method Not Allowed
    put:
      tags:
      - "templates"
      operationId: templateCoveragePut
      summary: Insert or update a template
      description: Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
      consumes:
        - text/plain
      parameters:
        - $ref: "#/parameters/TemplateBody"
      responses:
        201:
          description: Created
    delete:
      tags:
      - "templates"
      operationId: templateCoverageDelete
      summary: Delete a template.
      description: Deletes a single template registered for use by a coverage.
      responses:
        200:
          description: OK
        404:
          description: Template not found


# Path transforms
  /services/wfs/transforms:

    get:
      tags:
      - "transforms"
      operationId: getTransforms
      summary: List available transformations.
      description: Displays a list of all the transforms information available on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/styles.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TransformList"
          examples:
            application/xml: |
              <transforms>
                <transform>
                  <name>test</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/services/wfs/transforms/test.xml" type="application/atom+xml"/>
                </transform>
                <transform>
                  <name>test1</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/services/wfs/transforms/test1.xml" type="application/atom+xml"/>
                </transform>
              </transforms>

            application/json: |
              {
                "transforms": {
                  "transform": [
                    {
                      "name": "test",
                      "href": "http://localhost:8080/geoserver/restng/services/wfs/transforms/test.json"
                    },
                    {
                      "name": "test1",
                      "href": "http://localhost:8080/geoserver/restng/services/wfs/transforms/test1.json"
                    }
                  ]
                }
              }

    post:
      tags:
      - "transforms"
      operationId: postTransform
      summary: Add a new transform
      description: Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
      parameters:
        - name: transformBody
          description: Transform body to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Transform"
        - name: name
          in: query
          required: false
          description: Name of the transformation.
          type: string
        - name: sourceFormat
          in: query
          required: false
          description: Source format of the transformation.
          type: string
        - name: outputFormat
          in: query
          required: false
          description: Output format of the transformation.
          type: string
        - name: outputMimeType
          in: query
          required: false
          description: Output mime type of the transformation.
          type: string
        - name: fileExtension
          in: query
          required: false
          description: The extension of the file generated by the transformation.
          type: string
      consumes:
        - application/json
        - application/xml
        - application/xslt+xml
        - text/html
      responses:
        201:
          description: Created

    put:
      tags:
      - "transforms"
      operationId: putTransform
      description: Invalid. Use POST for adding a new transformation.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "transforms"
      operationId: deleteTransform
      description: Invalid.
      responses:
        405:
          description: Method Not Allowed


  /services/wfs/transforms/{transform}:
    parameters:
      - name: transform
        in: path
        required: true
        description: Name of the transformation.
        type: string
    get:
      tags:
      - "transforms"
      operationId: getTransform
      summary: Retrieve a transformation.
      description: Retrieves a single transformation.
      produces:
        - application/json
        - application/xml
        - application/xslt+xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transform"
          examples:
            application/xml: |
              <transform>
                <name>test1</name>
                <sourceFormat>text/xml; subtype=gml/2.1.2</sourceFormat>
                <outputFormat>text/html</outputFormat>
                <xslt>test1.xslt</xslt>
              </transform>

            application/json: |
              {
                "transform": {
                  "name": "test1",
                  "sourceFormat": "text/xml; subtype=gml/2.1.2",
                  "outputFormat": "text/html",
                  "xslt": "test1.xslt"
                }
              }

            application/xslt+xml: |
              <?xml version="1.0" encoding="ISO-8859-1"?>
              <xsl:stylesheet version="1.0" xmlns:wfs="http://www.opengis.net/wfs"
                xmlns:tiger="http://www.census.gov" xmlns:gml="http://www.opengis.net/gml"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                <xsl:template match="/">
                  <html>
                    <body>
                    <xsl:for-each select="wfs:FeatureCollection/gml:featureMember/*">
                      <h2><xsl:value-of select="@fid"/></h2>
                      <table border="1">
                        <tr>
                          <th>Attribute</th>
                          <th>Value</th>
                        </tr>
                          <!-- [not(*)] strips away all nodes having
                               children, in particular, geometries -->
                          <xsl:for-each select="./*[not(*)]">
                          <tr>
                            <td>
                              <xsl:value-of select="name()" />
                            </td>
                            <td>
                              <xsl:value-of select="." />
                            </td>
                          </tr>
                          </xsl:for-each>
                      </table>
                   </xsl:for-each>
                   </body>
                 </html>
                </xsl:template>
              </xsl:stylesheet>


    post:
      tags:
      - "transforms"
      operationId: postTranform
      description: Invalid.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "transforms"
      operationId: putTranform
      summary: Modify a single transform
      description: Modifies a single transform.
      parameters:
        - name: transformBody
          description: Transform body to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Transform"
      consumes:
        - application/json
        - application/xml
        - application/xslt+xml
      responses:
        200:
          description: OK
        401:
          description: Unauthorized

    delete:
      tags:
      - "transforms"
      operationId: deleteTranform
      summary: Delete transformation
      description: Deletes a transformation.
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


# Path wmslayers
  /workspaces/{workspace}/wmslayers:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
    get:
      tags:
      - "wmslayers"
      operationId: getWMSStoreLayers
      description: Retrieves the WMS layers available on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmslayers" for XML).
      parameters:
        - name: list
          in: query
          description: Set "list=available" to see all possible layers in the store, not just ones currently published
          type: string
          default: configured
          enum:
          - available
          - configured
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSStoreLayersList"
          examples:
            application/xml: |
              <wmsLayers>
                <wmsLayer>
                  <name>dem</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers/dem.xml" type="application/xml"/>
                </wmsLayer>
                <wmsLayer>
                  <name>states</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers/states.xml" type="application/xml"/>
                </wmsLayer>
              </wmsLayers>
            application/json: |
              {"wmsLayers":{"wmsLayer":[{"name":"dem","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmsstores\/altgs\/wmslayers\/dem.json"},{"name":"states","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmsstores\/altgs\/wmslayers\/states.json"}]}}
            application/xml (list=available): |
              <list>
                <wmsLayerName>ne:basemap</wmsLayerName>
                <wmsLayerName>ne:ne1</wmsLayerName>
                <wmsLayerName>ne:boundary_lines_land</wmsLayerName>
                <wmsLayerName>ne:states_provinces_lines</wmsLayerName>
                <wmsLayerName>ne:populated_places</wmsLayerName>
                <wmsLayerName>opengeo:countries</wmsLayerName>
                <wmsLayerName>usgs:dem</wmsLayerName>
                <wmsLayerName>ne:ocean</wmsLayerName>
                <wmsLayerName>ne:roads</wmsLayerName>
                <wmsLayerName>usa:states</wmsLayerName>
                <wmsLayerName>ne:states_provinces_shp</wmsLayerName>
                <wmsLayerName>ne:urban_areas</wmsLayerName>
              </list>
            application/json (list=available): |
              {"list":{"string":["ne:basemap","ne:ne1","ne:boundary_lines_land","ne:states_provinces_lines","ne:populated_places","opengeo:countries","usgs:dem","ne:ocean","ne:roads","usa:states","ne:states_provinces_shp","ne:urban_areas"]}}

    post:
      tags:
      - "wmslayers"
      operationId: postWMSStoreLayers
      description: Publishes a new WMS store layer.
      parameters:
        - name: WMSStoreLayerBody
          in: body
          description: Body of the WMS store layer
          required: true
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer.
              type: string

    put:
      tags:
      - "wmslayers"
      operationId: putWMSStoreLayers
      description: Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmslayers"
      operationId: deleteWMSStoreLayers
      description: Invalid. Can only delete an individual layer.
      responses:
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/wmslayers/{wmslayer}:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmslayer
        in: path
        description: Name of the layer
        required: true
        type: string
    get:
      tags:
      - "wmslayers"
      operationId: getWMSStoreLayer
      description: Retrieves an individual WMS layer. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmslayers/{wmslayer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: When set to "true", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are "true" or "false" (default).
          type: boolean
          required: false
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
          examples:
            application/xml: |
              <wmsLayer>
                <name>dem</name>
                <nativeName>usgs:dem</nativeName>
                <namespace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/cite.xml" type="application/xml"/>
                </namespace>
                <title>Digital elevation model</title>
                <description>USGS GTOPO30 digital elevation model</description>
                <abstract>USGS GTOPO30 digital elevation model</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>GeoTIFF</string>
                  <string>W100N40</string>
                </keywords>
                <nativeCRS>GEOGCS[&quot;WGS 84&quot;, &#xd;
                DATUM[&quot;World Geodetic System 1984&quot;, &#xd;
                  SPHEROID[&quot;WGS 84&quot;, 6378137.0, 298.257223563, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], &#xd;
                  AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], &#xd;
                PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], &#xd;
                UNIT[&quot;degree&quot;, 0.017453292519943295], &#xd;
                AXIS[&quot;Geodetic longitude&quot;, EAST], &#xd;
                AXIS[&quot;Geodetic latitude&quot;, NORTH], &#xd;
                AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</nativeCRS>
                <srs>EPSG:4326</srs>
                <nativeBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <projectionPolicy>FORCE_DECLARED</projectionPolicy>
                <enabled>true</enabled>
                <metadata>
                  <entry key="cachingEnabled">false</entry>
                </metadata>
                <store class="wmsStore">
                  <name>cite:altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.xml" type="application/xml"/>
                </store>
              </wmsLayer>
            application/json: |
              {"wmsLayer":{"name":"dem","nativeName":"usgs:dem","namespace":{"name":"cite","href":"http://localhost:8080/geoserver/rest/namespaces/cite.json"},"title":"Digital elevation model","description":"USGS GTOPO30 digital elevation model","abstract":"USGS GTOPO30 digital elevation model","keywords":{"string":["WCS","GeoTIFF","W100N40"]},"nativeCRS":"GEOGCS[\"WGS 84\", \r\n  DATUM[\"World Geodetic System 1984\", \r\n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \r\n    AUTHORITY[\"EPSG\",\"6326\"]], \r\n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \r\n  UNIT[\"degree\", 0.017453292519943295], \r\n  AXIS[\"Geodetic longitude\", EAST], \r\n  AXIS[\"Geodetic latitude\", NORTH], \r\n  AUTHORITY[\"EPSG\",\"4326\"]]","srs":"EPSG:4326","nativeBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"latLonBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"projectionPolicy":"FORCE_DECLARED","enabled":true,"metadata":{"entry":{"@key":"cachingEnabled","$":"false"}},"store":{"@class":"wmsStore","name":"cite:altgs","href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.json"}}}

    post:
      tags:
      - "wmslayers"
      operationId: postWMSStoreLayer
      description: Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmslayers"
      operationId: putWMSStoreLayer
      description: Edits an existing WMS store layer.
      parameters:
        - name: WMSStoreLayerBody
          in: body
          description: Body of the WMS store layer
          required: true
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
        - name: calculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer.
              type: string

    delete:
      tags:
      - "wmslayers"
      operationId: deleteWMSStoreLayer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK


  /workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmsstore
        in: path
        description: Name of the store
        required: true
        type: string
    get:
      tags:
      - "wmslayers"
      operationId: getWMSStoreStoreLayers
      description: Retrieves the WMS store layers available in the given store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml" for XML).
      parameters:
        - name: list
          in: query
          description: Set "list=available" to see all possible layers in the store, not just ones currently published
          default: configured
          enum:
          - available
          - configured
          type: string
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
            description: OK
            schema:
              $ref: "#/definitions/WMSStoreLayersList"
            examples:
              application/xml: |
                <wmsLayers>
                  <wmsLayer>
                    <name>dem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers/dem.xml" type="application/xml"/>
                  </wmsLayer>
                  <wmsLayer>
                    <name>states</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers/states.xml" type="application/xml"/>
                  </wmsLayer>
                </wmsLayers>
              application/json: |
                {"wmsLayers":{"wmsLayer":[{"name":"dem","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmsstores\/altgs\/wmslayers\/dem.json"},{"name":"states","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmsstores\/altgs\/wmslayers\/states.json"}]}}
              application/xml (list=available): |
                <list>
                  <wmsLayerName>ne:basemap</wmsLayerName>
                  <wmsLayerName>ne:ne1</wmsLayerName>
                  <wmsLayerName>ne:boundary_lines_land</wmsLayerName>
                  <wmsLayerName>ne:states_provinces_lines</wmsLayerName>
                  <wmsLayerName>ne:populated_places</wmsLayerName>
                  <wmsLayerName>opengeo:countries</wmsLayerName>
                  <wmsLayerName>usgs:dem</wmsLayerName>
                  <wmsLayerName>ne:ocean</wmsLayerName>
                  <wmsLayerName>ne:roads</wmsLayerName>
                  <wmsLayerName>usa:states</wmsLayerName>
                  <wmsLayerName>ne:states_provinces_shp</wmsLayerName>
                  <wmsLayerName>ne:urban_areas</wmsLayerName>
                </list>
              application/json (list=available): |
                {"list":{"string":["ne:basemap","ne:ne1","ne:boundary_lines_land","ne:states_provinces_lines","ne:populated_places","opengeo:countries","usgs:dem","ne:ocean","ne:roads","usa:states","ne:states_provinces_shp","ne:urban_areas"]}}

    post:
      tags:
      - "wmslayers"
      operationId: postWMSStoreStoreLayers
      description: Publishes a new WMS store layer in the given store.
      parameters:
        - name: WMSStoreLayerBody
          in: body
          description: Body of the WMS store layer
          required: true
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer
              type: string

    put:
      tags:
      - "wmslayers"
      operationId: putWMSStoreStoreLayers
      description: Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmslayers"
      operationId: deleteWMSStoreStoreLayers
      description: Invalid. Can only delete an individual layer.
      responses:
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmsstore
        in: path
        description: Name of the store
        required: true
        type: string
      - name: wmslayer
        in: path
        description: Name of the layer
        required: true
        type: string
    get:
      tags:
      - "wmslayers"
      operationId: getWMSStoreStoreLayer
      description: Retrieves an individual WMS store layer for a given store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: When set to "true", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are "true" or "false" (default).
          type: boolean
          required: false
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
          examples:
            application/xml: |
              <wmsLayer>
                <name>dem</name>
                <nativeName>usgs:dem</nativeName>
                <namespace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/cite.xml" type="application/xml"/>
                </namespace>
                <title>Digital elevation model</title>
                <description>USGS GTOPO30 digital elevation model</description>
                <abstract>USGS GTOPO30 digital elevation model</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>GeoTIFF</string>
                  <string>W100N40</string>
                </keywords>
                <nativeCRS>GEOGCS[&quot;WGS 84&quot;, &#xd;
                DATUM[&quot;World Geodetic System 1984&quot;, &#xd;
                  SPHEROID[&quot;WGS 84&quot;, 6378137.0, 298.257223563, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], &#xd;
                  AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], &#xd;
                PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], &#xd;
                UNIT[&quot;degree&quot;, 0.017453292519943295], &#xd;
                AXIS[&quot;Geodetic longitude&quot;, EAST], &#xd;
                AXIS[&quot;Geodetic latitude&quot;, NORTH], &#xd;
                AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</nativeCRS>
                <srs>EPSG:4326</srs>
                <nativeBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <projectionPolicy>FORCE_DECLARED</projectionPolicy>
                <enabled>true</enabled>
                <metadata>
                  <entry key="cachingEnabled">false</entry>
                </metadata>
                <store class="wmsStore">
                  <name>cite:altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.xml" type="application/xml"/>
                </store>
              </wmsLayer>
            application/json: |
              {"wmsLayer":{"name":"dem","nativeName":"usgs:dem","namespace":{"name":"cite","href":"http://localhost:8080/geoserver/rest/namespaces/cite.json"},"title":"Digital elevation model","description":"USGS GTOPO30 digital elevation model","abstract":"USGS GTOPO30 digital elevation model","keywords":{"string":["WCS","GeoTIFF","W100N40"]},"nativeCRS":"GEOGCS[\"WGS 84\", \r\n  DATUM[\"World Geodetic System 1984\", \r\n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \r\n    AUTHORITY[\"EPSG\",\"6326\"]], \r\n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \r\n  UNIT[\"degree\", 0.017453292519943295], \r\n  AXIS[\"Geodetic longitude\", EAST], \r\n  AXIS[\"Geodetic latitude\", NORTH], \r\n  AUTHORITY[\"EPSG\",\"4326\"]]","srs":"EPSG:4326","nativeBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"latLonBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"projectionPolicy":"FORCE_DECLARED","enabled":true,"metadata":{"entry":{"@key":"cachingEnabled","$":"false"}},"store":{"@class":"wmsStore","name":"cite:altgs","href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.json"}}}

    post:
      tags:
      - "wmslayers"
      operationId: postWMSStoreStoreLayer
      description: Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmslayers"
      operationId: putWMSStoreStoreLayer
      description: Edits an existing WMS store layer.
      parameters:
        - name: WMSStoreLayerBody
          in: body
          description: Body of the WMS store layer
          required: true
          schema:
            $ref: "#/definitions/WMSStoreLayerInfo"
        - name: calculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer
              type: string

    delete:
      tags:
      - "wmslayers"
      operationId: deleteWMSStoreStoreLayer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK


# Path wmsstores
  /workspaces/{workspace}/wmsstores:
    parameters:
      - name: workspace
        in: path
        required: true
        description: Name of the worskpace containing the WMS store.
        type: string
    get:
      tags:
      - "wmsstores"
      operationId: getWMSStores
      summary: Get a list of WMS stores
      description: Displays a list of all WMS stores on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/rest/workspaces/{workspace}/wmsstores.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSStoresList"
          examples:
            application/xml: |
              <wmsStores>
                <wmsStore>
                  <name>altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.xml" type="application/xml"/>
                </wmsStore>
              </wmsStores>

            application/json: |
              {"wmsStores":
                {"wmsStore": [
                  {"name":"altgs",
                   "href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs.json"}]}}


    post:
      tags:
      - "wmsstores"
      operationId: postWMSStores
      summary: Add a new WMS store
      description: Adds a new WMS store entry to the server.
      parameters:
        - $ref: "#/parameters/WMSStorePost"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: URL where the newly created store can be found
              type: string
        401:
          description: Unauthorized

    put:
      tags:
      - "wmsstores"
      operationId: putWMSStores
      description: Invalid. Use POST for adding a new WMS store, or PUT on /workspaces/{workspace}/wmsstores/{wmsstore} to edit an existing WMS store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmsstores"
      operationId: deleteWMSStores
      description: Invalid. Use /workspaces/{workspace}/wmsstores/{wmsstore} instead.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/wmsstores/{store}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: The name of the workspace containing the WMS store.
        type: string
      - name: store
        in: path
        required: true
        description: The name of the store to be retrieved
        type: string
    get:
      tags:
      - "wmsstores"
      operationId: getWMSStore
      summary: Retrieve a WMS store in a given workspace
      description: Displays a representation of the WMS store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmsstores/{store}.xml" for XML). Defaults to HTML representation.
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          required: false
          description: When set to true, avoids to log an Exception when the WMS store is not present. Note that 404 status code will be returned anyway.
          type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMSStoreInfo"
          examples:
            application/json: |
              {"wmsStore": {
                "name":"altgs",
                "type":"WMS",
                "enabled":true,
                "workspace": {"name":"cite", "href":"http://localhost:8080/geoserver/rest/workspaces/cite.json"},
                "metadata": {"entry":{"@key":"useConnectionPooling","$":"true"}},
                "_default":false,
                "capabilitiesURL":"http://localhost:8081/geoserver/wms?request=GetCapabilities",
                "maxConnections":6,
                "readTimeout":60,
                "connectTimeout":30,
                "wmsLayers":"http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers.json"}}

            application/xml: |
              <wmsStore>
                <name>altgs</name>
                <type>WMS</type>
                <enabled>true</enabled>
                <workspace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite.xml" type="application/xml"/>
                </workspace>
                <metadata>
                  <entry key="useConnectionPooling">true</entry>
                </metadata>
                <__default>false</__default>
                <capabilitiesURL>http://localhost:8081/geoserver/wms?request=GetCapabilities</capabilitiesURL>
                <maxConnections>6</maxConnections>
                <readTimeout>60</readTimeout>
                <connectTimeout>30</connectTimeout>
                <wmsLayers>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmsstores/altgs/wmslayers.xml" type="application/xml"/>
                </wmsLayers>
              </wmsStore>

        401:
          description: Unauthorized

    post:
      tags:
      - "wmsstores"
      operationId: postWMSStore
      description: Invalid. Use POST on /workspaces/{workspace}/WMSstores for adding a new WMS store, or PUT on /workspaces/{workspace}/WMSstores/{store} to edit/upload an existing WMS store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmsstores"
      operationId: putWMSStore
      summary: Modify a single WMS store.
      description: Modifies a single WMS store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "{store}.xml" for XML).
      parameters:
        - $ref: "#/parameters/WMSStorePut"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The WMS store was successfully updated.
        401:
          description: Unauthorized

    delete:
      tags:
      - "wmsstores"
      operationId: deleteWMSStore
      summary: Delete WMS store
      description: Deletes a WMS store
      parameters:
        - name: recurse
          in: query
          required: false
          description: When set to true all resources contained in the store are also removed.
          default: false
          type: boolean
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


# Path wmtslayers
  /workspaces/{workspace}/wmtslayers:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
    get:
      tags:
      - "wmtslayers"
      operationId: getWMTSStoreLayers
      description: Retrieves the WMTS layers available on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmtslayers" for XML).
      parameters:
        - name: list
          in: query
          description: Set "list=available" to see all possible layers in the store, not just ones currently published
          type: string
          default: configured
          enum:
          - available
          - configured
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMTSStoreLayersList"
          examples:
            application/xml: |
              <wmtsLayers>
                <wmtsLayer>
                  <name>dem</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers/dem.xml" type="application/xml"/>
                </wmtsLayer>
                <wmtsLayer>
                  <name>states</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers/states.xml" type="application/xml"/>
                </wmtsLayer>
              </wmtsLayers>
            application/json: |
              {"wmtsLayers":{"wmtsLayer":[{"name":"dem","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmtsstores\/altgs\/wmtslayers\/dem.json"},{"name":"states","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmtsstores\/altgs\/wmtslayers\/states.json"}]}}
            application/xml (list=available): |
              <list>
                <wmtsLayerName>ne:basemap</wmtsLayerName>
                <wmtsLayerName>ne:ne1</wmtsLayerName>
                <wmtsLayerName>ne:boundary_lines_land</wmtsLayerName>
                <wmtsLayerName>ne:states_provinces_lines</wmtsLayerName>
                <wmtsLayerName>ne:populated_places</wmtsLayerName>
                <wmtsLayerName>opengeo:countries</wmtsLayerName>
                <wmtsLayerName>usgs:dem</wmtsLayerName>
                <wmtsLayerName>ne:ocean</wmtsLayerName>
                <wmtsLayerName>ne:roads</wmtsLayerName>
                <wmtsLayerName>usa:states</wmtsLayerName>
                <wmtsLayerName>ne:states_provinces_shp</wmtsLayerName>
                <wmtsLayerName>ne:urban_areas</wmtsLayerName>
              </list>
            application/json (list=available): |
              {"list":{"string":["ne:basemap","ne:ne1","ne:boundary_lines_land","ne:states_provinces_lines","ne:populated_places","opengeo:countries","usgs:dem","ne:ocean","ne:roads","usa:states","ne:states_provinces_shp","ne:urban_areas"]}}

    post:
      tags:
      - "wmtslayers"
      operationId: postWMTSStoreLayers
      description: Publishes a new WMTS store layer.
      parameters:
        - name: WMTSStoreLayerBody
          in: body
          description: Body of the WMTS store layer
          required: true
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer.
              type: string

    put:
      tags:
      - "wmtslayers"
      operationId: putWMTSStoreLayers
      description: Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmtslayers"
      operationId: deleteWMTSStoreLayers
      description: Invalid. Can only delete an individual layer.
      responses:
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/wmtslayers/{wmtslayer}:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmtslayer
        in: path
        description: Name of the layer
        required: true
        type: string

    get:
      tags:
      - "wmtslayers"
      operationId: getWMTSStoreLayer
      description: Retrieves an individual WMTS layer. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: When set to "true", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are "true" or "false" (default).
          type: boolean
          required: false
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
          examples:
            application/xml: |
              <wmtsLayer>
                <name>dem</name>
                <nativeName>usgs:dem</nativeName>
                <namespace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/cite.xml" type="application/xml"/>
                </namespace>
                <title>Digital elevation model</title>
                <description>USGS GTOPO30 digital elevation model</description>
                <abstract>USGS GTOPO30 digital elevation model</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>GeoTIFF</string>
                  <string>W100N40</string>
                </keywords>
                <nativeCRS>GEOGCS[&quot;WGS 84&quot;, &#xd;
                DATUM[&quot;World Geodetic System 1984&quot;, &#xd;
                  SPHEROID[&quot;WGS 84&quot;, 6378137.0, 298.257223563, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], &#xd;
                  AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], &#xd;
                PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], &#xd;
                UNIT[&quot;degree&quot;, 0.017453292519943295], &#xd;
                AXIS[&quot;Geodetic longitude&quot;, EAST], &#xd;
                AXIS[&quot;Geodetic latitude&quot;, NORTH], &#xd;
                AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</nativeCRS>
                <srs>EPSG:4326</srs>
                <nativeBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <projectionPolicy>FORCE_DECLARED</projectionPolicy>
                <enabled>true</enabled>
                <metadata>
                  <entry key="cachingEnabled">false</entry>
                </metadata>
                <store class="wmtsStore">
                  <name>cite:altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.xml" type="application/xml"/>
                </store>
              </wmtsLayer>
            application/json: |
              {"wmtsLayer":{"name":"dem","nativeName":"usgs:dem","namespace":{"name":"cite","href":"http://localhost:8080/geoserver/rest/namespaces/cite.json"},"title":"Digital elevation model","description":"USGS GTOPO30 digital elevation model","abstract":"USGS GTOPO30 digital elevation model","keywords":{"string":["WCS","GeoTIFF","W100N40"]},"nativeCRS":"GEOGCS[\"WGS 84\", \r\n  DATUM[\"World Geodetic System 1984\", \r\n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \r\n    AUTHORITY[\"EPSG\",\"6326\"]], \r\n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \r\n  UNIT[\"degree\", 0.017453292519943295], \r\n  AXIS[\"Geodetic longitude\", EAST], \r\n  AXIS[\"Geodetic latitude\", NORTH], \r\n  AUTHORITY[\"EPSG\",\"4326\"]]","srs":"EPSG:4326","nativeBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"latLonBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"projectionPolicy":"FORCE_DECLARED","enabled":true,"metadata":{"entry":{"@key":"cachingEnabled","$":"false"}},"store":{"@class":"wmtsStore","name":"cite:altgs","href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.json"}}}

    post:
      tags:
      - "wmtslayers"
      operationId: postWMTSStoreLayer
      description: Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmtslayers"
      operationId: putWMTSStoreLayer
      description: Edits an existing WMTS store layer.
      parameters:
        - name: WMTSStoreLayerBody
          in: body
          description: Body of the WMTS store layer
          required: true
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
        - name: calculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer.
              type: string

    delete:
      tags:
      - "wmtslayers"
      operationId: deleteWMTSStoreLayer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmtslayer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK


  /workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmtsstore
        in: path
        description: Name of the store
        required: true
        type: string
    get:
      tags:
      - "wmtslayers"
      operationId: getWMTSStoreStoreLayers
      description: Retrieves the WMTS store layers available in the given store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml" for XML).
      parameters:
        - name: list
          in: query
          description: Set "list=available" to see all possible layers in the store, not just ones currently published
          default: configured
          enum:
          - available
          - configured
          type: string
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
            description: OK
            schema:
              $ref: "#/definitions/WMTSStoreLayersList"
            examples:
              application/xml: |
                <wmtsLayers>
                  <wmtsLayer>
                    <name>dem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers/dem.xml" type="application/xml"/>
                  </wmtsLayer>
                  <wmtsLayer>
                    <name>states</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers/states.xml" type="application/xml"/>
                  </wmtsLayer>
                </wmtsLayers>
              application/json: |
                {"wmtsLayers":{"wmtsLayer":[{"name":"dem","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmtsstores\/altgs\/wmtslayers\/dem.json"},{"name":"states","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/cite\/wmtsstores\/altgs\/wmtslayers\/states.json"}]}}
              application/xml (list=available): |
                <list>
                  <wmtsLayerName>ne:basemap</wmtsLayerName>
                  <wmtsLayerName>ne:ne1</wmtsLayerName>
                  <wmtsLayerName>ne:boundary_lines_land</wmtsLayerName>
                  <wmtsLayerName>ne:states_provinces_lines</wmtsLayerName>
                  <wmtsLayerName>ne:populated_places</wmtsLayerName>
                  <wmtsLayerName>opengeo:countries</wmtsLayerName>
                  <wmtsLayerName>usgs:dem</wmtsLayerName>
                  <wmtsLayerName>ne:ocean</wmtsLayerName>
                  <wmtsLayerName>ne:roads</wmtsLayerName>
                  <wmtsLayerName>usa:states</wmtsLayerName>
                  <wmtsLayerName>ne:states_provinces_shp</wmtsLayerName>
                  <wmtsLayerName>ne:urban_areas</wmsLayerName>
                </list>
              application/json (list=available): |
                {"list":{"string":["ne:basemap","ne:ne1","ne:boundary_lines_land","ne:states_provinces_lines","ne:populated_places","opengeo:countries","usgs:dem","ne:ocean","ne:roads","usa:states","ne:states_provinces_shp","ne:urban_areas"]}}

    post:
      tags:
      - "wmtslayers"
      operationId: postWMTSStoreStoreLayers
      description: Publishes a new WMTS store layer in the given store.
      parameters:
        - name: WMTSStoreLayerBody
          in: body
          description: Body of the WMTS store layer
          required: true
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer
              type: string

    put:
      tags:
      - "wmtslayers"
      operationId: putWMTSStoreStoreLayers
      description: Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
      responses:
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmtslayers"
      operationId: deleteWMTSStoreStoreLayers
      description: Invalid. Can only delete an individual layer.
      responses:
        405:
          description: Method Not Allowed


  /workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}:
    parameters:
      - name: workspace
        in: path
        description: Name of the workspace
        required: true
        type: string
      - name: wmtsstore
        in: path
        description: Name of the store
        required: true
        type: string
      - name: wmtslayer
        in: path
        description: Name of the layer
        required: true
        type: string
    get:
      tags:
      - "wmtslayers"
      operationId: getWMTSStoreStoreLayer
      description: Retrieves an individual WMTS store layer for a given store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          description: When set to "true", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are "true" or "false" (default).
          type: boolean
          required: false
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
          examples:
            application/xml: |
              <wmtsLayer>
                <name>dem</name>
                <nativeName>usgs:dem</nativeName>
                <namespace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/cite.xml" type="application/xml"/>
                </namespace>
                <title>Digital elevation model</title>
                <description>USGS GTOPO30 digital elevation model</description>
                <abstract>USGS GTOPO30 digital elevation model</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>GeoTIFF</string>
                  <string>W100N40</string>
                </keywords>
                <nativeCRS>GEOGCS[&quot;WGS 84&quot;, &#xd;
                DATUM[&quot;World Geodetic System 1984&quot;, &#xd;
                  SPHEROID[&quot;WGS 84&quot;, 6378137.0, 298.257223563, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], &#xd;
                  AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], &#xd;
                PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], &#xd;
                UNIT[&quot;degree&quot;, 0.017453292519943295], &#xd;
                AXIS[&quot;Geodetic longitude&quot;, EAST], &#xd;
                AXIS[&quot;Geodetic latitude&quot;, NORTH], &#xd;
                AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</nativeCRS>
                <srs>EPSG:4326</srs>
                <nativeBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-100.0</minx>
                  <maxx>-60.000000000015994</maxx>
                  <miny>-9.999999999980012</miny>
                  <maxy>39.99999999999999</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <projectionPolicy>FORCE_DECLARED</projectionPolicy>
                <enabled>true</enabled>
                <metadata>
                  <entry key="cachingEnabled">false</entry>
                </metadata>
                <store class="wmtsStore">
                  <name>cite:altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.xml" type="application/xml"/>
                </store>
              </wmtsLayer>
            application/json: |
              {"wmtsLayer":{"name":"dem","nativeName":"usgs:dem","namespace":{"name":"cite","href":"http://localhost:8080/geoserver/rest/namespaces/cite.json"},"title":"Digital elevation model","description":"USGS GTOPO30 digital elevation model","abstract":"USGS GTOPO30 digital elevation model","keywords":{"string":["WCS","GeoTIFF","W100N40"]},"nativeCRS":"GEOGCS[\"WGS 84\", \r\n  DATUM[\"World Geodetic System 1984\", \r\n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \r\n    AUTHORITY[\"EPSG\",\"6326\"]], \r\n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \r\n  UNIT[\"degree\", 0.017453292519943295], \r\n  AXIS[\"Geodetic longitude\", EAST], \r\n  AXIS[\"Geodetic latitude\", NORTH], \r\n  AUTHORITY[\"EPSG\",\"4326\"]]","srs":"EPSG:4326","nativeBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"latLonBoundingBox":{"minx":-100,"maxx":-60.000000000015994,"miny":-9.999999999980012,"maxy":39.99999999999999,"crs":"EPSG:4326"},"projectionPolicy":"FORCE_DECLARED","enabled":true,"metadata":{"entry":{"@key":"cachingEnabled","$":"false"}},"store":{"@class":"wmtsStore","name":"cite:altgs","href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.json"}}}

    post:
      tags:
      - "wmtslayers"
      operationId: postWMTSStoreStoreLayer
      description: Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
      responses:
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmtslayers"
      operationId: putWMTSStoreStoreLayer
      description: Edits an existing WMTS store layer.
      parameters:
        - name: WMTSStoreLayerBody
          in: body
          description: Body of the WMTS store layer
          required: true
          schema:
            $ref: "#/definitions/WMTSStoreLayerInfo"
        - name: calculate
          in: query
          description: Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum: [nativebbox,latlonbbox]
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created layer
              type: string

    delete:
      tags:
      - "wmtslayers"
      operationId: deleteWMTSStoreStoreLayer
      description: Deletes a layer from the server.
      parameters:
        - name: recurse
          in: query
          description: Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmtslayer.
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: OK


# Path wmtsstores
  /workspaces/{workspace}/wmtsstores:
    parameters:
      - name: workspace
        in: path
        required: true
        description: Name of the worskpace containing the WMTS store.
        type: string
    get:
      tags:
      - "wmtsstores"
      operationId: getWMTSStores
      summary: Get a list of WMTS stores
      description: Displays a list of all WMTS stores on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/rest/workspaces/{workspace}/wmtsstores.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMTSStoresList"
          examples:
            application/xml: |
              <wmtsStores>
                <wmtsStore>
                  <name>altgs</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.xml" type="application/xml"/>
                </wmtsStore>
              </wmtsStores>

            application/json: |
              {"wmtsStores":
                {"wmtsStore": [
                  {"name":"altgs",
                   "href":"http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs.json"}]}}


    post:
      tags:
      - "wmtsstores"
      operationId: postWMTSStores
      summary: Add a new WMTS store
      description: Adds a new WMTS store entry to the server.
      parameters:
        - $ref: "#/parameters/WMTSStorePost"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            Location:
              description: URL where the newly created store can be found
              type: string
        401:
          description: Unauthorized

    put:
      tags:
      - "wmtsstores"
      operationId: putWMTSStores
      description: Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    delete:
      tags:
      - "wmtsstores"
      operationId: deleteWMTSStores
      description: Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

  /workspaces/{workspace}/wmtsstores/{store}:
    parameters:
      - name: workspace
        in: path
        required: true
        description: Name of the worskpace containing the WMTS store.
        type: string
      - name: store
        in: path
        required: true
        description: Name of the store.
        type: string
    get:
      tags:
      - "wmtsstores"
      operationId: getWMTSStore
      summary: Retrieve a WMTS store in a given workspace
      description: Displays a representation of the WMTS store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/wmtsstores/{store}.xml" for XML). Defaults to HTML representation.
      produces:
        - application/json
        - application/xml
        - text/html
      parameters:
        - name: quietOnNotFound
          in: query
          required: false
          description: When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
          type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WMTSStoreInfo"
          examples:
            application/json: |
              {"wmtsStore": {
                "name":"altgs",
                "type":"WMTS",
                "enabled":true,
                "workspace": {"name":"cite", "href":"http://localhost:8080/geoserver/rest/workspaces/cite.json"},
                "metadata": {"entry":{"@key":"useConnectionPooling","$":"true"}},
                "_default":false,
                "capabilitiesURL":"http://localhost:8081/geoserver/gwc?request=GetCapabilities",
                "maxConnections":6,
                "readTimeout":60,
                "connectTimeout":30,
                "wmtsLayers":"http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers.json"}}

            application/xml: |
              <wmtsStore>
                <name>altgs</name>
                <type>WMTS</type>
                <enabled>true</enabled>
                <workspace>
                  <name>cite</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite.xml" type="application/xml"/>
                </workspace>
                <metadata>
                  <entry key="useConnectionPooling">true</entry>
                </metadata>
                <__default>false</__default>
                <capabilitiesURL>http://localhost:8081/geoserver/gwc?request=GetCapabilities</capabilitiesURL>
                <maxConnections>6</maxConnections>
                <readTimeout>60</readTimeout>
                <connectTimeout>30</connectTimeout>
                <wmtsLayers>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/cite/wmtsstores/altgs/wmtslayers.xml" type="application/xml"/>
                </wmtsLayers>
              </wmtsStore>

        401:
          description: Unauthorized

    post:
      tags:
      - "wmtsstores"
      operationId: postWMTSStore
      description: Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
      responses:
        401:
          description: Unauthorized
        405:
          description: Method Not Allowed

    put:
      tags:
      - "wmtsstores"
      operationId: putWMTSStore
      summary: Modify a single WMTS store.
      description: Modifies a single WMTS store. Use the "Accept:" header to specify format or append an extension to the endpoint (example "{store}.xml" for XML).
      parameters:
        - $ref: "#/parameters/WMTSStorePut"
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: The WMTS store was successfully updated.
        401:
          description: Unauthorized

    delete:
      tags:
      - "wmtsstores"
      operationId: deleteWMTSStore
      summary: Delete WMTS store
      description: Deletes a WMTS store
      parameters:
        - name: recurse
          in: query
          required: false
          description: When set to true all resources contained in the store are also removed.
          default: false
          type: boolean
      responses:
        200:
          description: OK
        401:
          description: Unauthorized


# Path workspaces
  /workspaces:
    get:
      tags:
      - "workspaces"
      operationId: getWorkspaces
      summary: Get a list of workspaces
      description: Displays a list of all workspaces on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces.xml" for XML)
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WorkspacesResponse"
          examples:
            application/xml: |
              <workspaces>
                <workspace>
                  <name>topp</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/topp.xml" type="application/xml"/>
                </workspace>
                <workspace>
                  <name>it.geosolutions</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/it.geosolutions.xml" type="application/xml"/>
                </workspace>
              </workspaces>

            application/json: |
              {
                "workspaces": {
                "workspace": [
                  {
                   "name": "topp",
                   "href": "http://localhost:8080/geoserver/rest/workspaces/topp.json"
                  },
                  {
                    "name": "it.geosolutions",
                    "href": "http://localhost:8080/geoserver/rest/workspaces/it.geosolutions.json"
                  }
                ]
                }
              }
        401:
          description: Unauthorized

    post:
      tags:
      - "workspaces"
      operationId: postWorkspaces
      summary: add a new workspace to GeoServer
      description: Adds a new workspace to the server
      parameters:
        - name: workspaceBody
          description: The layer group body information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Workspace"
        - name: default
          in: query
          description: New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
          required: false
          type: boolean
          default: false
      consumes:
        - application/json
        - application/xml
      produces:
        - text/html
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created workspace can be found
              type: string
        401:
          description: Unable to add workspace as it already exists

    put:
      tags:
      - "workspaces"
      operationId: putWorkspaces
      responses:
        405:
          description: Not permitted

    delete:
      tags:
      - "workspaces"
      operationId: deleteWorkspaces
      responses:
        405:
          description: Not permitted

  /workspaces/{workspaceName}:
    parameters:
      - name: workspaceName
        description: the name of the workspace
        in: path
        required: true
        type: string
    get:
      tags:
      - "workspaces"
      operationId: getWorkspace
      summary: Retrieve a layer group
      description: Retrieves a single workspace definition. Use the "Accept:" header to specify format or
        append an extension to the endpoint (example "/workspaces/{workspace}.xml" for XML).
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WorkspaceResponse"
          examples:
            application/xml: |
              <workspace>
                <name>topp</name>
                <dataStores>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/topp/datastores.xml" type="application/xml"/>
                </dataStores>
                <coverageStores>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/topp/coveragestores.xml" type="application/xml"/>
                </coverageStores>
                <wmsStores>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/topp/wmsstores.xml" type="application/xml"/>
                </wmsStores>
              </workspace>

            application/json: |
              {
              "workspace": {
                "name": "topp",
                "dataStores": "http://localhost:8080/geoserver/rest/workspaces/topp/datastores.json",
                "coverageStores": "http://localhost:8080/geoserver/rest/workspaces/topp/coveragestores.json",
                "wmsStores": "http://localhost:8080/geoserver/rest/workspaces/topp/wmsstores.json"
              }
              }
        404:
          description: workspace does not exist
    put:
      tags:
      - "workspaces"
      summary: Update a workspace
      description: takes the body of the post and modifies the workspace from it.
      operationId: putWorkspace
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: Modified
        403:
          description: Forbidden to change the name of the workspace
        404:
          description: Workspace not found
      parameters:
        - name: workspaceBody
          description: The layer group body information to upload.
          in: body
          required: true
          schema:
            $ref: "#/definitions/Workspace"
    post:
      tags:
      - "workspaces"
      operationId: postWorkspace
      responses:
        405:
          description: Forbidden to post to an existing workspace (use PUT)

    delete:
      tags:
      - "workspaces"
      operationId: deleteWorkspace
      parameters:
        - name: recurse
          in: query
          description: delete workspace contents (default false)
          required: false
          type: boolean

      responses:
        200:
          description: Success workspace deleted
        404:
          description: Workspace doesn't exist
        405:
          description: Can't delete default workspace
        403:
          description: Workspace or related Namespace is not empty (and recurse not true)


# Path usergroup
  /usergroup/users/:
    get:
      tags:
      - "usergroup"
      operationId: usersDefaultGet
      summary: Query all users
      description: Query all users in the default user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Users"
    post:
      tags:
      - "usergroup"
      operationId: usersDefaultPost
      summary: Add a new user
      description: Add a new user to the default user/group service
      parameters:
        - name: usersDefaultPostBody
          description: the new user's details
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      consumes:
        - application/json
        - application/xml
      responses:
        201:
          description: Created
          headers:
            ID:
              description: ID of the newly created user
              type: string
  /usergroup/service/{serviceName}/users/:
    parameters:
      - name: serviceName
        description: the name of the user/group service
        in: path
        required: true
        type: string
    get:
      tags:
      - "usergroup"
      operationId: usersGet
      summary: Query all users
      description: Query all users in a particular user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Users"
    post:
      tags:
      - "usergroup"
      operationId: usersPost
      summary: Add a new user
      description: Add a new user to a particular user/group service.
      consumes:
        - application/json
        - application/xml
      parameters:
        - name: usersPostBody
          description: the new user's details
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Created
          headers:
            ID:
              description: ID of the newly created user
              type: string
  /usergroup/users/{user}:
    parameters:
      - name: user
        description: the name of the user
        in: path
        required: true
        type: string
    get:
      tags:
      - "usergroup"
      operationId: userDefaultGet
      summary: Query a user
      description: Query a user in the default user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
    post:
      tags:
      - "usergroup"
      operationId: userDefaultPost
      summary: Modify a user
      description: Modify a user in the default user/group service, unspecified fields remain unchanged.
      consumes:
        - application/json
        - application/xml
      parameters:
        - name: userDefaultPostBody
          description: the new user's details
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
    delete:
      tags:
      - "usergroup"
      operationId: userDefaultDelete
      summary: Delete a user
      description: Delete a user in the default user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
  /usergroup/service/{serviceName}/users/{user}:
    parameters:
      - name: serviceName
        description: the name of the user/group service
        in: path
        required: true
        type: string
      - name: user
        description: the name of the user
        in: path
        required: true
        type: string
    get:
      tags:
      - "usergroup"
      operationId: userGet
      summary: Query a user
      description: Query a user in a particular user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"

    post:
      tags:
      - "usergroup"
      operationId: userPost
      summary: Modify a user
      description: Modify a user in a particular user/group service, unspecified fields remain unchanged.
      consumes:
        - application/json
        - application/xml
      parameters:
        - name: userPostBody
          description: the new user's details
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
    delete:
      tags:
      - "usergroup"
      operationId: userDelete
      summary: Delete a user
      description: Delete a user in a particular user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK

  /usergroup/groups/:
    get:
      tags:
      - "usergroup"
      operationId: groupsDefaultGet
      summary: Query all groups
      description: Query all groups in the default user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Groups"
  /usergroup/service/{serviceName}/groups/:
    parameters:
      - name: serviceName
        description: the name of the group group service
        in: path
        required: true
        type: string
    get:
      tags:
      - "usergroup"
      operationId: groupsGet
      summary: Query all groups
      description: Query all groups in a particular user/group service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Groups"
  /usergroup/groups/{group}:
    parameters:
      - name: group
        description: the name of the group
        in: path
        required: true
        type: string
    post:
      tags:
      - "usergroup"
      operationId: groupDefaultPost
      summary: Add a group
      description: Add a group in the default user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
    delete:
      tags:
      - "usergroup"
      operationId: groupDefaultDelete
      summary: Delete a group
      description: Delete a group in the default user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
  /usergroup/service/{serviceName}/groups/{group}:
    parameters:
      - name: serviceName
        description: the name of the user/group service
        in: path
        required: true
        type: string
      - name: group
        description: the name of the group
        in: path
        required: true
        type: string
    post:
      tags:
      - "usergroup"
      operationId: groupPost
      summary: Add a group
      description: Add a group in a particular user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
    delete:
      tags:
      - "usergroup"
      operationId: groupDelete
      summary: Delete a group
      description: Delete a group in a particular user/group service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK


# Path roles
  /roles/roles/:
    get:
      tags:
      - "roles"
      operationId: rolesDefaultGet
      summary: Query all roles
      description: Query all roles in the default role service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Roles"
  /roles/service/{serviceName}/roles/:
    parameters:
      - name: serviceName
        description: the name of the role role service
        in: path
        required: true
        type: string
    get:
      tags:
      - "roles"
      operationId: rolesGet
      summary: Query all roles
      description: Query all roles in a particular role service.
      produces:
        - application/json
        - application/xml
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Roles"
  /roles/roles/{role}:
    parameters:
      - name: role
        description: the name of the role
        in: path
        required: true
        type: string
    post:
      tags:
      - "roles"
      operationId: roleDefaultPost
      summary: Add a role
      description: Add a role in the default role service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
    delete:
      tags:
      - "roles"
      operationId: roleDefaultDelete
      summary: Delete a role
      description: Delete a role in the default role service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
  /roles/service/{serviceName}/roles/{role}:
    parameters:
      - name: serviceName
        description: the name of the role service
        in: path
        required: true
        type: string
      - name: role
        description: the name of the role
        in: path
        required: true
        type: string
    post:
      tags:
      - "roles"
      operationId: rolePost
      summary: Add a role
      description: Add a role in a particular role service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK
    delete:
      tags:
      - "roles"
      operationId: roleDelete
      summary: Delete a role
      description: Delete a role in a particular role service.
      consumes:
        - application/json
        - application/xml
      responses:
        200:
          description: OK















# ------------------------------
# PARAMETERS
# ------------------------------
parameters:

# Parameters datastores
  dataStorePost:
    name: dataStoreBody
    description: |
      The data store body information to upload.

      The contents of the connection parameters will differ depending on the type of data store being added.

      - GeoPackage

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <database>file:///path/to/nyc.gpkg</database>
              <dbtype>geopkg</dbtype>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                  {"@key":"dbtype","$":"geopkg"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | database | Database | user | File | True | ` ` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | dbtype | Type | program | String | True | `geopkg` |
        | passwd | password used to login | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | user | user name to login as | user | String | False | ` ` |

      - PostGIS

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <host>localhost</host>
              <port>5432</port>
              <database>nyc</database>
              <user>bob</user>
              <passwd>postgres</passwd>
              <dbtype>postgis</dbtype>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"host","$":"localhost"},
                  {"@key":"port","$":"5432"},
                  {"@key":"database","$":"nyc"},
                  {"@key":"user","$":"bob"},
                  {"@key":"passwd","$":"postgres"},
                  {"@key":"dbtype","$":"postgis"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | port | Port | user | Integer | True | `5432` |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
        | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
        | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
        | dbtype | Type | program | String | True | `postgis` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | passwd | password used to login | user | String | False | ` ` |
        | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
        | host | Host | user | String | True | `localhost` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
        | database | Database | user | String | False | ` ` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | schema | Schema | user | String | False | `public` |
        | user | user name to login as | user | String | True | ` ` |

      - Shapefile

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <url>file:/path/to/nyc.shp</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/nyc.shp"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

      - Directory of spatial files (shapefiles)

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <url>file:/path/to/directory</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/directory"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


      - Web Feature Service

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
        | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
        | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
        | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
        | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
        | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
        | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
        | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
        | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
        | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
        | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
        | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
        | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
        | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
        | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
        | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
        | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
        | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
        | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
        | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |

    in: body
    required: true
    schema:
      $ref: "#/definitions/datastore"
  dataStorePut:
    name: dataStoreBody
    description: |
      The updated data store definition.
      For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,
      so if you change it all preexisting connection parameters will be overwritten.

      The contents of the connection parameters will differ depending on the type of data store being added.

      - GeoPackage

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <database>file:///path/to/nyc.gpkg</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | database | Database | user | File | True | ` ` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | dbtype | Type | program | String | True | `geopkg` |
        | passwd | password used to login | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | user | user name to login as | user | String | False | ` ` |

      - PostGIS

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <host>localhost</host>
              <port>5432</port>
              <database>nyc</database>
              <user>bob</user>
              <passwd>postgres</passwd>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"host","$":"localhost"},
                  {"@key":"port","$":"5432"},
                  {"@key":"database","$":"nyc"},
                  {"@key":"user","$":"bob"},
                  {"@key":"passwd","$":"postgres"},
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | port | Port | user | Integer | True | `5432` |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
        | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
        | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
        | dbtype | Type | program | String | True | `postgis` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | passwd | password used to login | user | String | False | ` ` |
        | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
        | host | Host | user | String | True | `localhost` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
        | database | Database | user | String | False | ` ` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | schema | Schema | user | String | False | `public` |
        | user | user name to login as | user | String | True | ` ` |

      - Shapefile

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <url>file:/path/to/nyc.shp</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/nyc.shp"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

      - Directory of spatial files (shapefiles)

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <url>file:/path/to/directory</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/directory"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


      - Web Feature Service

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
        | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
        | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
        | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
        | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
        | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
        | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
        | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
        | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
        | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
        | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
        | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
        | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
        | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
        | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
        | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
        | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
        | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
        | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
        | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |

    in: body
    required: true
    schema:
      $ref: "#/definitions/datastore"


# Parameters coveragestores
  CoverageStorePost:
    name: coverageStoreBody
    description: |
      The coverage store body information to upload.

      Examples:
      - application/xml:

        ```
        <coverageStore>
          <name>nyc</name>
          <url>file:/path/to/file.tiff</url>
        </coverageStore>
        ```

      - application/json:

        ```
        {
          "coverageStore": {
            "name": "nyc",
            "url": "file:/path/to/file.tiff"
          }
        }
        ```


    in: body
    required: true
    schema:
      $ref: "#/definitions/CoverageStoreInfo"
  CoverageStorePut:
    name: coverageStoreBody
    description: |
      The coverage store body information to upload.
      For a PUT, only values which should be changed need to be included.

      Examples:
      - application/xml:

        ```
        <coverageStore>
          <description>A coverage store</description>
          <enabled>true</enabled>
          <__default>true</__default>
          <url>file:/path/to/file.tiff</url>
        </coverageStore>
        ```

      - application/json:

        ```
        {
          "coverageStore": {
            "description": "A coverage store",
            "enabled": "true",
            "_default": "true",
            "url": "file:/path/to/file.tiff"
          }
        }
        ```
    in: body
    required: true
    schema:
      $ref: "#/definitions/CoverageStoreInfo"


# Parameters security
  Rule:
    name: rule
    in: path
    required: true
    type: string
    description: |
      The specified rule, as the last part in the URI, e.g. /security/acl/layers/\*.\*.r


# Parameters styles
  StyleInfoPost:
    name: styleBody
    description: >

      The style body of a request
      JSON or XML style uploads follow the schema. For example:

        - application/xml:

          ```
          <style>
            <name>roads_style</name>
            <filename>roads.sld</filename>
          </style>
          ```

        - application/json:

          ```
          {
            "style": {
              "name": "roads_style",
              "filename": "roads.sld"
            }
          }
          ```

      Otherwise, the style body is an actual style:

        - application/zip:

          ```
          <ZIP file containing SLD and icons>
          ```

        - application/vnd.ogc.sld+xml:

          ```
          <?xml version="1.0" encoding="UTF-8"?>
          <StyledLayerDescriptor version="1.0.0"
           xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
           xmlns="http://www.opengis.net/sld"
           xmlns:ogc="http://www.opengis.net/ogc"
           xmlns:xlink="http://www.w3.org/1999/xlink"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <!-- a Named Layer is the basic building block of an SLD document -->
            <NamedLayer>
              <Name>default_line</Name>
              <UserStyle>
              <!-- Styles can have names, titles and abstracts -->
                <Title>Default Line</Title>
                <Abstract>A sample style that draws a line</Abstract>
                <!-- FeatureTypeStyles describe how to render different features -->
                <!-- A FeatureTypeStyle for rendering lines -->
                <FeatureTypeStyle>
                  <Rule>
                    <Name>rule1</Name>
                    <Title>Blue Line</Title>
                    <Abstract>A solid blue line with a 1 pixel width</Abstract>
                    <LineSymbolizer>
                      <Stroke>
                        <CssParameter name="stroke">#0000FF</CssParameter>
                      </Stroke>
                    </LineSymbolizer>
                  </Rule>
                </FeatureTypeStyle>
              </UserStyle>
            </NamedLayer>
          </StyledLayerDescriptor>
          ```
    in: body
    required: true
    schema:
      $ref: "#/definitions/StyleInfoPost"
  StyleInfoPut:
    name: styleBody
    description: >

      The style body of a request.
      For a PUT, only values which should be changed need to be included.

      JSON or XML style uploads follow the schema, and alter the style configuration. For example:

        - application/xml:

          ```
          <style>
            <name>roads_style</name>
            <languageVersion>
              <version>1.0.0</version>
            </languageVersion>
            <filename>roads.sld</filename>
            <legend>
              <width>32</width>
              <height>32</height>
              <format>image/png; charset=UTF-8</format>
              <onlineResource>legend.png</onlineResource>
            </legend>
          </style>
          ```

        - application/json:

          ```
          {
            "style": {
              "name": "roads_style",
              "languageVersion": {
                "version": "1.0.0"
              },
              "filename": "roads.sld",
              "legend": {
                "format": "image/png; charset=UTF-8",
                "height": 32,
                "width": 32,
                "onlineResource": "grass_fill.png"
              }
            }
          }
          ```

      Otherwise, the style body is an actual style:

        - application/zip:

            ```
            <ZIP file containing SLD and icons>
            ```

        - application/vnd.ogc.sld+xml:

          ```
          <?xml version="1.0" encoding="UTF-8"?>
          <StyledLayerDescriptor version="1.0.0"
           xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
           xmlns="http://www.opengis.net/sld"
           xmlns:ogc="http://www.opengis.net/ogc"
           xmlns:xlink="http://www.w3.org/1999/xlink"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <!-- a Named Layer is the basic building block of an SLD document -->
            <NamedLayer>
              <Name>default_line</Name>
              <UserStyle>
              <!-- Styles can have names, titles and abstracts -->
                <Title>Default Line</Title>
                <Abstract>A sample style that draws a line</Abstract>
                <!-- FeatureTypeStyles describe how to render different features -->
                <!-- A FeatureTypeStyle for rendering lines -->
                <FeatureTypeStyle>
                  <Rule>
                    <Name>rule1</Name>
                    <Title>Blue Line</Title>
                    <Abstract>A solid blue line with a 1 pixel width</Abstract>
                    <LineSymbolizer>
                      <Stroke>
                        <CssParameter name="stroke">#0000FF</CssParameter>
                      </Stroke>
                    </LineSymbolizer>
                  </Rule>
                </FeatureTypeStyle>
              </UserStyle>
            </NamedLayer>
          </StyledLayerDescriptor>
          ```
    in: body
    required: true
    schema:
      $ref: "#/definitions/StyleInfoPost"


# Parameter templates
  Workspace:
    name: workspace
    in: path
    required: true
    type: string
    description: The workspace name
  Store:
    name: store
    in: path
    required: true
    type: string
    description: The store name
  Template:
    name: template
    in: path
    required: true
    type: string
    description: The template name
  TemplateBody:
    name: template
    in: body
    required: true
    description: The template content to upload
    schema:
      type: string


# Parameters wmsstores
  WMSStorePost:
    name: WMSStoreBody
    description: |
      WMS store body information to upload.

      Examples:
      - application/xml:

        ```
        <wmsStore>
          <name>remote</name>
          <capabilitiesUrl>http://demo.geoserver.org/geoserver/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities</capabilitiesUrl>
        </wmsStore>
        ```

      - application/json:

        ```
        {
          "wmsStore": {
            "name": "remote",
            "capabilitiesUrl": "http://demo.geoserver.org/geoserver/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities"
          }
        }
        ```


    in: body
    required: true
    schema:
      $ref: "#/definitions/WMSStoreInfo"
  WMSStorePut:
    name: WMSStoreBody
    description: |
      WMS store body information to upload.
      For a PUT, only values which should be changed need to be included.

      Examples:
      - application/xml:

        ```
        <wmsStore>
          <description>A wms store</description>
          <enabled>true</enabled>
          <__default>true</__default>
          <capabilitiesUrl>http://demo.geoserver.org/geoserver/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities</capabilitiesUrl>
          <user>admin</user>
          <password>geoserver</password>
          <maxConnections>6</maxConnections>
          <readTimeout>60</readTimeout>
          <connectTimeout>30</connectTimeout>
        </wmsStore>
        ```

      - application/json:

        ```
        {
          "wmsStore": {
            "description": "A wms store",
            "enabled": "true",
            "_default": "true",
            "capabilitiesUrl": "http://demo.geoserver.org/geoserver/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities",
            "user": "admin",
            "password": "geoserver",
            "maxConnections": "6",
            "readTimeout": "60",
            "connectTimeout": "30"
          }
        }
        ```
    in: body
    required: true
    schema:
      $ref: "#/definitions/WMSStoreInfo"


# Parameters wmtsstores
  WMTSStorePost:
    name: WMTSStoreBody
    description: |
      WMTS store body information to upload.

      Examples:
      - application/xml:

        ```
        <wmtsStore>
          <name>remote</name>
          <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>
        </wmtsStore>
        ```

      - application/json:

        ```
        {
          "wmtsStore": {
            "name": "remote",
            "capabilitiesUrl": "http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities"
          }
        }
        ```


    in: body
    required: true
    schema:
      $ref: "#/definitions/WMTSStoreInfo"
  WMTSStorePut:
    name: WMTSStoreBody
    description: |
      WMTS store body information to upload.
      For a PUT, only values which should be changed need to be included.

      Examples:
      - application/xml:

        ```
        <wmtsStore>
          <description>A wmts store</description>
          <enabled>true</enabled>
          <__default>true</__default>
          <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>
          <user>admin</user>
          <password>geoserver</password>
          <maxConnections>6</maxConnections>
          <readTimeout>60</readTimeout>
          <connectTimeout>30</connectTimeout>
        </wmtsStore>
        ```

      - application/json:

        ```
        {
          "wmtsStore": {
            "description": "A wmts store",
            "enabled": "true",
            "_default": "true",
            "capabilitiesUrl": "http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities",
            "user": "admin",
            "password": "geoserver",
            "maxConnections": "6",
            "readTimeout": "60",
            "connectTimeout": "30"
          }
        }
        ```
    in: body
    required: true
    schema:
      $ref: "#/definitions/WMTSStoreInfo"













# ------------------------------
# DEFINITIONS
# ------------------------------

# Definitions manifests
definitions:
  Manifest:
    type: object
    description:  Details on loaded JARs.
    properties:
      about:
        type: object
        properties:
          resource:
            type: array
            description: Contains key/value pairs for the resource (the resource name is found in the name XML attribute and @name JSON property).
            items:
              type: object
              properties:
                '@name':
                  type: string
                  description:  The name of the resource.
              additionalProperties: true

  Status:
    type: object
    description: Details of installed and configured modules. Status details always include human readable name, and module name. Optional details include version, availability, status message, and links to documentation.
    properties:
      about:
        type: object
        properties:
          status:
            type: array
            items:
              type: object
              properties:
                module:
                  type: string
                  description: |
                    Module identifier based on artifact bundle. For example, gs-main, gs-oracle.
                name:
                  type: string
                  description:  |
                    Human readable name (from GeoServer documentation), or as defined in the extension pom.xml, ie. <name>ArcSDE DataStore Extensions</name>
                component:
                  type: string
                  description: |
                    Optional component identifier within module. For example, rendering-engine.
                version:
                  type: string
                  description: |
                    Human readable version, ie. for geotools it would be 15-SNAPSHOT
                message:
                  type: string
                  description: |
                    Optional status message such as what Java rendering engine is in use, or the library path if the module/driver is unavailable
                isEnabled:
                  type: boolean
                  description: |
                    Returns whether the module is enabled in the current GeoServer configuration.
                isAvailable:
                  type: boolean
                  description: |
                    Returns whether the module is available to GeoServer
  CoverageStoreInfo:
    type: object
    required: [ name, type ]
    example: |
        <coverageStore>
          <name>arcGridSample</name>
          <description>Sample ASCII GRID coverage of Global rainfall.</description>
          <type>ArcGrid</type>
          <enabled>true</enabled>
          <workspace>
            <name>nurc</name>
            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/nurc.xml" type="application/xml"/>
          </workspace>
          <__default>false</__default>
          <url>file:coverages/arc_sample/precip30min.asc</url>
          <coverages>
            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/nurc/coveragestores/arcGridSample/coverages.xml" type="application/xml"/>
          </coverages>
        </coverageStore>

    properties:
      name:
        type: string
        description: Name of the coverage store
      description:
        type: string
        description: Description of the coverage store
      type:
        type: string
        description: Type of coverage store
      enabled:
        type: boolean
        description: Whether the store is enabled, or not
      workspace:
        type: object
        description: The workspace containing the store
        required: [name]
        properties:
          name:
            type: string
            description: Name of the workspace
          link:
            type: string
            description: A link to the workspace representation
      __default__:
          type: boolean
          description: Whether the store is the default store of the workspace
      url:
        type: string
        description: Location of the raster data source (often, but not necessarily, a file). Can be relative to the data directory.
      coverages:
        type: object
        properties:
          link:
            type: string
            description: A link to the list of coverages contained in this store
  CoverageStoreListItem:
    type: object
    properties:
      name:
        type: string
        description: Name of coverage store
      href:
        type: string
        description: URL to coverage store definition
  CoverageStoreList:
    type: array
    items:
      $ref: '#/definitions/CoverageStoreListItem'


# Definitions datastores
  dataStoreResponse:
    title: datastores
    type: array
    items:
      title: datastore
      type: object
      properties:
        name:
          type: string
          description: Name of data store
        link:
          type: string
          description: URL to data store definition

  datastore:
    title: datastore
    type: object
    properties:
      name:
        type: string
        description: Name of data store
      description:
        type: string
        description: Description of data store
      enabled:
        type: boolean
        description: Whether or not the data store is enabled
      workspace:
        title: workspace
        type: object
        properties:
          name:
            type: string
            description: Name of workspace
          link:
            type: string
            description: URL to workspace definition
      connectionParameters:
        type: array
        items:
          title: entry
          description: connection parameter key-value pair
          type: object
          properties:
            key:
              type: string
              description: Connection parameter key
            value:
              type: string
              description: Connection parameter value
      __default:
        type: boolean
        description: Whether or not the data store is the default data store
      featureTypes:
        type: array
        items:
          type: string
          description: URL to featuretype definition


# Definitions coverages
  CoverageInfo:
    type: object
    properties:
      name:
        type: string
        description: The name of the resource. This name corresponds to the "published" name of the resource.
      nativeName:
        type: string
        description: The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...
      namespace:
        type: object
        description: The namespace uri of the resource. Example would be an application schema namespace uri.
        properties:
          name:
            type: string
            description: The name of the namespace.
          href:
            type: string
            readOnly: true
            description: URL to the namespace.
      title:
        type: string
        description: The title of the resource. This is usually something that is meant to be displayed in a user interface.
      abstract:
        type: string
        description: A description of the resource. This is usually something that is meant to be displayed in a user interface.
      defaultInterpolationMethod:
        type: string
        description: Default resampling (interpolation) method that will be used for this coverage.
      keywords:
        type: object
        description: A collection of keywords associated with the resource.
        properties:
          string:
            type: array
            description: List of keyword values with internationalization and vocabulary
            items:
              type: string
              description: A single keyword value
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                metadataType:
                  type: string
                  description: The type of metadata, e.g. "FGDC"
                content:
                  type: string
                  description: The link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of data links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                content:
                  type: string
                  description: The link URL
      nativeCRS:
        type: string
        description: The native coordinate reference system object of the resource.
      srs:
        type: string
        description: Returns the identifier of coordinate reference system of the resource.
      nativeBoundingBox:
        type: object
        description: Returns the bounds of the resource in its declared CRS.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      latLonBoundingBox:
        type: object
        description: The bounds of the resource in lat / lon. This value represents a "fixed value" and is not calulated on the underlying dataset.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      metadata:
        type: array
        description:  A list of key/value metadata pairs.
        items:
          $ref: "#/definitions/CoverageMetadataEntry"
      store:
        type: object
        description: The store the resource is a part of.
        properties:
          '@class':
            type: string
            description: The class of the store
          name:
            type: string
            description: The name of the store
          href:
            type: string
            description: URL to the data store
      cqlFilter:
        type: string
        description: The ECQL string used as default feature type filter
      maxFeatures:
        type: integer
        description: A cap on the number of features that a query against this type can return.
      numDecimals:
        type: number
        description: The number of decimal places to use when encoding floating point numbers from data of this feature type.
      responseSRS:
        type: object
        description: The srs's that the WFS service will advertise in the capabilities document for this feature type (overriding the global WFS settings).
        properties:
          string:
            type: string
            description: The value of the srs
      overridingServiceSRS:
        type: boolean
        description: True if this feature type info is overriding the WFS global SRS list
      skipNumberMatched:
        type: boolean
        description: True if this feature type info is overriding the counting of numberMatched.
      circularArcPresent:
        type: boolean
      linearizationTolerance:
        type: number
        description: Tolerance used to linearize this feature type, as an absolute value expressed in the geometries own CRS
      attributes:
        type: object
        description: Wrapper for the derived set of attributes for the feature type.
        properties:
          attribute:
            type: array
            description: The derived set of attributes for the feature type.
            items:
              type: object
              description: A single attribute
              properties:
                name:
                  type: string
                  description: "Name of the attribute."
                minOccurs:
                  type: integer
                  description: "Minimum number of occurrences of the attribute."
                maxOccurs:
                  type: integer
                  description: "Maximum number of occurrences of the attribute."
                nillable:
                  type: boolean
                  description: "Flag indicating if null is an acceptable value for the attribute."
                binding:
                  type: string
                  description: "The java class that values of this attribute are bound to."
                length:
                  type: integer
                  description: Returns the length of this attribute. It's usually non null only for string and numeric types"
      dimensions:
        type: object
        description: raster dimensions
        properties:
          coverageDimension:
            type: array
            items:
              type: object
              description: raster dimenion
              properties:
                description:
                  type: string
                  description: description of the raster dimension
                name:
                  type: string
                  description: name of the dimension
                range:
                  type: object
                  description: dimension range
                  properties:
                    max:
                      type: number
                      description: max range value
                    min:
                      type: number
                      description: min range value
      grid:
        type: object
        description: contains information about how to translate from the raster plan to a coordinate reference system
        properties:
          dimension:
            type: string
            description: cardinality of the raster plan
          crs:
            type: string
            description: target coordinate system
          range:
            type: object
            description: range of the raster plan
            properties:
              high:
                type: string
                description: max range values
              low:
                type: string
                description: min range values
          transform:
            type: object
            description: transformation definition
            properties:
              scaleX:
                type: number
                description: scale value to apply in X
              scaleY:
                type: number
                description: scale value to apply in Y
              shearX:
                type: number
                description: shear value to apply in X
              shearY:
                type: number
                description: shear value to apply in Y
              translateX:
                type: number
                description: translation to apply in X
              translatexY:
                type: number
                description: translation to apply in Y
          interpolationMethods:
            type: object
            description: available interporlations methods for this coverage
            properties:
              string:
                type: array
                items:
                  type: string
                  description: name of the interpolation method

    example: {
                 "coverage": {
                     "abstract": "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information",
                     "defaultInterpolationMethod": "nearest neighbor",
                     "description": "Generated from sfdem",
                     "dimensions": {
                         "coverageDimension": [
                             {
                                 "description": "GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]",
                                 "name": "GRAY_INDEX",
                                 "range": {
                                     "max": -9.999999933815813e+36,
                                     "min": -9.999999933815813e+36
                                 }
                             }
                         ]
                     },
                     "enabled": true,
                     "grid": {
                         "@dimension": "2",
                         "crs": "EPSG:26713",
                         "range": {
                             "high": "634 477",
                             "low": "0 0"
                         },
                         "transform": {
                             "scaleX": 30,
                             "scaleY": -30,
                             "shearX": 0,
                             "shearY": 0,
                             "translateX": 589995,
                             "translateY": 4927995
                         }
                     },
                     "interpolationMethods": {
                         "string": [
                             "nearest neighbor",
                             "bilinear",
                             "bicubic"
                         ]
                     },
                     "keywords": {
                         "string": [
                             "WCS",
                             "sfdem",
                             "sfdem",
                             "type\\@language=fr\\;\\@vocabulary=test\\;"
                         ]
                     },
                     "latLonBoundingBox": {
                         "crs": "EPSG:4326",
                         "maxx": -103.62940739432703,
                         "maxy": 44.5016011535299,
                         "minx": -103.87108701853181,
                         "miny": 44.370187074132616
                     },
                     "metadata": {
                         "entry": [
                             {
                                 "@key": "elevation",
                                 "dimensionInfo": {
                                     "enabled": false
                                 }
                             },
                             {
                                 "$": "10",
                                 "@key": "cacheAgeMax"
                             },
                             {
                                 "@key": "time",
                                 "dimensionInfo": {
                                     "defaultValue": "",
                                     "enabled": false
                                 }
                             },
                             {
                                 "$": "true",
                                 "@key": "cachingEnabled"
                             },
                             {
                                 "$": "sfdem_sfdem",
                                 "@key": "dirName"
                             }
                         ]
                     },
                     "name": "sfdem",
                     "namespace": {
                         "href": "http://localhost:8075/geoserver/restng/namespaces/sf.json",
                         "name": "sf"
                     },
                     "nativeBoundingBox": {
                         "crs": {
                             "$": "EPSG:26713",
                             "@class": "projected"
                         },
                         "maxx": 609000,
                         "maxy": 4928010,
                         "minx": 589980,
                         "miny": 4913700
                     },
                     "nativeCRS": {
                         "$": "PROJCS[\"NAD27 / UTM zone 13N\", \n  GEOGCS[\"NAD27\", \n    DATUM[\"North American Datum 1927\", \n      SPHEROID[\"Clarke 1866\", 6378206.4, 294.9786982138982, AUTHORITY[\"EPSG\",\"7008\"]], \n      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], \n      AUTHORITY[\"EPSG\",\"6267\"]], \n    PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n    UNIT[\"degree\", 0.017453292519943295], \n    AXIS[\"Geodetic longitude\", EAST], \n    AXIS[\"Geodetic latitude\", NORTH], \n    AUTHORITY[\"EPSG\",\"4267\"]], \n  PROJECTION[\"Transverse_Mercator\", AUTHORITY[\"EPSG\",\"9807\"]], \n  PARAMETER[\"central_meridian\", -105.0], \n  PARAMETER[\"latitude_of_origin\", 0.0], \n  PARAMETER[\"scale_factor\", 0.9996], \n  PARAMETER[\"false_easting\", 500000.0], \n  PARAMETER[\"false_northing\", 0.0], \n  UNIT[\"m\", 1.0], \n  AXIS[\"Easting\", EAST], \n  AXIS[\"Northing\", NORTH], \n  AUTHORITY[\"EPSG\",\"26713\"]]",
                         "@class": "projected"
                     },
                     "nativeFormat": "GeoTIFF",
                     "nativeName": "sfdem",
                     "requestSRS": {
                         "string": [
                             "EPSG:26713"
                         ]
                     },
                     "responseSRS": {
                         "string": [
                             "EPSG:26713"
                         ]
                     },
                     "srs": "EPSG:26713",
                     "store": {
                         "@class": "coverageStore",
                         "href": "http://localhost:8075/geoserver/restng/workspaces/sf/coveragestores/sfdem.json",
                         "name": "sf:sfdem"
                     },
                     "supportedFormats": {
                         "string": [
                             "ARCGRID",
                             "IMAGEMOSAIC",
                             "GTOPO30",
                             "GEOTIFF",
                             "GIF",
                             "PNG",
                             "JPEG",
                             "TIFF"
                         ]
                     },
                     "title": "Spearfish elevation"
                 }
             }

  CoverageMetadataEntry:
      type: object
      title: entry
      properties:
        '@key':
          title: key
          type: string
          enum:
          - regionateStrategy
          - regionateFeatureLimit
          - cacheAgeMax
          - cachingEnabled
          - regionateAttribute
          - indexingEnabled
          - dirName
          description: Key used for metadata entry, additional keys are added over time
        '$':
          title: text
          type: string
          description: Text value for provided key Valid text depends on key used. Example  {'@key'='cachingEnabled','$'='true'}.


# Definitions featuretypes
  FeatureTypeInfo:
    type: object
    properties:
      name:
        type: string
        description: The name of the resource. This name corresponds to the "published" name of the resource.
      nativeName:
        type: string
        description: The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...
      namespace:
        type: object
        description: The namespace URI of the resource. Example would be an application schema namespace URI.
        properties:
          name:
            type: string
            description: The name of the namespace.
          href:
            type: string
            readOnly: true
            description: URL to the namespace.
      title:
        type: string
        description: The title of the resource. This is usually something that is meant to be displayed in a user interface.
      abstract:
        type: string
        description: A description of the resource. This is usually something that is meant to be displayed in a user interface.
      keywords:
        type: object
        description: A collection of keywords associated with the resource.
        properties:
          string:
            type: array
            description: List of keyword values with internationalization and vocabulary
            items:
              type: string
              description: A single keyword value
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                metadataType:
                  type: string
                  description: The type of metadata, e.g. "FGDC"
                content:
                  type: string
                  description: The link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of data links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                content:
                  type: string
                  description: The link URL
      nativeCRS:
        type: string
        description: The native coordinate reference system object of the resource.
      srs:
        type: string
        description: Returns the identifier of coordinate reference system of the resource.
      nativeBoundingBox:
        type: object
        description: Returns the bounds of the resource in its declared CRS.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      latLonBoundingBox:
        type: object
        description: The bounds of the resource in lat / lon. This value represents a "fixed value" and is not calculated on the underlying dataset.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      metadata:
        type: array
        description:  A list of key/value metadata pairs.
        items:
          $ref: "#/definitions/FeaturetypeMetadataEntry"
      store:
        type: object
        description: The store the resource is a part of.
        properties:
          '@class':
            type: string
            description: The class of the store
          name:
            type: string
            description: The name of the store
          href:
            type: string
            description: URL to the data store
      cqlFilter:
        type: string
        description: The ECQL string used as default feature type filter
      maxFeatures:
        type: integer
        description: A cap on the number of features that a query against this type can return.
      numDecimals:
        type: number
        description: The number of decimal places to use when encoding floating point numbers from data of this feature type.
      responseSRS:
        type: object
        description: The srs's that the WFS service will advertise in the capabilities document for this feature type (overriding the global WFS settings).
        properties:
          string:
            type: string
            description: The value of the srs
      overridingServiceSRS:
        type: boolean
        description: True if this feature type info is overriding the WFS global SRS list
      skipNumberMatched:
        type: boolean
        description: True if this feature type info is overriding the counting of numberMatched.
      circularArcPresent:
        type: boolean
      linearizationTolerance:
        type: number
        description: Tolerance used to linearize this feature type, as an absolute value expressed in the geometries own CRS
      attributes:
        type: object
        description: Wrapper for the derived set of attributes for the feature type.
        properties:
          attribute:
            type: array
            description: The derived set of attributes for the feature type.
            items:
              type: object
              description: A single attribute
              properties:
                name:
                  type: string
                  description: "Name of the attribute."
                minOccurs:
                  type: integer
                  description: "Minimum number of occurrences of the attribute."
                maxOccurs:
                  type: integer
                  description: "Maximum number of occurrences of the attribute."
                nillable:
                  type: boolean
                  description: "Flag indicating if null is an acceptable value for the attribute."
                binding:
                  type: string
                  description: "The java class that values of this attribute are bound to."
                length:
                  type: integer
                  description: Returns the length of this attribute. It's usually non null only for string and numeric types"

    example: {  "name": "poi",
                "nativeName": "poi",
                "namespace": {
                  "name": "tiger",
                  "href": "http://localhost:8080/geoserver/rest/namespaces/tiger.json"
                },
                "title": "Manhattan (NY) points of interest",
                "abstract": "Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.",
                "keywords": {
                  "string": [
                    "poi",
                    "Manhattan",
                    "DS_poi",
                    "points_of_interest",
                    "sampleKeyword\\@language=ab\\;",
                    "area of effect\\@language=bg\\;\\@vocabulary=technical\\;",
                    "Привет\\@language=ru\\;\\@vocabulary=friendly\\;"
                  ]
                },
                "metadataLinks": {
                  "metadataLink": [
                    {
                      "type": "text/plain",
                      "metadataType": "FGDC",
                      "content": "www.google.com"
                    }
                  ]
                },
                "dataLinks": {
                  "org.geoserver.catalog.impl.DataLinkInfoImpl": [
                    {
                      "type": "text/plain",
                      "content": "http://www.google.com"
                    }
                  ]
                },
                "nativeCRS": "GEOGCS[\"WGS 84\", \n  DATUM[\"World Geodetic System 1984\", \n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \n    AUTHORITY[\"EPSG\",\"6326\"]], \n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Geodetic longitude\", EAST], \n  AXIS[\"Geodetic latitude\", NORTH], \n  AUTHORITY[\"EPSG\",\"4326\"]]",
                "srs": "EPSG:4326",
                "nativeBoundingBox": {
                  "minx": -74.0118315772888,
                  "maxx": -74.00153046439813,
                  "miny": 40.70754683896324,
                  "maxy": 40.719885123828675,
                  "crs": "EPSG:4326"
                },
                "latLonBoundingBox": {
                  "minx": -74.0118315772888,
                  "maxx": -74.00857344353275,
                  "miny": 40.70754683896324,
                  "maxy": 40.711945649065406,
                  "crs": "EPSG:4326"
                },
                "projectionPolicy": "REPROJECT_TO_DECLARED",
                "enabled": true,
                "metadata": {
                  "entry": [
                    {
                      "@key": "kml.regionateStrategy",
                      "$": "external-sorting"
                    },
                    {
                      "@key": "kml.regionateFeatureLimit",
                      "$": "15"
                    },
                    {
                      "@key": "cacheAgeMax",
                      "$": "3000"
                    },
                    {
                      "@key": "cachingEnabled",
                      "$": "true"
                    },
                    {
                      "@key": "kml.regionateAttribute",
                      "$": "NAME"
                    },
                    {
                      "@key": "indexingEnabled",
                      "$": "false"
                    },
                    {
                      "@key": "dirName",
                      "$": "DS_poi_poi"
                    }
                  ]
                },
                "store": {
                  "@class": "dataStore",
                  "name": "tiger:nyc",
                  "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json"
                },
                "cqlFilter": "INCLUDE",
                "maxFeatures": 100,
                "numDecimals": 6,
                "responseSRS": {
                  "string": [
                    4326
                  ]
                },
                "overridingServiceSRS": true,
                "skipNumberMatched": true,
                "circularArcPresent": true,
                "linearizationTolerance": 10,
                "attributes": {
                  "attribute": [
                    {
                      "name": "the_geom",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "com.vividsolutions.jts.geom.Point"
                    },
                    {
                      "name": "NAME",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.lang.String",
                      "length": 6
                    },
                    {
                      "name": "THUMBNAIL",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.lang.String",
                      "length": 20
                    },
                    {
                      "name": "MAINPAGE",
                      "minOccurs": 0,
                      "maxOccurs": 1,
                      "nillable": true,
                      "binding": "java.lang.String",
                      "length": 19
                    }
                  ]
                }
            }

  FeaturetypeMetadataEntry:
      type: object
      title: entry
      properties:
        '@key':
          title: key
          type: string
          enum:
          - regionateStrategy
          - regionateFeatureLimit
          - cacheAgeMax
          - cachingEnabled
          - regionateAttribute
          - indexingEnabled
          - dirName
          description: Key used for metadata entry, additional keys are added over time
        '$':
          title: text
          type: string
          description: Text value for provided key Valid text depends on key used. Example  {'@key'='cachingEnabled','$'='true'}.


# Definitions fonts
  FontListItem:
    type: object
    properties:
      entry:
        type: string
        description: Name of font
  FontList:
    type: array
    items:
      $ref: '#/definitions/FontListItem'


# Definitions layers
  Layers:
    title: layers
    type: object
    properties:
      layers:
        $ref: "#/definitions/LayerReference"

  LayerReference:
    title: layers
    type: object
    properties:
      name:
        type: string
        description: Name of layer
      link:
        type: string
        description: URL to layer definition

  Layer:
    title: layer
    xml:
      name: layer
    type: object
    properties:
      name:
        type: string
        description: Name of the layer
      path:
        type: string
        description: Location of the layer in the WMS capabilities layer tree
      type:
        type: string
        enum:
        - VECTOR
        - RASTER
        - REMOTE
        - WMS
        - GROUP
        description: Type of published layer. Can be VECTOR, RASTER, REMOTE, WMS or GROUP. Must be consistent with resource definition.
      defaultStyle:
        $ref: "#/definitions/StyleReference"
      styles:
        type: object
        description: Avaialble styles for layer publication
        properties:
          '@class':
            type: string
            enum:
            - linked-hash-set
            description: required value linked-hash-set.
          style:
            type: array
            items:
              $ref: "#/definitions/StyleReference"
      resource:
        type: object
        description:  Resource supplying information for layer publication
        properties:
          '@class':
            type: string
            enum:
            - featureType
            default: featureType
            description: required value featureType
          name:
            type: string
            description: Name of resource
          link:
            type: string
            readOnly: true
            description: URL to the resource definition
      opaque:
        type: boolean
        description: Controls layer transparency (whether the layer is opaque or transparent).
      metadata:
        type: array
        items:
          $ref: "#/definitions/LayerMetadataEntry"
      attribution:
        type: object
        description: WMS attribution information to be drawn on each map
        properties:
          title:
            type: string
            description: Human-readable text describing the data provider
          href:
            type: string
            description: URL to data provider
          logoURL:
            type: string
            description: Data provider logo
          logoWidth:
            type: integer
            description: Data provider logo width
          logoHeight:
            type: integer
            description: Data provider logo height
          logoType:
            type: string
            description: Format of data provider logo, example "image/png"
      authorityURLs:
        type: array
        items:
          type: object
          title: AuthorityURL
          properties:
            name:
              type: string
              description: Authory name, describing the industry, national or international origanization responsible for data product standard.
            href:
              type: string
              description: URL to authority organization
      identifiers:
        type: array
        items:
          type: object
          title: Identifier
          properties:
            authority:
              type: string
              description: Authority cited, for details see authorityURLs
            identifier:
              type: string
              description: Work citied, often a data standard provided by
  StyleReference:
      type: object
      title: style
      description: Reference to style definition
      properties:
        name:
          type: string
          description: Name of style
        link:
          type: string
          readOnly: true
          description: URL to the style definition
  LayerMetadataEntry:
      type: object
      title: entry
      properties:
        '@key':
          title: key
          type: string
          enum:
          - buffer
          description: Key used for metadata entry, additional keys are added over time
        '$':
          title: text
          type: string
          description: Text value for provided key Valid text depends on key used. Example  {'@key'='buffer','$'='5'}") or <entry key="buffer">5</entry>


# Definitions monitotring
  RequestList:
    title: requests
    type: array
    items:
      $ref: '#/definitions/Request'

  Request:
    title: request
    type: object
    properties:
      Bbox:
        type: string
        description: Requested bounding box
      BodyAsString:
        type: string
        description: Body of the request (for POST/PUT)
      BodyContentLength:
        type: integer
        description: Request body content lenght
      BodyContentType:
        type: string
        description: Request body content type
      Category:
        type: string
        description: Can be OWS or REST
      EndTime:
        type: string
        description: Request completion time
      ErrorMessage:
        type: string
        description: The error message, in case the request failed, empt otherwise
      Host:
        type: string
        description: Host GeoServer is running on
      HttpMethod:
        type: string
        description: HTTP method of the request (e.g., GET, POST, ...)
      HttpReferer:
        type: string
        description: HTTP referrer, if any
      Id:
        type: string
        description: Request identifier
      InternalHost:
        type: string
        description: Name of the host GeoServer is running on
      Operation:
        type: string
        description: OGC operation, e.g. GetMap, GetFeature (available only for OWS requests)
      OwsVersion:
        type: string
        description: OGC protocol version (e.g., 1.1.0, 1.1.3)
      Path:
        type: string
        description: HTTP request path (e.g. "/topp/wms")
      QueryString:
        type: string
        description: The HTTP request query string
      RemoteAddr:
        type: string
        description: Remote request IP address
      RemoteCity:
        type: string
        description: Remote client city (available only if GeoIP lookup is enabled)
      RemoteCountry:
        type: string
        description: Remote client country (available only if GeoIP lookup is enabled)
      RemoteHost:
        type: string
        description: Remote client  host
      RemoteLat:
        type: string
        description: Remote client latitude (available only if GeoIP lookup is enabled)
      RemoteLon:
        type: string
        description: Remote client longitude (available only if GeoIP lookup is enabled)
      RemoteUser:
        type: string
        description: User issuing the request
      RemoteUserAgent:
        type: string
        description: Remote client user agent
      Resources:
        type: string
        description: Name of the resources (layers, processes, ...) specified as part of the request
      ResourcesList:
        type: string
        description: Name of the resources (layers, processes, ...) specified as part of the request
      ResponseContentType:
        type: string
        description: Content type of the response
      ResponseLength:
        type: integer
        description: Size of the response in bytes
      ResponseStatus:
        type: string
        description: HTTP status of the response
      Service:
        type: string
        description: OGC service in use (available only for OGC requests)
      StartTime:
        type: string
        description: Request start time
      Status:
        type: string
        description: Status of the request (WAITING, RUNNING, CANCELLING, FAILED, FINISHED, CANCELLED, INTERRUPTED)
      SubOperation:
        type: string
        description: The OGC sub operations, for the cases in which it applies (e.g., for WFS-T it can be Insert/Delete/Update)
      TotalTime:
        type: integer
        description: Total request time in milliseconds


# Definitions namespaces
  Namespace:
    title: Namespace
    xml:
      name: namespace
    type: object
    properties:
      prefix:
        type: string
        description: Name/prefix of the namespace
      uri:
        type: string
        description: URI that identifies the namespace

  NamespacesResponse:
    title: Namespaces
    type: object
    properties:
      namespaces:
        $ref: "#/definitions/NamespaceResponse"

  NamespaceResponse:
    title: Namespace Response
    type: object
    properties:
      prefix:
        type: string
        description: Name of namespace
      uri:
        type: string
        description: URI of the namespace
      featureTypes:
        type: string
        description: URL to featureTypes associated with this namespace



# Definitions services/wms|wfs|wcs/settings
  WMSInfo:
    xml:
      name: wms
    type: object
    properties:
      enabled:
        type: boolean
        description: Status of the service
      name:
        type: string
        description: Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
      title:
        type: string
        description: Title of the service
      workspace:
        type: string
        description: Workspace the service is specific or local to. Will not exist if the service is global.
      maintainer:
        type: string
        description: maintainer of the service
      abstrct:
        type: string
        description: description of the service
      accessConstraints:
        type: string
        description: ''
      fees:
        type: string
        description: ''
      versions:
        type: object
        description: The versions of the service that are available.
        properties:
          org.geotools.util.Version:
            type: array
            items:
              type: string
              description: version number
      keywords:
        type: array
        description: Keywords associated with the service.
        items:
          type: string
      citeCompliant:
        type: boolean
        description: Status of service CITE compliance.
      onlineResource:
        type: string
        description: ''
      schemaBaseURL:
        type: string
        description: The base url for the schemas describing the service.
      verbose:
        type: boolean
        description: Flag indicating if the service should be verbose or not.
      metadataLink:
        type: array
        items:
          type: object
          properties:
            "@key":
              type: string
              description: Metadata key
            text:
              type: string
              description: Metadata value
      watermark:
        type: object
        description: Watermarking configuration
        properties:
          enabled:
            type: boolean
            description: Flag indicating if watermarking is enabled
          position:
            type: string
            description: Position of the watermark
            enum:
              - TOP_LEFT
              - TOP_CENTER
              - TOP_RIGHT
              - MID_LEFT
              - MID_CENTER
              - MID_RIGHT
              - BOT_LEFT
              - BOT_CENTER
              - BOT_RIGHT
          transparency:
            type: integer
            description: The transparency of the watermark logo, ranging from 0 to 255
      interpolation:
        type: string
        enum:
          - Nearest
          - Bilinear
          - Bicubic
      getFeatureInfoMimeTypeCheckingEnabled:
        type: boolean
        description: Flag indicating if getFeatureInfo MIME type checking is enabled
      getMapMimeTypeCheckingEnabled:
        type: boolean
        description: Flag indicating if getMap MIME type checking is enabled.
      dynamicStylingDisabled:
        type: boolean
        description: status of dynamic styling (SLD and SLD_BODY params) allowance
      maxBuffer:
        type: integer
        description: Maximum search radius for GetFeatureInfo
      maxRequestMemory:
        type: integer
        description: Max amount of memory, in kilobytes, that each WMS request can allocate (each output format will make a best effort attempt to respect it, but there are no guarantees). 0 indicates no limit.
      maxRenderingTime:
        type: integer
        description: Max time, in seconds, a WMS request is allowed to spend rendering the map. Various output formats will do a best effort to respect it (raster formats, for example, will account just rendering time, but not image encoding time).
      maxRenderingErrors:
        type: integer
        description: Max number of rendering errors that will be tolerated before stating the rendering operation failed by throwing a service exception back to the client
    example: {
      "wms": {
        "enabled": true,
        "name": "WMS"
      }
    }


  WFSInfo:
    type: object
    xml:
      name: wfs
    properties:
      enabled:
        type: boolean
        description: Status of the service
      name:
        type: string
        description: Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
      title:
        type: string
        description: Title of the service
      maintainer:
        type: string
        description: Maintainer of the service
      abstrct:
        type: string
        description: Description of the service
      accessConstraints:
        type: string
        description: Access constraints
      fees:
        type: string
        description: Any fees associated with the service
      versions:
        type: object
        description: The versions of the service that are available.
        properties:
          org.geotools.util.Version:
            type: array
            items:
              type: string
              description: version number
      keywords:
        type: array
        description: Keywords associated with the service.
        items:
          type: string
      metadataLink:
        type: array
        items:
          type: object
          properties:
            "@key":
              type: string
              description: Metadata key
              enum:
              - svgAntiAlias
              - svgRenderer
            text:
              type: string
              description: Metadata value
      citeCompliant:
        type: boolean
        description: Status of service CITE compliance
      onlineResource:
        type: string
        description: URL resource
      schemaBaseURL:
        type: string
        description: Base URL for the schemas describing the service
      verbose:
        type: boolean
        description: Flag indicating if the service should be verbose
      gml:
        type: object
        description: A map of WFS version to GML encoding configuration
        properties:
          entry:
            type: array
            items:
              type: object
              properties:
                version:
                  type: string
                  enum:
                    - 1.0.0
                    - 1.1.0
                    - 2.0.0
                gml:
                  type: object
                  description: Enumeration for srsName style
                  properties:
                    srsNameStyle:
                      type: array
                      items:
                        type: string
                        enum:
                          - NORMAL
                          - XML
                          - URN
                          - URN2
                          - URL
      serviceLevel:
        type: string
        description: Level of service provided by the WFS
        enum:
          - BASIC
          - TRANSACTIONAL
          - COMPLETE
      maxFeatures:
        type: integer
        description: Global cap on the number of features to allow when processing a request
      featureBounding:
        type: boolean
        description: Flag which determines if gml:bounds elements should be encoded at the feature level in GML output
      canonicalSchemaLocation:
        type: boolean
        description: Flag that determines the encoding of the WFS schemaLocation. True if the WFS schemaLocation should refer to the canonical location, false if the WFS schemaLocation should refer to a copy served by GeoServer.
      encodeFeatureMember:
        type: boolean
        description: Flag that determines encoding of featureMember or featureMembers. True if the featureMember should be encoded False if the featureMembers should be encoded.
      hitsIgnoreMaxFeatures:
        type: boolean
        description: Flag that determines if WFS hit requests (counts) will ignore the maximum features limit for this server
    example: {
      "wfs": {
        "enabled": true,
        "name": "WMS"
      }
    }

  WCSInfo:
    type: object
    xml:
      name: wcs
    properties:
      enabled:
        type: boolean
        description: Status of the service
      name:
        type: string
        description: Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
      title:
        type: string
        description: Title of the service
      maintainer:
        type: string
        description: Maintainer of the service
      abstrct:
        type: string
        description: Description of the service
      accessConstraints:
        type: string
        description: Access constraints
      fees:
        type: string
        description: Any fees associated with the service
      versions:
        type: object
        description: The versions of the service that are available.
        properties:
          org.geotools.util.Version:
            type: array
            items:
              type: string
              description: version number
      keywords:
        type: array
        description: Keywords associated with the service.
        items:
          type: string
      metadataLink:
        type: array
        items:
          type: object
          properties:
            "@key":
              type: string
              description: Metadata key
            text:
              type: string
              description: Metadata value
      citeCompliant:
        type: boolean
        description: Status of service CITE compliance
      onlineResource:
        type: string
        description: URL resource
      schemaBaseURL:
        type: string
        description: Base URL for the schemas describing the service
      verbose:
        type: boolean
        description: Flag indicating if the service should be verbose
      gmlPrefixing:
        type: boolean
        description: ""
      latLon:
        type: boolean
        description: ""
      maxInputMemory:
        type: boolean
        description: ""
      maxOutputMemory:
        type: boolean
        description: ""
    example: {
      "wcs": {
        "enabled": true,
        "name": "WMS"
      }
    }

# Definitions resources
  ResourceMetadata:
    type: object
    description: Metadata about a resource
    properties:
      name:
        type: string
        description: The name of the resource, including the extension if applicable.
      parent:
        type: object
        description: The parent resource of this one
        properties:
          path:
            type: string
            description: The full path to the parent resource
          link:
            type: object
            description: A link to the parent resource
            properties:
              href:
                type: string
                description: The link to the resource
              rel:
                type: string
                description: Relationship between the current resource and the linked resource
                enum:
                  - alternate
              type:
                type: string
                description: The mime type returned by the link
      lastModified:
        type: string
        description: The last modified date of the resource
      type:
        type: string
        description: Type of resource.
        enum:
          - resource
          - directory
  ResourceDirectory:
    type: object
    description: Metadata about a directory of resources
    allOf:
      - $ref: "#/definitions/ResourceMetadata"
      - properties:
          children:
            type: object
            description: List of child resources in the directory
            properties:
              child:
                type: array
                items:
                  type: object
                  description: A child resource
                  properties:
                    name:
                      type: string
                      description: The name of the resource, including the extension if applicable.
                    link:
                      type: object
                      description: A link to the child resource
                      properties:
                        href:
                          type: string
                          description: The link to the resource
                        rel:
                          type: string
                          description: Relationship between the current resource and the linked resource
                          enum:
                            - alternate
                        type:
                          type: string
                          description: The mime type returned by the link


# Definitions parameters
  MasterPW:
    title: masterPassword
    type: object
    properties:
      oldMasterPassword:
        type: string
        description: Current master password

  UpdateMasterPW:
    title: masterPassword
    type: object
    xml:
      name: masterPassword
    properties:
      oldMasterPassword:
        type: string
        description: Current master password
        example: oldPassword
      newMasterPassword:
        type: string
        description: New master password
        example: newPassword

  CatalogMode:
    title: catalog
    xml:
      name: catalog
    type: object
    properties:
      mode:
        type: string
        enum:
        - HIDE
        - MIXED
        - CHALLENGE

  SelfPassword:
    title: userPassword
    type: object
    xml:
      name: userPassword
    properties:
      newPassword:
        type: string
        description: New password
        example: newPassword

  ACLLayers:
    title: rules
    xml:
      name: rules
    type: object
    properties:
      rule:
        type: object
        properties:
          '@resource':
            type: string
            description: |
              Security pattern of the form <workspace>.<layer>.[r|w|a]
          text:
            type: string
            description: Comma-separated list of roles

  ACLServices:
    title: rules
    xml:
      name: rules
    type: object
    properties:
      rule:
        type: object
        properties:
          '@resource':
            type: string
            description: |
              Security pattern of the form \<service\>.\<operation\>
          text:
            type: string
            description: Comma-separated list of roles

  ACLREST:
    title: rules
    xml:
      name: rules
    type: object
    properties:
      rule:
        type: object
        properties:
          '@resource':
            type: string
            description: |
              Security pattern of the form \<URL Ant pattern\>:\<comma separated list of HTTP methods\>
          text:
            type: string
            description: Comma-separated list of roles

# Definitions settings
  Global:
    type: object
    xml:
      name: global
    properties:
      settings:
        $ref: "#/definitions/Settings"
      jai:
        $ref: "#/definitions/JAI"
      coverageAccess:
        $ref: "#/definitions/CoverageAccess"
      updateSequence:
        type: number
        description: Number of times the server configuration has been modified
      featureTypeCacheSize:
        type: number
        description: Maximum number of datastore connections and schemas that can be kept in memory
      globalServices:
        type: boolean
        description: Allow access to both global services and virtual services
      xmlPostRequestLogBufferSize:
        type: number
        description: With more verbose logging levels, sets the size of the buffer GeoServer will use to log the body of POST requests

  Settings:
    type: object
    xml:
      name: settings
    properties:
      id:
        type: string
        description: For internal use only. Do not modify.
      contact:
        $ref: "#/definitions/Contact"
      charset:
        type: string
        description: Character set to use for encoding (such as UTF-8)
      numDecimals:
        type: number
        description: Maximum nuber of decimal places to use (GML and GeoJSON output)
      onlineResource:
        type: string
        description: Server admin URL
      verbose:
        type: boolean
        description: Return XML with newlines and indents
      verboseExceptions:
        type: boolean
        description: Return service exceptions with full Java stack traces
      localWorkspaceIncludesPrefix:
        type: boolean
        description: Show namespace prefix when using virtual service

  Contact:
    type: object
    xml:
      name: contact
    properties:
      contactPerson:
        type: string
        description: Server admin point of contact
      contactOrganization:
        type: string
        description: Server admin organization
      contactPosition:
        type: string
        description: Server admin point of contact job title
      contactEmail:
        type: string
        description: Server admin email
      contactVoice:
        type: string
        description: Server admin voice
      contactFacsimile:
        type: string
        description: Server admin facsimile
      addressType:
        type: string
        description: Type of address
      addressCity:
        type: string
        description: Server admin city
      addressState:
        type: string
        description: Server admin state
      addressPostalCode:
        type: string
        description: Server admin postal code
      addressCountry:
        type: string
        description: Server admin country
    example:
      contact:
        contactPerson: string
        contactOrganization: string
        contactPosition: string
        contactEmail: string
        contactVoice: string
        contactFacsimile: string
        addressType: string
        addressCity: string
        addressState: string
        addressPostalCode: string
        addressCountry: string
  JAI:
    type: object
    properties:
      allowInterpolation:
        type: boolean
        description: No longer used
      recycling:
        type: boolean
        description: Tile recycling
      tilePriority:
        type: number
        description: Tile thread priority
      tileThreads:
        type: number
        description: Tile threads
      memoryCapacity:
        type: number
        description: Memory capacity
      memoryThreshold:
        type: number
        description: Memory threshold
      imageIOCache:
        type: boolean
        description: Enables Image IO cache
      pngAcceleration:
        type: boolean
        description: Enable JAI PNG native acceleration
      jpegAcceleration:
        type: boolean
        description: Enable JAI JPEG native acceleration
      allowNativeMosaic:
        type: boolean
        description: Enable JAI mosaic native acceleration
      allowNativeWarp:
        type: boolean
        description: Enable JAI native warp acceleration

  CoverageAccess:
    type: object
    properties:
      maxPoolSize:
        type: number
        description: Maximum number of threads that the Java ThreadPoolExecutor will create
      corePoolSize:
        type: number
        description: Number of threads that the Java ThreadPoolExecutor will create
      keepAlilveTime:
        type: number
        description: Timeout for threads to be terminated if they are idle and more than the core pool number exist.
      queueType:
        type: string
        description: Type of Blocking Queue to managed submitted tasks. Can be either UNBOUNDED or DIRECT.
      imageIOCacheThreshold:
        type: number
        description: Threshold size to choose between file-based cache and memory-based cach

  WorkspaceSettings:
    title: settings
    type: object
    properties:
      contact:
        $ref: "#/definitions/WorkspaceContact"
      charset:
        type: string
        description: Character set to use for encoding (such as UTF-8)
      numDecimals:
        type: number
        description: Maximum nuber of decimal places to use (GML and GeoJSON output)
      onlineResource:
        type: string
        description: Server admin URL
      verbose:
        type: boolean
        description: Return XML with newlines and indents
      verboseExceptions:
        type: boolean
        description: Return service exceptions with full Java stack traces
      localWorkspaceIncludesPrefix:
        type: boolean
        description: Show namespace prefix when using virtual service
    example: {
      "settings": {
        "contact": {
          "contactPerson": "John Doe",
          "contactOrganization": "string",
          "contactPosition": "string",
          "contactEmail": "string",
          "contactVoice": "string",
          "contactFacsimile": "string",
          "addressType": "string",
          "address": "string",
          "addressDeliveryPoint": "string",
          "addressCity": "string",
          "addressState": "string",
          "addressPostalCode": "string",
          "addressCountry": "string"
        },
        "charset": "UTF-8",
        "numDecimals": 0,
        "onlineResource": "string",
        "verbose": true,
        "verboseExceptions": true,
        "localWorkspaceIncludesPrefix": true,
        "proxyBaseUrl" : "",
        "metadata": {
          "map": [
            {
              "entry": [
                {
                  "string": [
                    "root",
                    "the_rest_root_directory_path"
                  ]
                },
                {
                  "string": "quietOnNotFound",
                  "boolean": false
                }
              ]
            }
          ]
        }
      }
    }

  WorkspaceContact:
    type: object
    properties:
      contactPerson:
        type: string
        description: Server admin point of contact
      contactOrganization:
        type: string
        description: Server admin organization
      contactPosition:
        type: string
        description: Server admin point of contact job title
      contactEmail:
        type: string
        description: Server admin email
      contactVoice:
        type: string
        description: Server admin voice
      contactFacsimile:
        type: string
        description: Server admin facsimile
      addressType:
        type: string
        description: Type of address
      addressCity:
        type: string
        description: Server admin city
      addressState:
        type: string
        description: Server admin state
      addressPostalCode:
        type: string
        description: Server admin postal code
      addressCountry:
        type: string
        description: Server admin country
    example:
      contact:
        contactPerson: string
        contactOrganization: string
        contactPosition: string
        contactEmail: string
        contactVoice: string
        contactFacsimile: string
        addressType: string
        addressCity: string
        addressState: string
        addressPostalCode: string
        addressCountry: string

# Definition structuredcoverage
  Schema:
    type: object
    required: [ attributes, link ]
    example: |
        <?xml version="1.0" encoding="UTF-8"?>
        <Schema>
          <attributes>
            <Attribute>
              <name>the_geom</name>
              <minOccurs>0</minOccurs>
              <maxOccurs>1</maxOccurs>
              <nillable>true</nillable>
              <binding>com.vividsolutions.jts.geom.MultiPolygon</binding>
            </Attribute>
            <Attribute>
              <name>location</name>
              <minOccurs>0</minOccurs>
              <maxOccurs>1</maxOccurs>
              <nillable>true</nillable>
              <binding>java.lang.String</binding>
              <length>254</length>
            </Attribute>
            <Attribute>
              <name>ingestion</name>
              <minOccurs>0</minOccurs>
              <maxOccurs>1</maxOccurs>
              <nillable>true</nillable>
              <binding>java.util.Date</binding>
              <length>8</length>
            </Attribute>
            <Attribute>
              <name>elevation</name>
              <minOccurs>0</minOccurs>
              <maxOccurs>1</maxOccurs>
              <nillable>true</nillable>
              <binding>java.lang.Integer</binding>
              <length>9</length>
            </Attribute>
          </attributes>
          <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="http://localhost:8080/geoserver/rest/workspaces/wcs/coveragestores/watertemp/coverages/watertemp/index/granules.xml" rel="alternate" type="application/xml"/>
        </Schema>
    properties:
      attributes:
        type: array
        description: List of attributes
        items:
            $ref: "#/definitions/Attribute"
      link:
        type: string
        description: Link to the list of granules

  Attribute:
    type: object
    description: An attribute description
    properties:
      name:
        type: string
        description: Name of the attribute
      minOccurs:
        type: integer
        description: Minimum number of occurences (0 for optional attribute)
      maxOccurs:
        type: integer
        description: Maximumn number of occurences (normally 1)
      nillable:
        type: boolean
        description: If the attribute can be missing
      binding:
        type: string
        description: Name of the java class for the attribute
      length:
        type: integer
        description: Length of the field


# Definitions styles
  StyleInfoPost:
    title: style
    type: object
    properties:
      name:
        type: string
        description: Name of style
        example: roads_style
      filename:
        type: string
        description: Name of filename containing SLD code
        example: roads.sld

  StyleList:
    title: styles
    type: array
    items:
      $ref: '#/definitions/StyleListItem'

  StyleListItem:
    title: style
    type: object
    properties:
      name:
        type: string
        description: Name of style
      href:
        type: string
        description: URL to style definition

  Style:
    type: object
    title: style
    properties:
      name:
        type: string
        description: Name of style
      format:
        type: string
        description: Format of style
      languageVersion:
        type: object
        properties:
          version:
            type: string
            description: Version of style format
      filename:
        type: string
        description: File name of the style

  StyleWorkspace:
    type: object
    title: style
    properties:
      name:
        type: string
        description: Name of style
      workspace:
        type: object
        properties:
          name:
            type: string
            description: Name of workspace containing the style
      format:
        type: string
        description: Format of style
      languageVersion:
        type: object
        properties:
          version:
            type: string
            description: Version of style format
      filename:
        type: string
        description: File name of the style

  StyleLayer:
    type: object
    title: style
    properties:
      name:
        type: string
        description: Name of style
      layer:
        type: object
        properties:
          name:
            type: string
            description: Name of layer containing the style
      format:
        type: string
        description: Format of style
      languageVersion:
        type: object
        properties:
          version:
            type: string
            description: Version of style format
      filename:
        type: string
        description: File name of the style


# Definitions templates
  Templates:
    title: templates
    type: object
    properties:
      layerGroups:
        type: object

  TemplateReference:
    title: layers
    type: object
    properties:
      name:
        type: string
        description: Name of template
      link:
        type: string
        description: URL to template definition


# Definitions transforms
  TransformList:
    title: transforms
    type: array
    items:
      $ref: '#/definitions/TransformListItem'

  TransformListItem:
    title: transform
    type: object
    properties:
      name:
        type: string
        description: Name of the transformation
      href:
        type: string
        description: URL to the transformation

  Transform:
    title: transform
    xml:
      name: transform
    type: object
    properties:
      name:
        type: string
        description: Name of the transformation
      sourceFormat:
        type: string
        description: Source format accepted by the transformation
      outputFormat:
        type: string
        description: Output format produced by the transformation
      xslt:
        type: string
        description: Style sheet associated with the transformation


# Definitions wmslayers
  WMSStoreLayersList:
    title: wmsLayers
    type: array
    items:
      title: wmsLayer
      type: object
      properties:
         name:
           type: string
           description: Name of the layer
         link:
           type: string
           description: URL of the layer representation

  WMSStoreLayersAvailableList:
    title: list
    type: array
    items:
      title: wmsLayerName
      type: object
      properties:
         name:
           type: string
           description: Name of the layer
         link:
           type: string
           description: URL of the layer representation

  WMSStoreLayerInfo:
    title: wmsLayer
    xml:
      name: wmsLayer
    type: object
    properties:
      name:
        type: string
        description: Name of the layer, corresponding to the published name of the resource
      nativeName:
        type: string
        description: Name of the layer as known on the remote WMS
      namespace:
        type: object
        description: Namespace of the layer
        properties:
          name:
            type: string
            description: Name of the namespace
          link:
            type: string
            description: URL to the namespace representation.
      title:
        type: string
        description: Title of the layer
      abstract:
        type: string
        description: Description of the layer
      description:
        type: string
        description: Same as abstract
      keywords:
        type: array
        description: Collection of keywords associated with the layer
        items:
          type: object
          properties:
            string:
              type: string
              description: Keyword
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links
            items:
              type: object
              properties:
                type:
                  type: string
                  description: MIME type
                metadataType:
                  type: string
                  description: Type of metadata such as "FGDC"
                content:
                  type: string
                  description: Link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links
        properties:
          metadataLink:
            type: array
            description: Collection of data links
            items:
              type: object
              properties:
                type:
                  type: string
                  description: MIME type
                content:
                  type: string
                  description: Link URL
      nativeCRS:
        type: string
        description: Native coordinate reference system object in WKT
      srs:
        type: string
        description: Identifier of coordinate reference system
      nativeBoundingBox:
        type: object
        description: Bounds of the layer in its declared CRS.
        properties:
          minx:
            type: number
            description: Min x coordinate
          maxx:
            type: number
            description: Max x coordinate
          miny:
            type: number
            description: Min y coordinate
          maxy:
            type: number
            description: Max y coordinate
          crs:
            type: string
            description: Coordinate reference system of the bounding box
      latLonBoundingBox:
        type: object
        description: Bounds of the layer in latitude / longitude. This value represents a "fixed value" and is not calculated.
        properties:
          minx:
            type: number
            description: Min x coordinate
          maxx:
            type: number
            description: Max x coordinate
          miny:
            type: number
            description: Min y coordinate
          maxy:
            type: number
            description: Max y coordinate
          crs:
            type: string
            description: Coordinate reference system object of the bounding box
      projectionPolicy:
        type: string
        description: How to handle the coordinate reference system (native versus declared)
        enum:
        - FORCE_DECLARED
        - REPROJECT_TO_DECLARE
        - NONE
      enabled:
        type: boolean
        description: Whether the layer is enabled
      metadata:
        type: array
        description: A list of key/value metadata pairs.
        items:
          $ref: "#/definitions/WmsMetadataEntry"
      store:
        type: object
        description: Store conaining the resource
        properties:
          '@class':
            type: string
            description: Class of the store
          name:
            type: string
            description: Name of the store
          href:
            type: string
            description: URL to the data store

  WmsMetadataEntry:
      type: object
      title: entry
      properties:
        '@key':
          title: key
          type: string
          enum:
          - regionateStrategy
          - regionateFeatureLimit
          - cacheAgeMax
          - cachingEnabled
          - regionateAttribute
          - indexingEnabled
          - dirName
          description: Key used for metadata entry
        text:
          type: string
          description: Value of given key


# Definitions wmsstores
  WMSStoresList:
    title: wmsStores
    type: array
    items:
      $ref: '#/definitions/WMSStoresListItem'

  WMSStoresListItem:
    title: wmsStore
    type: object
    properties:
      name:
        type: string
        description: Name of WMS Store
      link:
        type: string
        description: URL to WMS store representation

  WMSStoreInfo:
    type: object
    title: wmsStore
    xml:
      name: wmsStore
    properties:
      name:
        type: string
        description: Name of the WMS store
      description:
        type: string
        description: Description of the WMS store
      type:
        type: string
        description: Type of store. Set to WMS.
      enabled:
        type: boolean
        description: Whether the store is enabled
      workspace:
        type: object
        description: Workspace containing the store
        required: [name]
        properties:
          name:
            type: string
            description: Name of the workspace
          link:
            type: string
            description: Link to the workspace representation
      metadata:
        type: object
        description: Miscellaneous configuration details about the WMS store
        properties:
          entry:
            type: object
            properties:
              '@key':
                type: string
                enum:
                - useConnectionPooling
                description: Set to useConnectionPooling
              text:
                type: boolean
                description: Whether connection pooling is enabled
      __default__:
          type: boolean
          description: Whether the store is the default store of the workspace
      capabilitiesURL:
        type: string
        description: Location of the WMS capabilities URL where the store originates
      user:
        type: string
        description: User name to use when connecting to the remote WMS
      password:
        type: string
        description: Password or hash to use when connecting to the remote WMS
      maxConnections:
        type: number
        description: Maximum number of simultaneous connections to use
      readTimeout:
        type: string
        description: Time in seconds before read time out
      connectTimeout:
        type: string
        description: Time in seconds before connection time out
      wmsLayers:
        type: array
        items:
          type: object
          properties:
            link:
              type: string
              description: Link to the WMS layers representation


# Definitions wmtslayers
  WMTSStoreLayersList:
    title: wmtsLayers
    type: array
    items:
      title: wmtsLayer
      type: object
      properties:
         name:
           type: string
           description: Name of the layer
         link:
           type: string
           description: URL of the layer representation

  WMTSStoreLayersAvailableList:
    title: list
    type: array
    items:
      title: wmtsLayerName
      type: object
      properties:
         name:
           type: string
           description: Name of the layer
         link:
           type: string
           description: URL of the layer representation

  WMTSStoreLayerInfo:
    title: wmtsLayer
    xml:
      name: wmtsLayer
    type: object
    properties:
      name:
        type: string
        description: Name of the layer, corresponding to the published name of the resource
      nativeName:
        type: string
        description: Name of the layer as known on the remote WMTS
      namespace:
        type: object
        description: Namespace of the layer
        properties:
          name:
            type: string
            description: Name of the namespace
          link:
            type: string
            description: URL to the namespace representation.
      title:
        type: string
        description: Title of the layer
      abstract:
        type: string
        description: Description of the layer
      description:
        type: string
        description: Same as abstract
      keywords:
        type: array
        description: Collection of keywords associated with the layer
        items:
          type: object
          properties:
            string:
              type: string
              description: Keyword
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links
            items:
              type: object
              properties:
                type:
                  type: string
                  description: MIME type
                metadataType:
                  type: string
                  description: Type of metadata such as "FGDC"
                content:
                  type: string
                  description: Link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links
        properties:
          metadataLink:
            type: array
            description: Collection of data links
            items:
              type: object
              properties:
                type:
                  type: string
                  description: MIME type
                content:
                  type: string
                  description: Link URL
      nativeCRS:
        type: string
        description: Native coordinate reference system object in WKT
      srs:
        type: string
        description: Identifier of coordinate reference system
      nativeBoundingBox:
        type: object
        description: Bounds of the layer in its declared CRS.
        properties:
          minx:
            type: number
            description: Min x coordinate
          maxx:
            type: number
            description: Max x coordinate
          miny:
            type: number
            description: Min y coordinate
          maxy:
            type: number
            description: Max y coordinate
          crs:
            type: string
            description: Coordinate reference system of the bounding box
      latLonBoundingBox:
        type: object
        description: Bounds of the layer in latitude / longitude. This value represents a "fixed value" and is not calculated.
        properties:
          minx:
            type: number
            description: Min x coordinate
          maxx:
            type: number
            description: Max x coordinate
          miny:
            type: number
            description: Min y coordinate
          maxy:
            type: number
            description: Max y coordinate
          crs:
            type: string
            description: Coordinate reference system object of the bounding box
      projectionPolicy:
        type: string
        description: How to handle the coordinate reference system (native versus declared)
        enum:
        - FORCE_DECLARED
        - REPROJECT_TO_DECLARE
        - NONE
      enabled:
        type: boolean
        description: Whether the layer is enabled
      metadata:
        type: array
        description: A list of key/value metadata pairs.
        items:
          $ref: "#/definitions/WmtsMetadataEntry"
      store:
        type: object
        description: Store conaining the resource
        properties:
          '@class':
            type: string
            description: Class of the store
          name:
            type: string
            description: Name of the store
          href:
            type: string
            description: URL to the data store

  WmtsMetadataEntry:
      type: object
      title: entry
      properties:
        '@key':
          title: key
          type: string
          enum:
          - regionateStrategy
          - regionateFeatureLimit
          - cacheAgeMax
          - cachingEnabled
          - regionateAttribute
          - indexingEnabled
          - dirName
          description: Key used for metadata entry
        text:
          type: string
          description: Value of given key


# Definitions wmtsstores

  WMTSStoresList:
    title: wmtsStores
    type: array
    items:
      $ref: '#/definitions/WMTSStoresListItem'

  WMTSStoresListItem:
    title: wmtsStore
    type: object
    properties:
      name:
        type: string
        description: Name of WMTS Store
      link:
        type: string
        description: URL to WMTS store representation

  WMTSStoreInfo:
    type: object
    title: wmtsStore
    xml:
      name: wmtsStore
    properties:
      name:
        type: string
        description: Name of the WMTS store
      description:
        type: string
        description: Description of the WMTS store
      type:
        type: string
        description: Type of store. Set to WMTS.
      enabled:
        type: boolean
        description: Whether the store is enabled
      workspace:
        type: object
        description: Workspace containing the store
        required: [name]
        properties:
          name:
            type: string
            description: Name of the workspace
          link:
            type: string
            description: Link to the workspace representation
      metadata:
        type: object
        description: Miscellaneous configuration details about the WMTS store
        properties:
          entry:
            type: object
            properties:
              '@key':
                type: string
                enum:
                - useConnectionPooling
                description: Set to useConnectionPooling
              text:
                type: boolean
                description: Whether connection pooling is enabled
      __default__:
          type: boolean
          description: Whether the store is the default store of the workspace
      capabilitiesURL:
        type: string
        description: Location of the WMTS capabilities URL where the store originates
      user:
        type: string
        description: User name to use when connecting to the remote WMTS
      password:
        type: string
        description: Password or hash to use when connecting to the remote WMTS
      maxConnections:
        type: number
        description: Maximum number of simultaneous connections to use
      readTimeout:
        type: string
        description: Time in seconds before read time out
      connectTimeout:
        type: string
        description: Time in seconds before connection time out
      wmtsLayers:
        type: array
        items:
          type: object
          properties:
            link:
              type: string
              description: Link to the WMTS layers representation


# Definitions workspaces
  Workspace:
    title: Workspace
    xml:
      name: workspace
    type: object
    properties:
      name:
        type: string
        description: name of the workspace
      isolated:
        type: boolean
        description: isolated workspace
    example:
      workspace:
        isolated: false

  WorkspacesResponse:
    title: Workspaces
    type: object
    properties:
      workspaces:
        $ref: "#/definitions/WorkspaceResponse"

  WorkspaceResponse:
    title: Workspace Response
    type: object
    properties:
      name:
        type: string
        description: Name of workspace
      dataStores:
        type: string
        description: URL to Datas tores in this workspace
      coverageStores:
        type: string
        description: URL to Coverage stores in this workspace
      wmsStores:
        type: string
        description: URL to WMS stores in this workspace


# Definitions usergroup
  Users:
    title: users
    xml:
      name: users
    type: array
    items:
      $ref: "#/definitions/User"

  User:
    title: user
    xml:
      name: user
    type: object
    properties:
      userName:
        type: string
      password:
        type: string
      enabled:
        type: string
        enum:
          - true
          - false
  Groups:
    title: groups
    xml:
      name: groups
    type: array
    items:
      $ref: "#/definitions/Group"

  Group:
    title: group
    xml:
      name: group
    type: string


# Definitions roles
  Roles:
    title: roles
    xml:
      name: roles
    type: array
    items:
      $ref: "#/definitions/Role"

  Role:
    title: role
    xml:
      name: role
    type: string
